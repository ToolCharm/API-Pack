{
    "openapi": "3.0.1",
    "servers": [
        {
            "url": "https://rest.ably.io"
        }
    ],
    "info": {
        "contact": {
            "email": "support@ably.io",
            "name": "Ably Support",
            "url": "https://www.ably.io/contact",
            "x-twitter": "ablyrealtime"
        },
        "description": "The [REST API specification](https://www.ably.io/documentation/rest-api) for Ably.",
        "title": "Platform API",
        "version": "1.1.0",
        "x-apisguru-categories": [
            "cloud"
        ],
        "x-logo": {
            "url": "https://twitter.com/ablyrealtime/profile_image?size=original"
        },
        "x-origin": [
            {
                "format": "openapi",
                "url": "https://raw.githubusercontent.com/ably/open-specs/main/definitions/platform-v1.yaml",
                "version": "3.0"
            }
        ],
        "x-providerName": "ably.io",
        "x-serviceName": "platform"
    },
    "security": [
        {
            "basicAuth": []
        },
        {
            "bearerAuth": []
        }
    ],
    "paths": {
        "/channels": {
            "get": {
                "description": "Enumerate all active channels of the application",
                "operationId": "getMetadataOfAllChannels",
                "parameters": [
                    {
                        "in": "query",
                        "name": "limit",
                        "schema": {
                            "default": 100,
                            "type": "integer"
                        }
                    },
                    {
                        "description": "Optionally limits the query to only those channels whose name starts with the given prefix",
                        "in": "query",
                        "name": "prefix",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "optionally specifies whether to return just channel names (by=id) or ChannelDetails (by=value)",
                        "in": "query",
                        "name": "by",
                        "schema": {
                            "enum": [
                                "value",
                                "id"
                            ],
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "2XX": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "oneOf": [
                                        {
                                            "items": {
                                                "$ref": "#/components/schemas/ChannelDetails"
                                            },
                                            "type": "array"
                                        },
                                        {
                                            "items": {
                                                "type": "string"
                                            },
                                            "type": "array"
                                        }
                                    ]
                                }
                            },
                            "application/x-msgpack": {
                                "schema": {
                                    "oneOf": [
                                        {
                                            "items": {
                                                "$ref": "#/components/schemas/ChannelDetails"
                                            },
                                            "type": "array"
                                        },
                                        {
                                            "items": {
                                                "type": "string"
                                            },
                                            "type": "array"
                                        }
                                    ]
                                }
                            },
                            "text/html": {
                                "schema": {
                                    "type": "string"
                                }
                            }
                        },
                        "description": "OK",
                        "headers": {
                            "link": {
                                "$ref": "#/components/headers/Link"
                            }
                        }
                    },
                    "default": {
                        "$ref": "#/components/responses/Error"
                    }
                },
                "summary": "Enumerate all active channels of the application",
                "tags": [
                    "Status"
                ],
                "api_calls": [
                    {
                        "id": "shell_curl",
                        "title": "Shell + Curl",
                        "content": "curl --request GET \\\n  --url 'https://rest.ably.io/channels?format=SOME_STRING_VALUE&limit=SOME_INTEGER_VALUE&prefix=SOME_STRING_VALUE&by=SOME_STRING_VALUE' \\\n  --header 'Authorization: Basic REPLACE_BASIC_AUTH' \\\n  --header 'X-Ably-Version: SOME_STRING_VALUE'"
                    },
                    {
                        "id": "java_okhttp",
                        "title": "Java + Okhttp",
                        "content": "OkHttpClient client = new OkHttpClient();\n\nRequest request = new Request.Builder()\n  .url(\"https://rest.ably.io/channels?format=SOME_STRING_VALUE&limit=SOME_INTEGER_VALUE&prefix=SOME_STRING_VALUE&by=SOME_STRING_VALUE\")\n  .get()\n  .addHeader(\"X-Ably-Version\", \"SOME_STRING_VALUE\")\n  .addHeader(\"Authorization\", \"Basic REPLACE_BASIC_AUTH\")\n  .build();\n\nResponse response = client.newCall(request).execute();"
                    },
                    {
                        "id": "node_request",
                        "title": "Node + Request",
                        "content": "const request = require('request');\n\nconst options = {\n  method: 'GET',\n  url: 'https://rest.ably.io/channels',\n  qs: {\n    format: 'SOME_STRING_VALUE',\n    limit: 'SOME_INTEGER_VALUE',\n    prefix: 'SOME_STRING_VALUE',\n    by: 'SOME_STRING_VALUE'\n  },\n  headers: {\n    'X-Ably-Version': 'SOME_STRING_VALUE',\n    Authorization: 'Basic REPLACE_BASIC_AUTH'\n  }\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
                    },
                    {
                        "id": "python_python3",
                        "title": "Python + Python3",
                        "content": "import http.client\n\nconn = http.client.HTTPSConnection(\"rest.ably.io\")\n\nheaders = {\n    'X-Ably-Version': \"SOME_STRING_VALUE\",\n    'Authorization': \"Basic REPLACE_BASIC_AUTH\"\n    }\n\nconn.request(\"GET\", \"/channels?format=SOME_STRING_VALUE&limit=SOME_INTEGER_VALUE&prefix=SOME_STRING_VALUE&by=SOME_STRING_VALUE\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
                    },
                    {
                        "id": "go_native",
                        "title": "Go + Native",
                        "content": "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://rest.ably.io/channels?format=SOME_STRING_VALUE&limit=SOME_INTEGER_VALUE&prefix=SOME_STRING_VALUE&by=SOME_STRING_VALUE\"\n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"X-Ably-Version\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"Authorization\", \"Basic REPLACE_BASIC_AUTH\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
                    },
                    {
                        "id": "ruby_native",
                        "title": "Ruby + Native",
                        "content": "require 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://rest.ably.io/channels?format=SOME_STRING_VALUE&limit=SOME_INTEGER_VALUE&prefix=SOME_STRING_VALUE&by=SOME_STRING_VALUE\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Get.new(url)\nrequest[\"X-Ably-Version\"] = 'SOME_STRING_VALUE'\nrequest[\"Authorization\"] = 'Basic REPLACE_BASIC_AUTH'\n\nresponse = http.request(request)\nputs response.read_body"
                    },
                    {
                        "id": "php_curl",
                        "title": "Php + Curl",
                        "content": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n  CURLOPT_URL => \"https://rest.ably.io/channels?format=SOME_STRING_VALUE&limit=SOME_INTEGER_VALUE&prefix=SOME_STRING_VALUE&by=SOME_STRING_VALUE\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"GET\",\n  CURLOPT_HTTPHEADER => [\n    \"Authorization: Basic REPLACE_BASIC_AUTH\",\n    \"X-Ably-Version: SOME_STRING_VALUE\"\n  ],\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
                    },
                    {
                        "id": "swift_nsurlsession",
                        "title": "Swift + Nsurlsession",
                        "content": "import Foundation\n\nlet headers = [\n  \"X-Ably-Version\": \"SOME_STRING_VALUE\",\n  \"Authorization\": \"Basic REPLACE_BASIC_AUTH\"\n]\n\nlet request = NSMutableURLRequest(url: NSURL(string: \"https://rest.ably.io/channels?format=SOME_STRING_VALUE&limit=SOME_INTEGER_VALUE&prefix=SOME_STRING_VALUE&by=SOME_STRING_VALUE\")! as URL,\n                                        cachePolicy: .useProtocolCachePolicy,\n                                    timeoutInterval: 10.0)\nrequest.httpMethod = \"GET\"\nrequest.allHTTPHeaderFields = headers\n\nlet session = URLSession.shared\nlet dataTask = session.dataTask(with: request as URLRequest, completionHandler: { (data, response, error) -> Void in\n  if (error != nil) {\n    print(error)\n  } else {\n    let httpResponse = response as? HTTPURLResponse\n    print(httpResponse)\n  }\n})\n\ndataTask.resume()"
                    },
                    {
                        "id": "c_libcurl",
                        "title": "C + Libcurl",
                        "content": "CURL *hnd = curl_easy_init();\n\ncurl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, \"GET\");\ncurl_easy_setopt(hnd, CURLOPT_URL, \"https://rest.ably.io/channels?format=SOME_STRING_VALUE&limit=SOME_INTEGER_VALUE&prefix=SOME_STRING_VALUE&by=SOME_STRING_VALUE\");\n\nstruct curl_slist *headers = NULL;\nheaders = curl_slist_append(headers, \"X-Ably-Version: SOME_STRING_VALUE\");\nheaders = curl_slist_append(headers, \"Authorization: Basic REPLACE_BASIC_AUTH\");\ncurl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);\n\nCURLcode ret = curl_easy_perform(hnd);"
                    },
                    {
                        "id": "javascript_xhr",
                        "title": "Javascript + Xhr",
                        "content": "const data = null;\n\nconst xhr = new XMLHttpRequest();\nxhr.withCredentials = true;\n\nxhr.addEventListener(\"readystatechange\", function () {\n  if (this.readyState === this.DONE) {\n    console.log(this.responseText);\n  }\n});\n\nxhr.open(\"GET\", \"https://rest.ably.io/channels?format=SOME_STRING_VALUE&limit=SOME_INTEGER_VALUE&prefix=SOME_STRING_VALUE&by=SOME_STRING_VALUE\");\nxhr.setRequestHeader(\"X-Ably-Version\", \"SOME_STRING_VALUE\");\nxhr.setRequestHeader(\"Authorization\", \"Basic REPLACE_BASIC_AUTH\");\n\nxhr.send(data);"
                    }
                ]
            },
            "parameters": [
                {
                    "$ref": "#/components/parameters/versionHeader"
                },
                {
                    "$ref": "#/components/parameters/responseFormat"
                }
            ]
        },
        "/channels/{channel_id}": {
            "get": {
                "description": "Get metadata of a channel",
                "operationId": "getMetadataOfChannel",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/channelId"
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ChannelDetails"
                                }
                            }
                        },
                        "description": "OK",
                        "headers": {
                            "x-ably-serverid": {
                                "$ref": "#/components/headers/ServerId"
                            }
                        }
                    },
                    "default": {
                        "$ref": "#/components/responses/Error"
                    }
                },
                "summary": "Get metadata of a channel",
                "tags": [
                    "Status"
                ],
                "api_calls": [
                    {
                        "id": "shell_curl",
                        "title": "Shell + Curl",
                        "content": "curl --request GET \\\n  --url 'https://rest.ably.io/channels/%7Bchannel_id%7D?format=SOME_STRING_VALUE' \\\n  --header 'Authorization: Basic REPLACE_BASIC_AUTH' \\\n  --header 'X-Ably-Version: SOME_STRING_VALUE'"
                    },
                    {
                        "id": "java_okhttp",
                        "title": "Java + Okhttp",
                        "content": "OkHttpClient client = new OkHttpClient();\n\nRequest request = new Request.Builder()\n  .url(\"https://rest.ably.io/channels/%7Bchannel_id%7D?format=SOME_STRING_VALUE\")\n  .get()\n  .addHeader(\"X-Ably-Version\", \"SOME_STRING_VALUE\")\n  .addHeader(\"Authorization\", \"Basic REPLACE_BASIC_AUTH\")\n  .build();\n\nResponse response = client.newCall(request).execute();"
                    },
                    {
                        "id": "node_request",
                        "title": "Node + Request",
                        "content": "const request = require('request');\n\nconst options = {\n  method: 'GET',\n  url: 'https://rest.ably.io/channels/%7Bchannel_id%7D',\n  qs: {format: 'SOME_STRING_VALUE'},\n  headers: {\n    'X-Ably-Version': 'SOME_STRING_VALUE',\n    Authorization: 'Basic REPLACE_BASIC_AUTH'\n  }\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
                    },
                    {
                        "id": "python_python3",
                        "title": "Python + Python3",
                        "content": "import http.client\n\nconn = http.client.HTTPSConnection(\"rest.ably.io\")\n\nheaders = {\n    'X-Ably-Version': \"SOME_STRING_VALUE\",\n    'Authorization': \"Basic REPLACE_BASIC_AUTH\"\n    }\n\nconn.request(\"GET\", \"/channels/%7Bchannel_id%7D?format=SOME_STRING_VALUE\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
                    },
                    {
                        "id": "go_native",
                        "title": "Go + Native",
                        "content": "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://rest.ably.io/channels/%7Bchannel_id%7D?format=SOME_STRING_VALUE\"\n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"X-Ably-Version\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"Authorization\", \"Basic REPLACE_BASIC_AUTH\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
                    },
                    {
                        "id": "ruby_native",
                        "title": "Ruby + Native",
                        "content": "require 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://rest.ably.io/channels/%7Bchannel_id%7D?format=SOME_STRING_VALUE\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Get.new(url)\nrequest[\"X-Ably-Version\"] = 'SOME_STRING_VALUE'\nrequest[\"Authorization\"] = 'Basic REPLACE_BASIC_AUTH'\n\nresponse = http.request(request)\nputs response.read_body"
                    },
                    {
                        "id": "php_curl",
                        "title": "Php + Curl",
                        "content": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n  CURLOPT_URL => \"https://rest.ably.io/channels/%7Bchannel_id%7D?format=SOME_STRING_VALUE\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"GET\",\n  CURLOPT_HTTPHEADER => [\n    \"Authorization: Basic REPLACE_BASIC_AUTH\",\n    \"X-Ably-Version: SOME_STRING_VALUE\"\n  ],\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
                    },
                    {
                        "id": "swift_nsurlsession",
                        "title": "Swift + Nsurlsession",
                        "content": "import Foundation\n\nlet headers = [\n  \"X-Ably-Version\": \"SOME_STRING_VALUE\",\n  \"Authorization\": \"Basic REPLACE_BASIC_AUTH\"\n]\n\nlet request = NSMutableURLRequest(url: NSURL(string: \"https://rest.ably.io/channels/%7Bchannel_id%7D?format=SOME_STRING_VALUE\")! as URL,\n                                        cachePolicy: .useProtocolCachePolicy,\n                                    timeoutInterval: 10.0)\nrequest.httpMethod = \"GET\"\nrequest.allHTTPHeaderFields = headers\n\nlet session = URLSession.shared\nlet dataTask = session.dataTask(with: request as URLRequest, completionHandler: { (data, response, error) -> Void in\n  if (error != nil) {\n    print(error)\n  } else {\n    let httpResponse = response as? HTTPURLResponse\n    print(httpResponse)\n  }\n})\n\ndataTask.resume()"
                    },
                    {
                        "id": "c_libcurl",
                        "title": "C + Libcurl",
                        "content": "CURL *hnd = curl_easy_init();\n\ncurl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, \"GET\");\ncurl_easy_setopt(hnd, CURLOPT_URL, \"https://rest.ably.io/channels/%7Bchannel_id%7D?format=SOME_STRING_VALUE\");\n\nstruct curl_slist *headers = NULL;\nheaders = curl_slist_append(headers, \"X-Ably-Version: SOME_STRING_VALUE\");\nheaders = curl_slist_append(headers, \"Authorization: Basic REPLACE_BASIC_AUTH\");\ncurl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);\n\nCURLcode ret = curl_easy_perform(hnd);"
                    },
                    {
                        "id": "javascript_xhr",
                        "title": "Javascript + Xhr",
                        "content": "const data = null;\n\nconst xhr = new XMLHttpRequest();\nxhr.withCredentials = true;\n\nxhr.addEventListener(\"readystatechange\", function () {\n  if (this.readyState === this.DONE) {\n    console.log(this.responseText);\n  }\n});\n\nxhr.open(\"GET\", \"https://rest.ably.io/channels/%7Bchannel_id%7D?format=SOME_STRING_VALUE\");\nxhr.setRequestHeader(\"X-Ably-Version\", \"SOME_STRING_VALUE\");\nxhr.setRequestHeader(\"Authorization\", \"Basic REPLACE_BASIC_AUTH\");\n\nxhr.send(data);"
                    }
                ]
            },
            "parameters": [
                {
                    "$ref": "#/components/parameters/versionHeader"
                },
                {
                    "$ref": "#/components/parameters/responseFormat"
                }
            ]
        },
        "/channels/{channel_id}/messages": {
            "get": {
                "description": "Get message history for a channel",
                "operationId": "getMessagesByChannel",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/channelId"
                    },
                    {
                        "$ref": "#/components/parameters/filterStart"
                    },
                    {
                        "$ref": "#/components/parameters/filterLimit"
                    },
                    {
                        "$ref": "#/components/parameters/filterEnd"
                    },
                    {
                        "$ref": "#/components/parameters/filterDirection"
                    }
                ],
                "responses": {
                    "2XX": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/Message"
                                    },
                                    "type": "array"
                                }
                            },
                            "application/x-msgpack": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/Message"
                                    },
                                    "type": "array"
                                }
                            },
                            "text/html": {
                                "schema": {
                                    "type": "string"
                                }
                            }
                        },
                        "description": "OK",
                        "headers": {
                            "link": {
                                "$ref": "#/components/headers/Link"
                            },
                            "x-ably-serverid": {
                                "$ref": "#/components/headers/ServerId"
                            }
                        }
                    },
                    "default": {
                        "description": "Error",
                        "headers": {
                            "x-ably-errorcode": {
                                "$ref": "#/components/headers/ErrorCode"
                            },
                            "x-ably-errormessage": {
                                "$ref": "#/components/headers/ErrorMessage"
                            },
                            "x-ably-serverid": {
                                "$ref": "#/components/headers/ServerId"
                            }
                        }
                    }
                },
                "summary": "Get message history for a channel",
                "tags": [
                    "History"
                ],
                "api_calls": [
                    {
                        "id": "shell_curl",
                        "title": "Shell + Curl",
                        "content": "curl --request GET \\\n  --url 'https://rest.ably.io/channels/%7Bchannel_id%7D/messages?format=SOME_STRING_VALUE&start=SOME_STRING_VALUE&limit=SOME_INTEGER_VALUE&end=SOME_STRING_VALUE&direction=SOME_STRING_VALUE' \\\n  --header 'Authorization: Basic REPLACE_BASIC_AUTH' \\\n  --header 'X-Ably-Version: SOME_STRING_VALUE'"
                    },
                    {
                        "id": "java_okhttp",
                        "title": "Java + Okhttp",
                        "content": "OkHttpClient client = new OkHttpClient();\n\nRequest request = new Request.Builder()\n  .url(\"https://rest.ably.io/channels/%7Bchannel_id%7D/messages?format=SOME_STRING_VALUE&start=SOME_STRING_VALUE&limit=SOME_INTEGER_VALUE&end=SOME_STRING_VALUE&direction=SOME_STRING_VALUE\")\n  .get()\n  .addHeader(\"X-Ably-Version\", \"SOME_STRING_VALUE\")\n  .addHeader(\"Authorization\", \"Basic REPLACE_BASIC_AUTH\")\n  .build();\n\nResponse response = client.newCall(request).execute();"
                    },
                    {
                        "id": "node_request",
                        "title": "Node + Request",
                        "content": "const request = require('request');\n\nconst options = {\n  method: 'GET',\n  url: 'https://rest.ably.io/channels/%7Bchannel_id%7D/messages',\n  qs: {\n    format: 'SOME_STRING_VALUE',\n    start: 'SOME_STRING_VALUE',\n    limit: 'SOME_INTEGER_VALUE',\n    end: 'SOME_STRING_VALUE',\n    direction: 'SOME_STRING_VALUE'\n  },\n  headers: {\n    'X-Ably-Version': 'SOME_STRING_VALUE',\n    Authorization: 'Basic REPLACE_BASIC_AUTH'\n  }\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
                    },
                    {
                        "id": "python_python3",
                        "title": "Python + Python3",
                        "content": "import http.client\n\nconn = http.client.HTTPSConnection(\"rest.ably.io\")\n\nheaders = {\n    'X-Ably-Version': \"SOME_STRING_VALUE\",\n    'Authorization': \"Basic REPLACE_BASIC_AUTH\"\n    }\n\nconn.request(\"GET\", \"/channels/%7Bchannel_id%7D/messages?format=SOME_STRING_VALUE&start=SOME_STRING_VALUE&limit=SOME_INTEGER_VALUE&end=SOME_STRING_VALUE&direction=SOME_STRING_VALUE\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
                    },
                    {
                        "id": "go_native",
                        "title": "Go + Native",
                        "content": "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://rest.ably.io/channels/%7Bchannel_id%7D/messages?format=SOME_STRING_VALUE&start=SOME_STRING_VALUE&limit=SOME_INTEGER_VALUE&end=SOME_STRING_VALUE&direction=SOME_STRING_VALUE\"\n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"X-Ably-Version\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"Authorization\", \"Basic REPLACE_BASIC_AUTH\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
                    },
                    {
                        "id": "ruby_native",
                        "title": "Ruby + Native",
                        "content": "require 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://rest.ably.io/channels/%7Bchannel_id%7D/messages?format=SOME_STRING_VALUE&start=SOME_STRING_VALUE&limit=SOME_INTEGER_VALUE&end=SOME_STRING_VALUE&direction=SOME_STRING_VALUE\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Get.new(url)\nrequest[\"X-Ably-Version\"] = 'SOME_STRING_VALUE'\nrequest[\"Authorization\"] = 'Basic REPLACE_BASIC_AUTH'\n\nresponse = http.request(request)\nputs response.read_body"
                    },
                    {
                        "id": "php_curl",
                        "title": "Php + Curl",
                        "content": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n  CURLOPT_URL => \"https://rest.ably.io/channels/%7Bchannel_id%7D/messages?format=SOME_STRING_VALUE&start=SOME_STRING_VALUE&limit=SOME_INTEGER_VALUE&end=SOME_STRING_VALUE&direction=SOME_STRING_VALUE\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"GET\",\n  CURLOPT_HTTPHEADER => [\n    \"Authorization: Basic REPLACE_BASIC_AUTH\",\n    \"X-Ably-Version: SOME_STRING_VALUE\"\n  ],\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
                    },
                    {
                        "id": "swift_nsurlsession",
                        "title": "Swift + Nsurlsession",
                        "content": "import Foundation\n\nlet headers = [\n  \"X-Ably-Version\": \"SOME_STRING_VALUE\",\n  \"Authorization\": \"Basic REPLACE_BASIC_AUTH\"\n]\n\nlet request = NSMutableURLRequest(url: NSURL(string: \"https://rest.ably.io/channels/%7Bchannel_id%7D/messages?format=SOME_STRING_VALUE&start=SOME_STRING_VALUE&limit=SOME_INTEGER_VALUE&end=SOME_STRING_VALUE&direction=SOME_STRING_VALUE\")! as URL,\n                                        cachePolicy: .useProtocolCachePolicy,\n                                    timeoutInterval: 10.0)\nrequest.httpMethod = \"GET\"\nrequest.allHTTPHeaderFields = headers\n\nlet session = URLSession.shared\nlet dataTask = session.dataTask(with: request as URLRequest, completionHandler: { (data, response, error) -> Void in\n  if (error != nil) {\n    print(error)\n  } else {\n    let httpResponse = response as? HTTPURLResponse\n    print(httpResponse)\n  }\n})\n\ndataTask.resume()"
                    },
                    {
                        "id": "c_libcurl",
                        "title": "C + Libcurl",
                        "content": "CURL *hnd = curl_easy_init();\n\ncurl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, \"GET\");\ncurl_easy_setopt(hnd, CURLOPT_URL, \"https://rest.ably.io/channels/%7Bchannel_id%7D/messages?format=SOME_STRING_VALUE&start=SOME_STRING_VALUE&limit=SOME_INTEGER_VALUE&end=SOME_STRING_VALUE&direction=SOME_STRING_VALUE\");\n\nstruct curl_slist *headers = NULL;\nheaders = curl_slist_append(headers, \"X-Ably-Version: SOME_STRING_VALUE\");\nheaders = curl_slist_append(headers, \"Authorization: Basic REPLACE_BASIC_AUTH\");\ncurl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);\n\nCURLcode ret = curl_easy_perform(hnd);"
                    },
                    {
                        "id": "javascript_xhr",
                        "title": "Javascript + Xhr",
                        "content": "const data = null;\n\nconst xhr = new XMLHttpRequest();\nxhr.withCredentials = true;\n\nxhr.addEventListener(\"readystatechange\", function () {\n  if (this.readyState === this.DONE) {\n    console.log(this.responseText);\n  }\n});\n\nxhr.open(\"GET\", \"https://rest.ably.io/channels/%7Bchannel_id%7D/messages?format=SOME_STRING_VALUE&start=SOME_STRING_VALUE&limit=SOME_INTEGER_VALUE&end=SOME_STRING_VALUE&direction=SOME_STRING_VALUE\");\nxhr.setRequestHeader(\"X-Ably-Version\", \"SOME_STRING_VALUE\");\nxhr.setRequestHeader(\"Authorization\", \"Basic REPLACE_BASIC_AUTH\");\n\nxhr.send(data);"
                    }
                ]
            },
            "parameters": [
                {
                    "$ref": "#/components/parameters/versionHeader"
                },
                {
                    "$ref": "#/components/parameters/responseFormat"
                }
            ],
            "post": {
                "description": "Publish a message to the specified channel",
                "operationId": "publishMessagesToChannel",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/channelId"
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/Message"
                            }
                        },
                        "application/x-msgpack": {
                            "schema": {
                                "$ref": "#/components/schemas/Message"
                            }
                        },
                        "application/x-www-form-urlencoded": {
                            "schema": {
                                "$ref": "#/components/schemas/Message"
                            }
                        }
                    }
                },
                "responses": {
                    "2XX": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "channel": {
                                            "type": "string"
                                        },
                                        "messageId": {
                                            "type": "string"
                                        }
                                    },
                                    "type": "object"
                                }
                            },
                            "application/x-msgpack": {
                                "schema": {
                                    "properties": {
                                        "channel": {
                                            "type": "string"
                                        },
                                        "messageId": {
                                            "type": "string"
                                        }
                                    },
                                    "type": "object"
                                }
                            },
                            "text/html": {
                                "schema": {
                                    "properties": {
                                        "channel": {
                                            "type": "string"
                                        },
                                        "messageId": {
                                            "type": "string"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        },
                        "description": "OK",
                        "headers": {
                            "x-ably-serverid": {
                                "$ref": "#/components/headers/ServerId"
                            }
                        }
                    },
                    "default": {
                        "$ref": "#/components/responses/Error"
                    }
                },
                "summary": "Publish a message to a channel",
                "tags": [
                    "Publishing"
                ],
                "api_calls": [
                    {
                        "id": "shell_curl",
                        "mimeType": "application/json",
                        "title": "Shell + Curl",
                        "content": "curl --request POST \\\n  --url 'https://rest.ably.io/channels/%7Bchannel_id%7D/messages?format=SOME_STRING_VALUE' \\\n  --header 'Authorization: Basic REPLACE_BASIC_AUTH' \\\n  --header 'X-Ably-Version: SOME_STRING_VALUE' \\\n  --header 'content-type: application/json' \\\n  --data '{\"clientId\":\"string\",\"connectionId\":\"string\",\"data\":\"string\",\"encoding\":\"string\",\"extras\":{\"push\":{\"apns\":{\"notification\":{\"body\":\"string\",\"collapseKey\":\"string\",\"icon\":\"string\",\"sound\":\"string\",\"title\":\"string\"}},\"data\":\"string\",\"fcm\":{\"notification\":{\"body\":\"string\",\"collapseKey\":\"string\",\"icon\":\"string\",\"sound\":\"string\",\"title\":\"string\"}},\"notification\":{\"body\":\"string\",\"collapseKey\":\"string\",\"icon\":\"string\",\"sound\":\"string\",\"title\":\"string\"},\"web\":{\"notification\":{\"body\":\"string\",\"collapseKey\":\"string\",\"icon\":\"string\",\"sound\":\"string\",\"title\":\"string\"}}}},\"name\":\"string\"}'"
                    },
                    {
                        "id": "java_okhttp",
                        "mimeType": "application/json",
                        "title": "Java + Okhttp",
                        "content": "OkHttpClient client = new OkHttpClient();\n\nMediaType mediaType = MediaType.parse(\"application/json\");\nRequestBody body = RequestBody.create(mediaType, \"{\\\"clientId\\\":\\\"string\\\",\\\"connectionId\\\":\\\"string\\\",\\\"data\\\":\\\"string\\\",\\\"encoding\\\":\\\"string\\\",\\\"extras\\\":{\\\"push\\\":{\\\"apns\\\":{\\\"notification\\\":{\\\"body\\\":\\\"string\\\",\\\"collapseKey\\\":\\\"string\\\",\\\"icon\\\":\\\"string\\\",\\\"sound\\\":\\\"string\\\",\\\"title\\\":\\\"string\\\"}},\\\"data\\\":\\\"string\\\",\\\"fcm\\\":{\\\"notification\\\":{\\\"body\\\":\\\"string\\\",\\\"collapseKey\\\":\\\"string\\\",\\\"icon\\\":\\\"string\\\",\\\"sound\\\":\\\"string\\\",\\\"title\\\":\\\"string\\\"}},\\\"notification\\\":{\\\"body\\\":\\\"string\\\",\\\"collapseKey\\\":\\\"string\\\",\\\"icon\\\":\\\"string\\\",\\\"sound\\\":\\\"string\\\",\\\"title\\\":\\\"string\\\"},\\\"web\\\":{\\\"notification\\\":{\\\"body\\\":\\\"string\\\",\\\"collapseKey\\\":\\\"string\\\",\\\"icon\\\":\\\"string\\\",\\\"sound\\\":\\\"string\\\",\\\"title\\\":\\\"string\\\"}}}},\\\"name\\\":\\\"string\\\"}\");\nRequest request = new Request.Builder()\n  .url(\"https://rest.ably.io/channels/%7Bchannel_id%7D/messages?format=SOME_STRING_VALUE\")\n  .post(body)\n  .addHeader(\"X-Ably-Version\", \"SOME_STRING_VALUE\")\n  .addHeader(\"Authorization\", \"Basic REPLACE_BASIC_AUTH\")\n  .addHeader(\"content-type\", \"application/json\")\n  .build();\n\nResponse response = client.newCall(request).execute();"
                    },
                    {
                        "id": "node_request",
                        "mimeType": "application/json",
                        "title": "Node + Request",
                        "content": "const request = require('request');\n\nconst options = {\n  method: 'POST',\n  url: 'https://rest.ably.io/channels/%7Bchannel_id%7D/messages',\n  qs: {format: 'SOME_STRING_VALUE'},\n  headers: {\n    'X-Ably-Version': 'SOME_STRING_VALUE',\n    Authorization: 'Basic REPLACE_BASIC_AUTH',\n    'content-type': 'application/json'\n  },\n  body: {\n    clientId: 'string',\n    connectionId: 'string',\n    data: 'string',\n    encoding: 'string',\n    extras: {\n      push: {\n        apns: {\n          notification: {\n            body: 'string',\n            collapseKey: 'string',\n            icon: 'string',\n            sound: 'string',\n            title: 'string'\n          }\n        },\n        data: 'string',\n        fcm: {\n          notification: {\n            body: 'string',\n            collapseKey: 'string',\n            icon: 'string',\n            sound: 'string',\n            title: 'string'\n          }\n        },\n        notification: {\n          body: 'string',\n          collapseKey: 'string',\n          icon: 'string',\n          sound: 'string',\n          title: 'string'\n        },\n        web: {\n          notification: {\n            body: 'string',\n            collapseKey: 'string',\n            icon: 'string',\n            sound: 'string',\n            title: 'string'\n          }\n        }\n      }\n    },\n    name: 'string'\n  },\n  json: true\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
                    },
                    {
                        "id": "python_python3",
                        "mimeType": "application/json",
                        "title": "Python + Python3",
                        "content": "import http.client\n\nconn = http.client.HTTPSConnection(\"rest.ably.io\")\n\npayload = \"{\\\"clientId\\\":\\\"string\\\",\\\"connectionId\\\":\\\"string\\\",\\\"data\\\":\\\"string\\\",\\\"encoding\\\":\\\"string\\\",\\\"extras\\\":{\\\"push\\\":{\\\"apns\\\":{\\\"notification\\\":{\\\"body\\\":\\\"string\\\",\\\"collapseKey\\\":\\\"string\\\",\\\"icon\\\":\\\"string\\\",\\\"sound\\\":\\\"string\\\",\\\"title\\\":\\\"string\\\"}},\\\"data\\\":\\\"string\\\",\\\"fcm\\\":{\\\"notification\\\":{\\\"body\\\":\\\"string\\\",\\\"collapseKey\\\":\\\"string\\\",\\\"icon\\\":\\\"string\\\",\\\"sound\\\":\\\"string\\\",\\\"title\\\":\\\"string\\\"}},\\\"notification\\\":{\\\"body\\\":\\\"string\\\",\\\"collapseKey\\\":\\\"string\\\",\\\"icon\\\":\\\"string\\\",\\\"sound\\\":\\\"string\\\",\\\"title\\\":\\\"string\\\"},\\\"web\\\":{\\\"notification\\\":{\\\"body\\\":\\\"string\\\",\\\"collapseKey\\\":\\\"string\\\",\\\"icon\\\":\\\"string\\\",\\\"sound\\\":\\\"string\\\",\\\"title\\\":\\\"string\\\"}}}},\\\"name\\\":\\\"string\\\"}\"\n\nheaders = {\n    'X-Ably-Version': \"SOME_STRING_VALUE\",\n    'Authorization': \"Basic REPLACE_BASIC_AUTH\",\n    'content-type': \"application/json\"\n    }\n\nconn.request(\"POST\", \"/channels/%7Bchannel_id%7D/messages?format=SOME_STRING_VALUE\", payload, headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
                    },
                    {
                        "id": "go_native",
                        "mimeType": "application/json",
                        "title": "Go + Native",
                        "content": "package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://rest.ably.io/channels/%7Bchannel_id%7D/messages?format=SOME_STRING_VALUE\"\n\n\tpayload := strings.NewReader(\"{\\\"clientId\\\":\\\"string\\\",\\\"connectionId\\\":\\\"string\\\",\\\"data\\\":\\\"string\\\",\\\"encoding\\\":\\\"string\\\",\\\"extras\\\":{\\\"push\\\":{\\\"apns\\\":{\\\"notification\\\":{\\\"body\\\":\\\"string\\\",\\\"collapseKey\\\":\\\"string\\\",\\\"icon\\\":\\\"string\\\",\\\"sound\\\":\\\"string\\\",\\\"title\\\":\\\"string\\\"}},\\\"data\\\":\\\"string\\\",\\\"fcm\\\":{\\\"notification\\\":{\\\"body\\\":\\\"string\\\",\\\"collapseKey\\\":\\\"string\\\",\\\"icon\\\":\\\"string\\\",\\\"sound\\\":\\\"string\\\",\\\"title\\\":\\\"string\\\"}},\\\"notification\\\":{\\\"body\\\":\\\"string\\\",\\\"collapseKey\\\":\\\"string\\\",\\\"icon\\\":\\\"string\\\",\\\"sound\\\":\\\"string\\\",\\\"title\\\":\\\"string\\\"},\\\"web\\\":{\\\"notification\\\":{\\\"body\\\":\\\"string\\\",\\\"collapseKey\\\":\\\"string\\\",\\\"icon\\\":\\\"string\\\",\\\"sound\\\":\\\"string\\\",\\\"title\\\":\\\"string\\\"}}}},\\\"name\\\":\\\"string\\\"}\")\n\n\treq, _ := http.NewRequest(\"POST\", url, payload)\n\n\treq.Header.Add(\"X-Ably-Version\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"Authorization\", \"Basic REPLACE_BASIC_AUTH\")\n\treq.Header.Add(\"content-type\", \"application/json\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
                    },
                    {
                        "id": "ruby_native",
                        "mimeType": "application/json",
                        "title": "Ruby + Native",
                        "content": "require 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://rest.ably.io/channels/%7Bchannel_id%7D/messages?format=SOME_STRING_VALUE\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Post.new(url)\nrequest[\"X-Ably-Version\"] = 'SOME_STRING_VALUE'\nrequest[\"Authorization\"] = 'Basic REPLACE_BASIC_AUTH'\nrequest[\"content-type\"] = 'application/json'\nrequest.body = \"{\\\"clientId\\\":\\\"string\\\",\\\"connectionId\\\":\\\"string\\\",\\\"data\\\":\\\"string\\\",\\\"encoding\\\":\\\"string\\\",\\\"extras\\\":{\\\"push\\\":{\\\"apns\\\":{\\\"notification\\\":{\\\"body\\\":\\\"string\\\",\\\"collapseKey\\\":\\\"string\\\",\\\"icon\\\":\\\"string\\\",\\\"sound\\\":\\\"string\\\",\\\"title\\\":\\\"string\\\"}},\\\"data\\\":\\\"string\\\",\\\"fcm\\\":{\\\"notification\\\":{\\\"body\\\":\\\"string\\\",\\\"collapseKey\\\":\\\"string\\\",\\\"icon\\\":\\\"string\\\",\\\"sound\\\":\\\"string\\\",\\\"title\\\":\\\"string\\\"}},\\\"notification\\\":{\\\"body\\\":\\\"string\\\",\\\"collapseKey\\\":\\\"string\\\",\\\"icon\\\":\\\"string\\\",\\\"sound\\\":\\\"string\\\",\\\"title\\\":\\\"string\\\"},\\\"web\\\":{\\\"notification\\\":{\\\"body\\\":\\\"string\\\",\\\"collapseKey\\\":\\\"string\\\",\\\"icon\\\":\\\"string\\\",\\\"sound\\\":\\\"string\\\",\\\"title\\\":\\\"string\\\"}}}},\\\"name\\\":\\\"string\\\"}\"\n\nresponse = http.request(request)\nputs response.read_body"
                    },
                    {
                        "id": "php_curl",
                        "mimeType": "application/json",
                        "title": "Php + Curl",
                        "content": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n  CURLOPT_URL => \"https://rest.ably.io/channels/%7Bchannel_id%7D/messages?format=SOME_STRING_VALUE\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"POST\",\n  CURLOPT_POSTFIELDS => \"{\\\"clientId\\\":\\\"string\\\",\\\"connectionId\\\":\\\"string\\\",\\\"data\\\":\\\"string\\\",\\\"encoding\\\":\\\"string\\\",\\\"extras\\\":{\\\"push\\\":{\\\"apns\\\":{\\\"notification\\\":{\\\"body\\\":\\\"string\\\",\\\"collapseKey\\\":\\\"string\\\",\\\"icon\\\":\\\"string\\\",\\\"sound\\\":\\\"string\\\",\\\"title\\\":\\\"string\\\"}},\\\"data\\\":\\\"string\\\",\\\"fcm\\\":{\\\"notification\\\":{\\\"body\\\":\\\"string\\\",\\\"collapseKey\\\":\\\"string\\\",\\\"icon\\\":\\\"string\\\",\\\"sound\\\":\\\"string\\\",\\\"title\\\":\\\"string\\\"}},\\\"notification\\\":{\\\"body\\\":\\\"string\\\",\\\"collapseKey\\\":\\\"string\\\",\\\"icon\\\":\\\"string\\\",\\\"sound\\\":\\\"string\\\",\\\"title\\\":\\\"string\\\"},\\\"web\\\":{\\\"notification\\\":{\\\"body\\\":\\\"string\\\",\\\"collapseKey\\\":\\\"string\\\",\\\"icon\\\":\\\"string\\\",\\\"sound\\\":\\\"string\\\",\\\"title\\\":\\\"string\\\"}}}},\\\"name\\\":\\\"string\\\"}\",\n  CURLOPT_HTTPHEADER => [\n    \"Authorization: Basic REPLACE_BASIC_AUTH\",\n    \"X-Ably-Version: SOME_STRING_VALUE\",\n    \"content-type: application/json\"\n  ],\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
                    },
                    {
                        "id": "swift_nsurlsession",
                        "mimeType": "application/json",
                        "title": "Swift + Nsurlsession",
                        "content": "import Foundation\n\nlet headers = [\n  \"X-Ably-Version\": \"SOME_STRING_VALUE\",\n  \"Authorization\": \"Basic REPLACE_BASIC_AUTH\",\n  \"content-type\": \"application/json\"\n]\nlet parameters = [\n  \"clientId\": \"string\",\n  \"connectionId\": \"string\",\n  \"data\": \"string\",\n  \"encoding\": \"string\",\n  \"extras\": [\"push\": [\n      \"apns\": [\"notification\": [\n          \"body\": \"string\",\n          \"collapseKey\": \"string\",\n          \"icon\": \"string\",\n          \"sound\": \"string\",\n          \"title\": \"string\"\n        ]],\n      \"data\": \"string\",\n      \"fcm\": [\"notification\": [\n          \"body\": \"string\",\n          \"collapseKey\": \"string\",\n          \"icon\": \"string\",\n          \"sound\": \"string\",\n          \"title\": \"string\"\n        ]],\n      \"notification\": [\n        \"body\": \"string\",\n        \"collapseKey\": \"string\",\n        \"icon\": \"string\",\n        \"sound\": \"string\",\n        \"title\": \"string\"\n      ],\n      \"web\": [\"notification\": [\n          \"body\": \"string\",\n          \"collapseKey\": \"string\",\n          \"icon\": \"string\",\n          \"sound\": \"string\",\n          \"title\": \"string\"\n        ]]\n    ]],\n  \"name\": \"string\"\n] as [String : Any]\n\nlet postData = JSONSerialization.data(withJSONObject: parameters, options: [])\n\nlet request = NSMutableURLRequest(url: NSURL(string: \"https://rest.ably.io/channels/%7Bchannel_id%7D/messages?format=SOME_STRING_VALUE\")! as URL,\n                                        cachePolicy: .useProtocolCachePolicy,\n                                    timeoutInterval: 10.0)\nrequest.httpMethod = \"POST\"\nrequest.allHTTPHeaderFields = headers\nrequest.httpBody = postData as Data\n\nlet session = URLSession.shared\nlet dataTask = session.dataTask(with: request as URLRequest, completionHandler: { (data, response, error) -> Void in\n  if (error != nil) {\n    print(error)\n  } else {\n    let httpResponse = response as? HTTPURLResponse\n    print(httpResponse)\n  }\n})\n\ndataTask.resume()"
                    },
                    {
                        "id": "c_libcurl",
                        "mimeType": "application/json",
                        "title": "C + Libcurl",
                        "content": "CURL *hnd = curl_easy_init();\n\ncurl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, \"POST\");\ncurl_easy_setopt(hnd, CURLOPT_URL, \"https://rest.ably.io/channels/%7Bchannel_id%7D/messages?format=SOME_STRING_VALUE\");\n\nstruct curl_slist *headers = NULL;\nheaders = curl_slist_append(headers, \"X-Ably-Version: SOME_STRING_VALUE\");\nheaders = curl_slist_append(headers, \"Authorization: Basic REPLACE_BASIC_AUTH\");\nheaders = curl_slist_append(headers, \"content-type: application/json\");\ncurl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);\n\ncurl_easy_setopt(hnd, CURLOPT_POSTFIELDS, \"{\\\"clientId\\\":\\\"string\\\",\\\"connectionId\\\":\\\"string\\\",\\\"data\\\":\\\"string\\\",\\\"encoding\\\":\\\"string\\\",\\\"extras\\\":{\\\"push\\\":{\\\"apns\\\":{\\\"notification\\\":{\\\"body\\\":\\\"string\\\",\\\"collapseKey\\\":\\\"string\\\",\\\"icon\\\":\\\"string\\\",\\\"sound\\\":\\\"string\\\",\\\"title\\\":\\\"string\\\"}},\\\"data\\\":\\\"string\\\",\\\"fcm\\\":{\\\"notification\\\":{\\\"body\\\":\\\"string\\\",\\\"collapseKey\\\":\\\"string\\\",\\\"icon\\\":\\\"string\\\",\\\"sound\\\":\\\"string\\\",\\\"title\\\":\\\"string\\\"}},\\\"notification\\\":{\\\"body\\\":\\\"string\\\",\\\"collapseKey\\\":\\\"string\\\",\\\"icon\\\":\\\"string\\\",\\\"sound\\\":\\\"string\\\",\\\"title\\\":\\\"string\\\"},\\\"web\\\":{\\\"notification\\\":{\\\"body\\\":\\\"string\\\",\\\"collapseKey\\\":\\\"string\\\",\\\"icon\\\":\\\"string\\\",\\\"sound\\\":\\\"string\\\",\\\"title\\\":\\\"string\\\"}}}},\\\"name\\\":\\\"string\\\"}\");\n\nCURLcode ret = curl_easy_perform(hnd);"
                    },
                    {
                        "id": "javascript_xhr",
                        "mimeType": "application/json",
                        "title": "Javascript + Xhr",
                        "content": "const data = JSON.stringify({\n  \"clientId\": \"string\",\n  \"connectionId\": \"string\",\n  \"data\": \"string\",\n  \"encoding\": \"string\",\n  \"extras\": {\n    \"push\": {\n      \"apns\": {\n        \"notification\": {\n          \"body\": \"string\",\n          \"collapseKey\": \"string\",\n          \"icon\": \"string\",\n          \"sound\": \"string\",\n          \"title\": \"string\"\n        }\n      },\n      \"data\": \"string\",\n      \"fcm\": {\n        \"notification\": {\n          \"body\": \"string\",\n          \"collapseKey\": \"string\",\n          \"icon\": \"string\",\n          \"sound\": \"string\",\n          \"title\": \"string\"\n        }\n      },\n      \"notification\": {\n        \"body\": \"string\",\n        \"collapseKey\": \"string\",\n        \"icon\": \"string\",\n        \"sound\": \"string\",\n        \"title\": \"string\"\n      },\n      \"web\": {\n        \"notification\": {\n          \"body\": \"string\",\n          \"collapseKey\": \"string\",\n          \"icon\": \"string\",\n          \"sound\": \"string\",\n          \"title\": \"string\"\n        }\n      }\n    }\n  },\n  \"name\": \"string\"\n});\n\nconst xhr = new XMLHttpRequest();\nxhr.withCredentials = true;\n\nxhr.addEventListener(\"readystatechange\", function () {\n  if (this.readyState === this.DONE) {\n    console.log(this.responseText);\n  }\n});\n\nxhr.open(\"POST\", \"https://rest.ably.io/channels/%7Bchannel_id%7D/messages?format=SOME_STRING_VALUE\");\nxhr.setRequestHeader(\"X-Ably-Version\", \"SOME_STRING_VALUE\");\nxhr.setRequestHeader(\"Authorization\", \"Basic REPLACE_BASIC_AUTH\");\nxhr.setRequestHeader(\"content-type\", \"application/json\");\n\nxhr.send(data);"
                    },
                    {
                        "id": "shell_curl",
                        "mimeType": "application/x-www-form-urlencoded",
                        "title": "Shell + Curl",
                        "content": "curl --request POST \\\n  --url 'https://rest.ably.io/channels/%7Bchannel_id%7D/messages?format=SOME_STRING_VALUE' \\\n  --header 'Authorization: Basic REPLACE_BASIC_AUTH' \\\n  --header 'X-Ably-Version: SOME_STRING_VALUE' \\\n  --header 'content-type: application/x-www-form-urlencoded' \\\n  --data clientId=string \\\n  --data connectionId=string \\\n  --data data=string \\\n  --data encoding=string \\\n  --data 'extras=%5Bobject+Object%5D' \\\n  --data name=string"
                    },
                    {
                        "id": "java_okhttp",
                        "mimeType": "application/x-www-form-urlencoded",
                        "title": "Java + Okhttp",
                        "content": "OkHttpClient client = new OkHttpClient();\n\nMediaType mediaType = MediaType.parse(\"application/x-www-form-urlencoded\");\nRequestBody body = RequestBody.create(mediaType, \"clientId=string&connectionId=string&data=string&encoding=string&extras=%255Bobject%2BObject%255D&name=string\");\nRequest request = new Request.Builder()\n  .url(\"https://rest.ably.io/channels/%7Bchannel_id%7D/messages?format=SOME_STRING_VALUE\")\n  .post(body)\n  .addHeader(\"X-Ably-Version\", \"SOME_STRING_VALUE\")\n  .addHeader(\"Authorization\", \"Basic REPLACE_BASIC_AUTH\")\n  .addHeader(\"content-type\", \"application/x-www-form-urlencoded\")\n  .build();\n\nResponse response = client.newCall(request).execute();"
                    },
                    {
                        "id": "node_request",
                        "mimeType": "application/x-www-form-urlencoded",
                        "title": "Node + Request",
                        "content": "const request = require('request');\n\nconst options = {\n  method: 'POST',\n  url: 'https://rest.ably.io/channels/%7Bchannel_id%7D/messages',\n  qs: {format: 'SOME_STRING_VALUE'},\n  headers: {\n    'X-Ably-Version': 'SOME_STRING_VALUE',\n    Authorization: 'Basic REPLACE_BASIC_AUTH',\n    'content-type': 'application/x-www-form-urlencoded'\n  },\n  form: {\n    clientId: 'string',\n    connectionId: 'string',\n    data: 'string',\n    encoding: 'string',\n    extras: '%5Bobject+Object%5D',\n    name: 'string'\n  }\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
                    },
                    {
                        "id": "python_python3",
                        "mimeType": "application/x-www-form-urlencoded",
                        "title": "Python + Python3",
                        "content": "import http.client\n\nconn = http.client.HTTPSConnection(\"rest.ably.io\")\n\npayload = \"clientId=string&connectionId=string&data=string&encoding=string&extras=%255Bobject%2BObject%255D&name=string\"\n\nheaders = {\n    'X-Ably-Version': \"SOME_STRING_VALUE\",\n    'Authorization': \"Basic REPLACE_BASIC_AUTH\",\n    'content-type': \"application/x-www-form-urlencoded\"\n    }\n\nconn.request(\"POST\", \"/channels/%7Bchannel_id%7D/messages?format=SOME_STRING_VALUE\", payload, headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
                    },
                    {
                        "id": "go_native",
                        "mimeType": "application/x-www-form-urlencoded",
                        "title": "Go + Native",
                        "content": "package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://rest.ably.io/channels/%7Bchannel_id%7D/messages?format=SOME_STRING_VALUE\"\n\n\tpayload := strings.NewReader(\"clientId=string&connectionId=string&data=string&encoding=string&extras=%255Bobject%2BObject%255D&name=string\")\n\n\treq, _ := http.NewRequest(\"POST\", url, payload)\n\n\treq.Header.Add(\"X-Ably-Version\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"Authorization\", \"Basic REPLACE_BASIC_AUTH\")\n\treq.Header.Add(\"content-type\", \"application/x-www-form-urlencoded\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
                    },
                    {
                        "id": "ruby_native",
                        "mimeType": "application/x-www-form-urlencoded",
                        "title": "Ruby + Native",
                        "content": "require 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://rest.ably.io/channels/%7Bchannel_id%7D/messages?format=SOME_STRING_VALUE\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Post.new(url)\nrequest[\"X-Ably-Version\"] = 'SOME_STRING_VALUE'\nrequest[\"Authorization\"] = 'Basic REPLACE_BASIC_AUTH'\nrequest[\"content-type\"] = 'application/x-www-form-urlencoded'\nrequest.body = \"clientId=string&connectionId=string&data=string&encoding=string&extras=%255Bobject%2BObject%255D&name=string\"\n\nresponse = http.request(request)\nputs response.read_body"
                    },
                    {
                        "id": "php_curl",
                        "mimeType": "application/x-www-form-urlencoded",
                        "title": "Php + Curl",
                        "content": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n  CURLOPT_URL => \"https://rest.ably.io/channels/%7Bchannel_id%7D/messages?format=SOME_STRING_VALUE\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"POST\",\n  CURLOPT_POSTFIELDS => \"clientId=string&connectionId=string&data=string&encoding=string&extras=%255Bobject%2BObject%255D&name=string\",\n  CURLOPT_HTTPHEADER => [\n    \"Authorization: Basic REPLACE_BASIC_AUTH\",\n    \"X-Ably-Version: SOME_STRING_VALUE\",\n    \"content-type: application/x-www-form-urlencoded\"\n  ],\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
                    },
                    {
                        "id": "swift_nsurlsession",
                        "mimeType": "application/x-www-form-urlencoded",
                        "title": "Swift + Nsurlsession",
                        "content": "import Foundation\n\nlet headers = [\n  \"X-Ably-Version\": \"SOME_STRING_VALUE\",\n  \"Authorization\": \"Basic REPLACE_BASIC_AUTH\",\n  \"content-type\": \"application/x-www-form-urlencoded\"\n]\n\nlet postData = NSMutableData(data: \"clientId=string\".data(using: String.Encoding.utf8)!)\npostData.append(\"&connectionId=string\".data(using: String.Encoding.utf8)!)\npostData.append(\"&data=string\".data(using: String.Encoding.utf8)!)\npostData.append(\"&encoding=string\".data(using: String.Encoding.utf8)!)\npostData.append(\"&extras=%5Bobject+Object%5D\".data(using: String.Encoding.utf8)!)\npostData.append(\"&name=string\".data(using: String.Encoding.utf8)!)\n\nlet request = NSMutableURLRequest(url: NSURL(string: \"https://rest.ably.io/channels/%7Bchannel_id%7D/messages?format=SOME_STRING_VALUE\")! as URL,\n                                        cachePolicy: .useProtocolCachePolicy,\n                                    timeoutInterval: 10.0)\nrequest.httpMethod = \"POST\"\nrequest.allHTTPHeaderFields = headers\nrequest.httpBody = postData as Data\n\nlet session = URLSession.shared\nlet dataTask = session.dataTask(with: request as URLRequest, completionHandler: { (data, response, error) -> Void in\n  if (error != nil) {\n    print(error)\n  } else {\n    let httpResponse = response as? HTTPURLResponse\n    print(httpResponse)\n  }\n})\n\ndataTask.resume()"
                    },
                    {
                        "id": "c_libcurl",
                        "mimeType": "application/x-www-form-urlencoded",
                        "title": "C + Libcurl",
                        "content": "CURL *hnd = curl_easy_init();\n\ncurl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, \"POST\");\ncurl_easy_setopt(hnd, CURLOPT_URL, \"https://rest.ably.io/channels/%7Bchannel_id%7D/messages?format=SOME_STRING_VALUE\");\n\nstruct curl_slist *headers = NULL;\nheaders = curl_slist_append(headers, \"X-Ably-Version: SOME_STRING_VALUE\");\nheaders = curl_slist_append(headers, \"Authorization: Basic REPLACE_BASIC_AUTH\");\nheaders = curl_slist_append(headers, \"content-type: application/x-www-form-urlencoded\");\ncurl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);\n\ncurl_easy_setopt(hnd, CURLOPT_POSTFIELDS, \"clientId=string&connectionId=string&data=string&encoding=string&extras=%255Bobject%2BObject%255D&name=string\");\n\nCURLcode ret = curl_easy_perform(hnd);"
                    },
                    {
                        "id": "javascript_xhr",
                        "mimeType": "application/x-www-form-urlencoded",
                        "title": "Javascript + Xhr",
                        "content": "const data = \"clientId=string&connectionId=string&data=string&encoding=string&extras=%255Bobject%2BObject%255D&name=string\";\n\nconst xhr = new XMLHttpRequest();\nxhr.withCredentials = true;\n\nxhr.addEventListener(\"readystatechange\", function () {\n  if (this.readyState === this.DONE) {\n    console.log(this.responseText);\n  }\n});\n\nxhr.open(\"POST\", \"https://rest.ably.io/channels/%7Bchannel_id%7D/messages?format=SOME_STRING_VALUE\");\nxhr.setRequestHeader(\"X-Ably-Version\", \"SOME_STRING_VALUE\");\nxhr.setRequestHeader(\"Authorization\", \"Basic REPLACE_BASIC_AUTH\");\nxhr.setRequestHeader(\"content-type\", \"application/x-www-form-urlencoded\");\n\nxhr.send(data);"
                    }
                ]
            }
        },
        "/channels/{channel_id}/presence": {
            "get": {
                "description": "Get presence on a channel",
                "operationId": "getPresenceOfChannel",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/channelId"
                    },
                    {
                        "in": "query",
                        "name": "clientId",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "in": "query",
                        "name": "connectionId",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "in": "query",
                        "name": "limit",
                        "schema": {
                            "default": 100,
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/PresenceMessage"
                                    },
                                    "type": "array"
                                }
                            },
                            "application/x-msgpack": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/PresenceMessage"
                                    },
                                    "type": "array"
                                }
                            },
                            "text/html": {
                                "schema": {
                                    "type": "string"
                                }
                            }
                        },
                        "description": "OK",
                        "headers": {
                            "link": {
                                "$ref": "#/components/headers/Link"
                            },
                            "x-ably-serverid": {
                                "$ref": "#/components/headers/ServerId"
                            }
                        }
                    },
                    "default": {
                        "$ref": "#/components/responses/Error"
                    }
                },
                "summary": "Get presence of a channel",
                "tags": [
                    "Status"
                ],
                "api_calls": [
                    {
                        "id": "shell_curl",
                        "title": "Shell + Curl",
                        "content": "curl --request GET \\\n  --url 'https://rest.ably.io/channels/%7Bchannel_id%7D/presence?format=SOME_STRING_VALUE&clientId=SOME_STRING_VALUE&connectionId=SOME_STRING_VALUE&limit=SOME_INTEGER_VALUE' \\\n  --header 'Authorization: Basic REPLACE_BASIC_AUTH' \\\n  --header 'X-Ably-Version: SOME_STRING_VALUE'"
                    },
                    {
                        "id": "java_okhttp",
                        "title": "Java + Okhttp",
                        "content": "OkHttpClient client = new OkHttpClient();\n\nRequest request = new Request.Builder()\n  .url(\"https://rest.ably.io/channels/%7Bchannel_id%7D/presence?format=SOME_STRING_VALUE&clientId=SOME_STRING_VALUE&connectionId=SOME_STRING_VALUE&limit=SOME_INTEGER_VALUE\")\n  .get()\n  .addHeader(\"X-Ably-Version\", \"SOME_STRING_VALUE\")\n  .addHeader(\"Authorization\", \"Basic REPLACE_BASIC_AUTH\")\n  .build();\n\nResponse response = client.newCall(request).execute();"
                    },
                    {
                        "id": "node_request",
                        "title": "Node + Request",
                        "content": "const request = require('request');\n\nconst options = {\n  method: 'GET',\n  url: 'https://rest.ably.io/channels/%7Bchannel_id%7D/presence',\n  qs: {\n    format: 'SOME_STRING_VALUE',\n    clientId: 'SOME_STRING_VALUE',\n    connectionId: 'SOME_STRING_VALUE',\n    limit: 'SOME_INTEGER_VALUE'\n  },\n  headers: {\n    'X-Ably-Version': 'SOME_STRING_VALUE',\n    Authorization: 'Basic REPLACE_BASIC_AUTH'\n  }\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
                    },
                    {
                        "id": "python_python3",
                        "title": "Python + Python3",
                        "content": "import http.client\n\nconn = http.client.HTTPSConnection(\"rest.ably.io\")\n\nheaders = {\n    'X-Ably-Version': \"SOME_STRING_VALUE\",\n    'Authorization': \"Basic REPLACE_BASIC_AUTH\"\n    }\n\nconn.request(\"GET\", \"/channels/%7Bchannel_id%7D/presence?format=SOME_STRING_VALUE&clientId=SOME_STRING_VALUE&connectionId=SOME_STRING_VALUE&limit=SOME_INTEGER_VALUE\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
                    },
                    {
                        "id": "go_native",
                        "title": "Go + Native",
                        "content": "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://rest.ably.io/channels/%7Bchannel_id%7D/presence?format=SOME_STRING_VALUE&clientId=SOME_STRING_VALUE&connectionId=SOME_STRING_VALUE&limit=SOME_INTEGER_VALUE\"\n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"X-Ably-Version\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"Authorization\", \"Basic REPLACE_BASIC_AUTH\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
                    },
                    {
                        "id": "ruby_native",
                        "title": "Ruby + Native",
                        "content": "require 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://rest.ably.io/channels/%7Bchannel_id%7D/presence?format=SOME_STRING_VALUE&clientId=SOME_STRING_VALUE&connectionId=SOME_STRING_VALUE&limit=SOME_INTEGER_VALUE\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Get.new(url)\nrequest[\"X-Ably-Version\"] = 'SOME_STRING_VALUE'\nrequest[\"Authorization\"] = 'Basic REPLACE_BASIC_AUTH'\n\nresponse = http.request(request)\nputs response.read_body"
                    },
                    {
                        "id": "php_curl",
                        "title": "Php + Curl",
                        "content": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n  CURLOPT_URL => \"https://rest.ably.io/channels/%7Bchannel_id%7D/presence?format=SOME_STRING_VALUE&clientId=SOME_STRING_VALUE&connectionId=SOME_STRING_VALUE&limit=SOME_INTEGER_VALUE\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"GET\",\n  CURLOPT_HTTPHEADER => [\n    \"Authorization: Basic REPLACE_BASIC_AUTH\",\n    \"X-Ably-Version: SOME_STRING_VALUE\"\n  ],\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
                    },
                    {
                        "id": "swift_nsurlsession",
                        "title": "Swift + Nsurlsession",
                        "content": "import Foundation\n\nlet headers = [\n  \"X-Ably-Version\": \"SOME_STRING_VALUE\",\n  \"Authorization\": \"Basic REPLACE_BASIC_AUTH\"\n]\n\nlet request = NSMutableURLRequest(url: NSURL(string: \"https://rest.ably.io/channels/%7Bchannel_id%7D/presence?format=SOME_STRING_VALUE&clientId=SOME_STRING_VALUE&connectionId=SOME_STRING_VALUE&limit=SOME_INTEGER_VALUE\")! as URL,\n                                        cachePolicy: .useProtocolCachePolicy,\n                                    timeoutInterval: 10.0)\nrequest.httpMethod = \"GET\"\nrequest.allHTTPHeaderFields = headers\n\nlet session = URLSession.shared\nlet dataTask = session.dataTask(with: request as URLRequest, completionHandler: { (data, response, error) -> Void in\n  if (error != nil) {\n    print(error)\n  } else {\n    let httpResponse = response as? HTTPURLResponse\n    print(httpResponse)\n  }\n})\n\ndataTask.resume()"
                    },
                    {
                        "id": "c_libcurl",
                        "title": "C + Libcurl",
                        "content": "CURL *hnd = curl_easy_init();\n\ncurl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, \"GET\");\ncurl_easy_setopt(hnd, CURLOPT_URL, \"https://rest.ably.io/channels/%7Bchannel_id%7D/presence?format=SOME_STRING_VALUE&clientId=SOME_STRING_VALUE&connectionId=SOME_STRING_VALUE&limit=SOME_INTEGER_VALUE\");\n\nstruct curl_slist *headers = NULL;\nheaders = curl_slist_append(headers, \"X-Ably-Version: SOME_STRING_VALUE\");\nheaders = curl_slist_append(headers, \"Authorization: Basic REPLACE_BASIC_AUTH\");\ncurl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);\n\nCURLcode ret = curl_easy_perform(hnd);"
                    },
                    {
                        "id": "javascript_xhr",
                        "title": "Javascript + Xhr",
                        "content": "const data = null;\n\nconst xhr = new XMLHttpRequest();\nxhr.withCredentials = true;\n\nxhr.addEventListener(\"readystatechange\", function () {\n  if (this.readyState === this.DONE) {\n    console.log(this.responseText);\n  }\n});\n\nxhr.open(\"GET\", \"https://rest.ably.io/channels/%7Bchannel_id%7D/presence?format=SOME_STRING_VALUE&clientId=SOME_STRING_VALUE&connectionId=SOME_STRING_VALUE&limit=SOME_INTEGER_VALUE\");\nxhr.setRequestHeader(\"X-Ably-Version\", \"SOME_STRING_VALUE\");\nxhr.setRequestHeader(\"Authorization\", \"Basic REPLACE_BASIC_AUTH\");\n\nxhr.send(data);"
                    }
                ]
            },
            "parameters": [
                {
                    "$ref": "#/components/parameters/versionHeader"
                },
                {
                    "$ref": "#/components/parameters/responseFormat"
                }
            ]
        },
        "/channels/{channel_id}/presence/history": {
            "get": {
                "description": "Get presence on a channel",
                "operationId": "getPresenceHistoryOfChannel",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/channelId"
                    },
                    {
                        "$ref": "#/components/parameters/filterStart"
                    },
                    {
                        "$ref": "#/components/parameters/filterLimit"
                    },
                    {
                        "$ref": "#/components/parameters/filterEnd"
                    },
                    {
                        "$ref": "#/components/parameters/filterDirection"
                    }
                ],
                "responses": {
                    "2XX": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/PresenceMessage"
                                    },
                                    "type": "array"
                                }
                            },
                            "application/x-msgpack": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/PresenceMessage"
                                    },
                                    "type": "array"
                                }
                            },
                            "text/html": {
                                "schema": {
                                    "type": "string"
                                }
                            }
                        },
                        "description": "OK",
                        "headers": {
                            "link": {
                                "$ref": "#/components/headers/Link"
                            }
                        }
                    },
                    "default": {
                        "$ref": "#/components/responses/Error"
                    }
                },
                "summary": "Get presence history of a channel",
                "tags": [
                    "History"
                ],
                "api_calls": [
                    {
                        "id": "shell_curl",
                        "title": "Shell + Curl",
                        "content": "curl --request GET \\\n  --url 'https://rest.ably.io/channels/%7Bchannel_id%7D/presence/history?format=SOME_STRING_VALUE&start=SOME_STRING_VALUE&limit=SOME_INTEGER_VALUE&end=SOME_STRING_VALUE&direction=SOME_STRING_VALUE' \\\n  --header 'Authorization: Basic REPLACE_BASIC_AUTH' \\\n  --header 'X-Ably-Version: SOME_STRING_VALUE'"
                    },
                    {
                        "id": "java_okhttp",
                        "title": "Java + Okhttp",
                        "content": "OkHttpClient client = new OkHttpClient();\n\nRequest request = new Request.Builder()\n  .url(\"https://rest.ably.io/channels/%7Bchannel_id%7D/presence/history?format=SOME_STRING_VALUE&start=SOME_STRING_VALUE&limit=SOME_INTEGER_VALUE&end=SOME_STRING_VALUE&direction=SOME_STRING_VALUE\")\n  .get()\n  .addHeader(\"X-Ably-Version\", \"SOME_STRING_VALUE\")\n  .addHeader(\"Authorization\", \"Basic REPLACE_BASIC_AUTH\")\n  .build();\n\nResponse response = client.newCall(request).execute();"
                    },
                    {
                        "id": "node_request",
                        "title": "Node + Request",
                        "content": "const request = require('request');\n\nconst options = {\n  method: 'GET',\n  url: 'https://rest.ably.io/channels/%7Bchannel_id%7D/presence/history',\n  qs: {\n    format: 'SOME_STRING_VALUE',\n    start: 'SOME_STRING_VALUE',\n    limit: 'SOME_INTEGER_VALUE',\n    end: 'SOME_STRING_VALUE',\n    direction: 'SOME_STRING_VALUE'\n  },\n  headers: {\n    'X-Ably-Version': 'SOME_STRING_VALUE',\n    Authorization: 'Basic REPLACE_BASIC_AUTH'\n  }\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
                    },
                    {
                        "id": "python_python3",
                        "title": "Python + Python3",
                        "content": "import http.client\n\nconn = http.client.HTTPSConnection(\"rest.ably.io\")\n\nheaders = {\n    'X-Ably-Version': \"SOME_STRING_VALUE\",\n    'Authorization': \"Basic REPLACE_BASIC_AUTH\"\n    }\n\nconn.request(\"GET\", \"/channels/%7Bchannel_id%7D/presence/history?format=SOME_STRING_VALUE&start=SOME_STRING_VALUE&limit=SOME_INTEGER_VALUE&end=SOME_STRING_VALUE&direction=SOME_STRING_VALUE\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
                    },
                    {
                        "id": "go_native",
                        "title": "Go + Native",
                        "content": "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://rest.ably.io/channels/%7Bchannel_id%7D/presence/history?format=SOME_STRING_VALUE&start=SOME_STRING_VALUE&limit=SOME_INTEGER_VALUE&end=SOME_STRING_VALUE&direction=SOME_STRING_VALUE\"\n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"X-Ably-Version\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"Authorization\", \"Basic REPLACE_BASIC_AUTH\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
                    },
                    {
                        "id": "ruby_native",
                        "title": "Ruby + Native",
                        "content": "require 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://rest.ably.io/channels/%7Bchannel_id%7D/presence/history?format=SOME_STRING_VALUE&start=SOME_STRING_VALUE&limit=SOME_INTEGER_VALUE&end=SOME_STRING_VALUE&direction=SOME_STRING_VALUE\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Get.new(url)\nrequest[\"X-Ably-Version\"] = 'SOME_STRING_VALUE'\nrequest[\"Authorization\"] = 'Basic REPLACE_BASIC_AUTH'\n\nresponse = http.request(request)\nputs response.read_body"
                    },
                    {
                        "id": "php_curl",
                        "title": "Php + Curl",
                        "content": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n  CURLOPT_URL => \"https://rest.ably.io/channels/%7Bchannel_id%7D/presence/history?format=SOME_STRING_VALUE&start=SOME_STRING_VALUE&limit=SOME_INTEGER_VALUE&end=SOME_STRING_VALUE&direction=SOME_STRING_VALUE\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"GET\",\n  CURLOPT_HTTPHEADER => [\n    \"Authorization: Basic REPLACE_BASIC_AUTH\",\n    \"X-Ably-Version: SOME_STRING_VALUE\"\n  ],\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
                    },
                    {
                        "id": "swift_nsurlsession",
                        "title": "Swift + Nsurlsession",
                        "content": "import Foundation\n\nlet headers = [\n  \"X-Ably-Version\": \"SOME_STRING_VALUE\",\n  \"Authorization\": \"Basic REPLACE_BASIC_AUTH\"\n]\n\nlet request = NSMutableURLRequest(url: NSURL(string: \"https://rest.ably.io/channels/%7Bchannel_id%7D/presence/history?format=SOME_STRING_VALUE&start=SOME_STRING_VALUE&limit=SOME_INTEGER_VALUE&end=SOME_STRING_VALUE&direction=SOME_STRING_VALUE\")! as URL,\n                                        cachePolicy: .useProtocolCachePolicy,\n                                    timeoutInterval: 10.0)\nrequest.httpMethod = \"GET\"\nrequest.allHTTPHeaderFields = headers\n\nlet session = URLSession.shared\nlet dataTask = session.dataTask(with: request as URLRequest, completionHandler: { (data, response, error) -> Void in\n  if (error != nil) {\n    print(error)\n  } else {\n    let httpResponse = response as? HTTPURLResponse\n    print(httpResponse)\n  }\n})\n\ndataTask.resume()"
                    },
                    {
                        "id": "c_libcurl",
                        "title": "C + Libcurl",
                        "content": "CURL *hnd = curl_easy_init();\n\ncurl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, \"GET\");\ncurl_easy_setopt(hnd, CURLOPT_URL, \"https://rest.ably.io/channels/%7Bchannel_id%7D/presence/history?format=SOME_STRING_VALUE&start=SOME_STRING_VALUE&limit=SOME_INTEGER_VALUE&end=SOME_STRING_VALUE&direction=SOME_STRING_VALUE\");\n\nstruct curl_slist *headers = NULL;\nheaders = curl_slist_append(headers, \"X-Ably-Version: SOME_STRING_VALUE\");\nheaders = curl_slist_append(headers, \"Authorization: Basic REPLACE_BASIC_AUTH\");\ncurl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);\n\nCURLcode ret = curl_easy_perform(hnd);"
                    },
                    {
                        "id": "javascript_xhr",
                        "title": "Javascript + Xhr",
                        "content": "const data = null;\n\nconst xhr = new XMLHttpRequest();\nxhr.withCredentials = true;\n\nxhr.addEventListener(\"readystatechange\", function () {\n  if (this.readyState === this.DONE) {\n    console.log(this.responseText);\n  }\n});\n\nxhr.open(\"GET\", \"https://rest.ably.io/channels/%7Bchannel_id%7D/presence/history?format=SOME_STRING_VALUE&start=SOME_STRING_VALUE&limit=SOME_INTEGER_VALUE&end=SOME_STRING_VALUE&direction=SOME_STRING_VALUE\");\nxhr.setRequestHeader(\"X-Ably-Version\", \"SOME_STRING_VALUE\");\nxhr.setRequestHeader(\"Authorization\", \"Basic REPLACE_BASIC_AUTH\");\n\nxhr.send(data);"
                    }
                ]
            },
            "parameters": [
                {
                    "$ref": "#/components/parameters/versionHeader"
                },
                {
                    "$ref": "#/components/parameters/responseFormat"
                }
            ]
        },
        "/keys/{keyName}/requestToken": {
            "parameters": [
                {
                    "$ref": "#/components/parameters/versionHeader"
                },
                {
                    "$ref": "#/components/parameters/responseFormat"
                }
            ],
            "post": {
                "description": "This is the means by which clients obtain access tokens to use the service. You can see how to construct an Ably TokenRequest in the [Ably TokenRequest spec](https://www.ably.io/documentation/rest-api/token-request-spec) documentation, although we recommend you use an Ably SDK rather to create a TokenRequest, as the construction of a TokenRequest is complex. The resulting token response object contains the token properties as defined in Ably TokenRequest spec. Authentication is not required if using a Signed TokenRequest.",
                "operationId": "requestAccessToken",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/key_name"
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "example": {
                                "capability": {
                                    "channel1": [
                                        "publish",
                                        "subscribe"
                                    ],
                                    "wildcard:channels:*": [
                                        "publish"
                                    ]
                                },
                                "keyName": "YourKey.Name",
                                "timestamp": "1559124196551"
                            },
                            "schema": {
                                "oneOf": [
                                    {
                                        "$ref": "#/components/schemas/TokenRequest"
                                    },
                                    {
                                        "$ref": "#/components/schemas/SignedTokenRequest"
                                    }
                                ]
                            }
                        }
                    }
                },
                "responses": {
                    "2XX": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/TokenDetails"
                                }
                            },
                            "application/x-msgpack": {
                                "schema": {
                                    "$ref": "#/components/schemas/TokenDetails"
                                }
                            }
                        },
                        "description": "OK"
                    },
                    "default": {
                        "$ref": "#/components/responses/Error"
                    }
                },
                "summary": "Request an access token",
                "tags": [
                    "Authentication"
                ],
                "api_calls": [
                    {
                        "id": "shell_curl",
                        "mimeType": "application/json",
                        "title": "Shell + Curl",
                        "content": "curl --request POST \\\n  --url 'https://rest.ably.io/keys/%7BkeyName%7D/requestToken?format=SOME_STRING_VALUE' \\\n  --header 'Authorization: Basic REPLACE_BASIC_AUTH' \\\n  --header 'X-Ably-Version: SOME_STRING_VALUE' \\\n  --header 'content-type: application/json' \\\n  --data '{\"capability\":{\"channel1\":[\"publish\",\"subscribe\"]},\"clientId\":\"string\",\"keyName\":\"xVLyHw.LMJZxw\",\"nonce\":\"string\",\"timestamp\":0}'"
                    },
                    {
                        "id": "java_okhttp",
                        "mimeType": "application/json",
                        "title": "Java + Okhttp",
                        "content": "OkHttpClient client = new OkHttpClient();\n\nMediaType mediaType = MediaType.parse(\"application/json\");\nRequestBody body = RequestBody.create(mediaType, \"{\\\"capability\\\":{\\\"channel1\\\":[\\\"publish\\\",\\\"subscribe\\\"]},\\\"clientId\\\":\\\"string\\\",\\\"keyName\\\":\\\"xVLyHw.LMJZxw\\\",\\\"nonce\\\":\\\"string\\\",\\\"timestamp\\\":0}\");\nRequest request = new Request.Builder()\n  .url(\"https://rest.ably.io/keys/%7BkeyName%7D/requestToken?format=SOME_STRING_VALUE\")\n  .post(body)\n  .addHeader(\"X-Ably-Version\", \"SOME_STRING_VALUE\")\n  .addHeader(\"Authorization\", \"Basic REPLACE_BASIC_AUTH\")\n  .addHeader(\"content-type\", \"application/json\")\n  .build();\n\nResponse response = client.newCall(request).execute();"
                    },
                    {
                        "id": "node_request",
                        "mimeType": "application/json",
                        "title": "Node + Request",
                        "content": "const request = require('request');\n\nconst options = {\n  method: 'POST',\n  url: 'https://rest.ably.io/keys/%7BkeyName%7D/requestToken',\n  qs: {format: 'SOME_STRING_VALUE'},\n  headers: {\n    'X-Ably-Version': 'SOME_STRING_VALUE',\n    Authorization: 'Basic REPLACE_BASIC_AUTH',\n    'content-type': 'application/json'\n  },\n  body: {\n    capability: {channel1: ['publish', 'subscribe']},\n    clientId: 'string',\n    keyName: 'xVLyHw.LMJZxw',\n    nonce: 'string',\n    timestamp: 0\n  },\n  json: true\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
                    },
                    {
                        "id": "python_python3",
                        "mimeType": "application/json",
                        "title": "Python + Python3",
                        "content": "import http.client\n\nconn = http.client.HTTPSConnection(\"rest.ably.io\")\n\npayload = \"{\\\"capability\\\":{\\\"channel1\\\":[\\\"publish\\\",\\\"subscribe\\\"]},\\\"clientId\\\":\\\"string\\\",\\\"keyName\\\":\\\"xVLyHw.LMJZxw\\\",\\\"nonce\\\":\\\"string\\\",\\\"timestamp\\\":0}\"\n\nheaders = {\n    'X-Ably-Version': \"SOME_STRING_VALUE\",\n    'Authorization': \"Basic REPLACE_BASIC_AUTH\",\n    'content-type': \"application/json\"\n    }\n\nconn.request(\"POST\", \"/keys/%7BkeyName%7D/requestToken?format=SOME_STRING_VALUE\", payload, headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
                    },
                    {
                        "id": "go_native",
                        "mimeType": "application/json",
                        "title": "Go + Native",
                        "content": "package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://rest.ably.io/keys/%7BkeyName%7D/requestToken?format=SOME_STRING_VALUE\"\n\n\tpayload := strings.NewReader(\"{\\\"capability\\\":{\\\"channel1\\\":[\\\"publish\\\",\\\"subscribe\\\"]},\\\"clientId\\\":\\\"string\\\",\\\"keyName\\\":\\\"xVLyHw.LMJZxw\\\",\\\"nonce\\\":\\\"string\\\",\\\"timestamp\\\":0}\")\n\n\treq, _ := http.NewRequest(\"POST\", url, payload)\n\n\treq.Header.Add(\"X-Ably-Version\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"Authorization\", \"Basic REPLACE_BASIC_AUTH\")\n\treq.Header.Add(\"content-type\", \"application/json\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
                    },
                    {
                        "id": "ruby_native",
                        "mimeType": "application/json",
                        "title": "Ruby + Native",
                        "content": "require 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://rest.ably.io/keys/%7BkeyName%7D/requestToken?format=SOME_STRING_VALUE\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Post.new(url)\nrequest[\"X-Ably-Version\"] = 'SOME_STRING_VALUE'\nrequest[\"Authorization\"] = 'Basic REPLACE_BASIC_AUTH'\nrequest[\"content-type\"] = 'application/json'\nrequest.body = \"{\\\"capability\\\":{\\\"channel1\\\":[\\\"publish\\\",\\\"subscribe\\\"]},\\\"clientId\\\":\\\"string\\\",\\\"keyName\\\":\\\"xVLyHw.LMJZxw\\\",\\\"nonce\\\":\\\"string\\\",\\\"timestamp\\\":0}\"\n\nresponse = http.request(request)\nputs response.read_body"
                    },
                    {
                        "id": "php_curl",
                        "mimeType": "application/json",
                        "title": "Php + Curl",
                        "content": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n  CURLOPT_URL => \"https://rest.ably.io/keys/%7BkeyName%7D/requestToken?format=SOME_STRING_VALUE\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"POST\",\n  CURLOPT_POSTFIELDS => \"{\\\"capability\\\":{\\\"channel1\\\":[\\\"publish\\\",\\\"subscribe\\\"]},\\\"clientId\\\":\\\"string\\\",\\\"keyName\\\":\\\"xVLyHw.LMJZxw\\\",\\\"nonce\\\":\\\"string\\\",\\\"timestamp\\\":0}\",\n  CURLOPT_HTTPHEADER => [\n    \"Authorization: Basic REPLACE_BASIC_AUTH\",\n    \"X-Ably-Version: SOME_STRING_VALUE\",\n    \"content-type: application/json\"\n  ],\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
                    },
                    {
                        "id": "swift_nsurlsession",
                        "mimeType": "application/json",
                        "title": "Swift + Nsurlsession",
                        "content": "import Foundation\n\nlet headers = [\n  \"X-Ably-Version\": \"SOME_STRING_VALUE\",\n  \"Authorization\": \"Basic REPLACE_BASIC_AUTH\",\n  \"content-type\": \"application/json\"\n]\nlet parameters = [\n  \"capability\": [\"channel1\": [\"publish\", \"subscribe\"]],\n  \"clientId\": \"string\",\n  \"keyName\": \"xVLyHw.LMJZxw\",\n  \"nonce\": \"string\",\n  \"timestamp\": 0\n] as [String : Any]\n\nlet postData = JSONSerialization.data(withJSONObject: parameters, options: [])\n\nlet request = NSMutableURLRequest(url: NSURL(string: \"https://rest.ably.io/keys/%7BkeyName%7D/requestToken?format=SOME_STRING_VALUE\")! as URL,\n                                        cachePolicy: .useProtocolCachePolicy,\n                                    timeoutInterval: 10.0)\nrequest.httpMethod = \"POST\"\nrequest.allHTTPHeaderFields = headers\nrequest.httpBody = postData as Data\n\nlet session = URLSession.shared\nlet dataTask = session.dataTask(with: request as URLRequest, completionHandler: { (data, response, error) -> Void in\n  if (error != nil) {\n    print(error)\n  } else {\n    let httpResponse = response as? HTTPURLResponse\n    print(httpResponse)\n  }\n})\n\ndataTask.resume()"
                    },
                    {
                        "id": "c_libcurl",
                        "mimeType": "application/json",
                        "title": "C + Libcurl",
                        "content": "CURL *hnd = curl_easy_init();\n\ncurl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, \"POST\");\ncurl_easy_setopt(hnd, CURLOPT_URL, \"https://rest.ably.io/keys/%7BkeyName%7D/requestToken?format=SOME_STRING_VALUE\");\n\nstruct curl_slist *headers = NULL;\nheaders = curl_slist_append(headers, \"X-Ably-Version: SOME_STRING_VALUE\");\nheaders = curl_slist_append(headers, \"Authorization: Basic REPLACE_BASIC_AUTH\");\nheaders = curl_slist_append(headers, \"content-type: application/json\");\ncurl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);\n\ncurl_easy_setopt(hnd, CURLOPT_POSTFIELDS, \"{\\\"capability\\\":{\\\"channel1\\\":[\\\"publish\\\",\\\"subscribe\\\"]},\\\"clientId\\\":\\\"string\\\",\\\"keyName\\\":\\\"xVLyHw.LMJZxw\\\",\\\"nonce\\\":\\\"string\\\",\\\"timestamp\\\":0}\");\n\nCURLcode ret = curl_easy_perform(hnd);"
                    },
                    {
                        "id": "javascript_xhr",
                        "mimeType": "application/json",
                        "title": "Javascript + Xhr",
                        "content": "const data = JSON.stringify({\n  \"capability\": {\n    \"channel1\": [\n      \"publish\",\n      \"subscribe\"\n    ]\n  },\n  \"clientId\": \"string\",\n  \"keyName\": \"xVLyHw.LMJZxw\",\n  \"nonce\": \"string\",\n  \"timestamp\": 0\n});\n\nconst xhr = new XMLHttpRequest();\nxhr.withCredentials = true;\n\nxhr.addEventListener(\"readystatechange\", function () {\n  if (this.readyState === this.DONE) {\n    console.log(this.responseText);\n  }\n});\n\nxhr.open(\"POST\", \"https://rest.ably.io/keys/%7BkeyName%7D/requestToken?format=SOME_STRING_VALUE\");\nxhr.setRequestHeader(\"X-Ably-Version\", \"SOME_STRING_VALUE\");\nxhr.setRequestHeader(\"Authorization\", \"Basic REPLACE_BASIC_AUTH\");\nxhr.setRequestHeader(\"content-type\", \"application/json\");\n\nxhr.send(data);"
                    }
                ]
            }
        },
        "/push/channelSubscriptions": {
            "delete": {
                "description": "Delete a device details object.",
                "operationId": "deletePushDeviceDetails",
                "parameters": [
                    {
                        "description": "Filter to restrict to subscriptions associated with that channel.",
                        "in": "query",
                        "name": "channel",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "Must be set when clientId is empty, cannot be used with clientId.",
                        "in": "query",
                        "name": "deviceId",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "Must be set when deviceId is empty, cannot be used with deviceId.",
                        "in": "query",
                        "name": "clientId",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "2XX": {
                        "description": "OK"
                    },
                    "default": {
                        "$ref": "#/components/responses/Error"
                    }
                },
                "summary": "Delete a registered device's update token",
                "tags": [
                    "Push"
                ],
                "api_calls": [
                    {
                        "id": "shell_curl",
                        "title": "Shell + Curl",
                        "content": "curl --request DELETE \\\n  --url 'https://rest.ably.io/push/channelSubscriptions?format=SOME_STRING_VALUE&channel=SOME_STRING_VALUE&deviceId=SOME_STRING_VALUE&clientId=SOME_STRING_VALUE' \\\n  --header 'Authorization: Basic REPLACE_BASIC_AUTH' \\\n  --header 'X-Ably-Version: SOME_STRING_VALUE'"
                    },
                    {
                        "id": "java_okhttp",
                        "title": "Java + Okhttp",
                        "content": "OkHttpClient client = new OkHttpClient();\n\nRequest request = new Request.Builder()\n  .url(\"https://rest.ably.io/push/channelSubscriptions?format=SOME_STRING_VALUE&channel=SOME_STRING_VALUE&deviceId=SOME_STRING_VALUE&clientId=SOME_STRING_VALUE\")\n  .delete(null)\n  .addHeader(\"X-Ably-Version\", \"SOME_STRING_VALUE\")\n  .addHeader(\"Authorization\", \"Basic REPLACE_BASIC_AUTH\")\n  .build();\n\nResponse response = client.newCall(request).execute();"
                    },
                    {
                        "id": "node_request",
                        "title": "Node + Request",
                        "content": "const request = require('request');\n\nconst options = {\n  method: 'DELETE',\n  url: 'https://rest.ably.io/push/channelSubscriptions',\n  qs: {\n    format: 'SOME_STRING_VALUE',\n    channel: 'SOME_STRING_VALUE',\n    deviceId: 'SOME_STRING_VALUE',\n    clientId: 'SOME_STRING_VALUE'\n  },\n  headers: {\n    'X-Ably-Version': 'SOME_STRING_VALUE',\n    Authorization: 'Basic REPLACE_BASIC_AUTH'\n  }\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
                    },
                    {
                        "id": "python_python3",
                        "title": "Python + Python3",
                        "content": "import http.client\n\nconn = http.client.HTTPSConnection(\"rest.ably.io\")\n\nheaders = {\n    'X-Ably-Version': \"SOME_STRING_VALUE\",\n    'Authorization': \"Basic REPLACE_BASIC_AUTH\"\n    }\n\nconn.request(\"DELETE\", \"/push/channelSubscriptions?format=SOME_STRING_VALUE&channel=SOME_STRING_VALUE&deviceId=SOME_STRING_VALUE&clientId=SOME_STRING_VALUE\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
                    },
                    {
                        "id": "go_native",
                        "title": "Go + Native",
                        "content": "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://rest.ably.io/push/channelSubscriptions?format=SOME_STRING_VALUE&channel=SOME_STRING_VALUE&deviceId=SOME_STRING_VALUE&clientId=SOME_STRING_VALUE\"\n\n\treq, _ := http.NewRequest(\"DELETE\", url, nil)\n\n\treq.Header.Add(\"X-Ably-Version\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"Authorization\", \"Basic REPLACE_BASIC_AUTH\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
                    },
                    {
                        "id": "ruby_native",
                        "title": "Ruby + Native",
                        "content": "require 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://rest.ably.io/push/channelSubscriptions?format=SOME_STRING_VALUE&channel=SOME_STRING_VALUE&deviceId=SOME_STRING_VALUE&clientId=SOME_STRING_VALUE\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Delete.new(url)\nrequest[\"X-Ably-Version\"] = 'SOME_STRING_VALUE'\nrequest[\"Authorization\"] = 'Basic REPLACE_BASIC_AUTH'\n\nresponse = http.request(request)\nputs response.read_body"
                    },
                    {
                        "id": "php_curl",
                        "title": "Php + Curl",
                        "content": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n  CURLOPT_URL => \"https://rest.ably.io/push/channelSubscriptions?format=SOME_STRING_VALUE&channel=SOME_STRING_VALUE&deviceId=SOME_STRING_VALUE&clientId=SOME_STRING_VALUE\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"DELETE\",\n  CURLOPT_HTTPHEADER => [\n    \"Authorization: Basic REPLACE_BASIC_AUTH\",\n    \"X-Ably-Version: SOME_STRING_VALUE\"\n  ],\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
                    },
                    {
                        "id": "swift_nsurlsession",
                        "title": "Swift + Nsurlsession",
                        "content": "import Foundation\n\nlet headers = [\n  \"X-Ably-Version\": \"SOME_STRING_VALUE\",\n  \"Authorization\": \"Basic REPLACE_BASIC_AUTH\"\n]\n\nlet request = NSMutableURLRequest(url: NSURL(string: \"https://rest.ably.io/push/channelSubscriptions?format=SOME_STRING_VALUE&channel=SOME_STRING_VALUE&deviceId=SOME_STRING_VALUE&clientId=SOME_STRING_VALUE\")! as URL,\n                                        cachePolicy: .useProtocolCachePolicy,\n                                    timeoutInterval: 10.0)\nrequest.httpMethod = \"DELETE\"\nrequest.allHTTPHeaderFields = headers\n\nlet session = URLSession.shared\nlet dataTask = session.dataTask(with: request as URLRequest, completionHandler: { (data, response, error) -> Void in\n  if (error != nil) {\n    print(error)\n  } else {\n    let httpResponse = response as? HTTPURLResponse\n    print(httpResponse)\n  }\n})\n\ndataTask.resume()"
                    },
                    {
                        "id": "c_libcurl",
                        "title": "C + Libcurl",
                        "content": "CURL *hnd = curl_easy_init();\n\ncurl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, \"DELETE\");\ncurl_easy_setopt(hnd, CURLOPT_URL, \"https://rest.ably.io/push/channelSubscriptions?format=SOME_STRING_VALUE&channel=SOME_STRING_VALUE&deviceId=SOME_STRING_VALUE&clientId=SOME_STRING_VALUE\");\n\nstruct curl_slist *headers = NULL;\nheaders = curl_slist_append(headers, \"X-Ably-Version: SOME_STRING_VALUE\");\nheaders = curl_slist_append(headers, \"Authorization: Basic REPLACE_BASIC_AUTH\");\ncurl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);\n\nCURLcode ret = curl_easy_perform(hnd);"
                    },
                    {
                        "id": "javascript_xhr",
                        "title": "Javascript + Xhr",
                        "content": "const data = null;\n\nconst xhr = new XMLHttpRequest();\nxhr.withCredentials = true;\n\nxhr.addEventListener(\"readystatechange\", function () {\n  if (this.readyState === this.DONE) {\n    console.log(this.responseText);\n  }\n});\n\nxhr.open(\"DELETE\", \"https://rest.ably.io/push/channelSubscriptions?format=SOME_STRING_VALUE&channel=SOME_STRING_VALUE&deviceId=SOME_STRING_VALUE&clientId=SOME_STRING_VALUE\");\nxhr.setRequestHeader(\"X-Ably-Version\", \"SOME_STRING_VALUE\");\nxhr.setRequestHeader(\"Authorization\", \"Basic REPLACE_BASIC_AUTH\");\n\nxhr.send(data);"
                    }
                ]
            },
            "get": {
                "description": "Get a list of push notification subscriptions to channels.",
                "operationId": "getPushSubscriptionsOnChannels",
                "parameters": [
                    {
                        "description": "Filter to restrict to subscriptions associated with that channel.",
                        "in": "query",
                        "name": "channel",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "Optional filter to restrict to devices associated with that deviceId. Cannot be used with clientId.",
                        "in": "query",
                        "name": "deviceId",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "Optional filter to restrict to devices associated with that clientId. Cannot be used with deviceId.",
                        "in": "query",
                        "name": "clientId",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "The maximum number of records to return.",
                        "in": "query",
                        "name": "limit",
                        "schema": {
                            "default": 100,
                            "maximum": 1000,
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "2XX": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/DeviceDetails"
                                }
                            }
                        },
                        "description": "OK"
                    },
                    "default": {
                        "$ref": "#/components/responses/Error"
                    }
                },
                "summary": "List channel subscriptions",
                "tags": [
                    "Push"
                ],
                "api_calls": [
                    {
                        "id": "shell_curl",
                        "title": "Shell + Curl",
                        "content": "curl --request GET \\\n  --url 'https://rest.ably.io/push/channelSubscriptions?format=SOME_STRING_VALUE&channel=SOME_STRING_VALUE&deviceId=SOME_STRING_VALUE&clientId=SOME_STRING_VALUE&limit=SOME_INTEGER_VALUE' \\\n  --header 'Authorization: Basic REPLACE_BASIC_AUTH' \\\n  --header 'X-Ably-Version: SOME_STRING_VALUE'"
                    },
                    {
                        "id": "java_okhttp",
                        "title": "Java + Okhttp",
                        "content": "OkHttpClient client = new OkHttpClient();\n\nRequest request = new Request.Builder()\n  .url(\"https://rest.ably.io/push/channelSubscriptions?format=SOME_STRING_VALUE&channel=SOME_STRING_VALUE&deviceId=SOME_STRING_VALUE&clientId=SOME_STRING_VALUE&limit=SOME_INTEGER_VALUE\")\n  .get()\n  .addHeader(\"X-Ably-Version\", \"SOME_STRING_VALUE\")\n  .addHeader(\"Authorization\", \"Basic REPLACE_BASIC_AUTH\")\n  .build();\n\nResponse response = client.newCall(request).execute();"
                    },
                    {
                        "id": "node_request",
                        "title": "Node + Request",
                        "content": "const request = require('request');\n\nconst options = {\n  method: 'GET',\n  url: 'https://rest.ably.io/push/channelSubscriptions',\n  qs: {\n    format: 'SOME_STRING_VALUE',\n    channel: 'SOME_STRING_VALUE',\n    deviceId: 'SOME_STRING_VALUE',\n    clientId: 'SOME_STRING_VALUE',\n    limit: 'SOME_INTEGER_VALUE'\n  },\n  headers: {\n    'X-Ably-Version': 'SOME_STRING_VALUE',\n    Authorization: 'Basic REPLACE_BASIC_AUTH'\n  }\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
                    },
                    {
                        "id": "python_python3",
                        "title": "Python + Python3",
                        "content": "import http.client\n\nconn = http.client.HTTPSConnection(\"rest.ably.io\")\n\nheaders = {\n    'X-Ably-Version': \"SOME_STRING_VALUE\",\n    'Authorization': \"Basic REPLACE_BASIC_AUTH\"\n    }\n\nconn.request(\"GET\", \"/push/channelSubscriptions?format=SOME_STRING_VALUE&channel=SOME_STRING_VALUE&deviceId=SOME_STRING_VALUE&clientId=SOME_STRING_VALUE&limit=SOME_INTEGER_VALUE\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
                    },
                    {
                        "id": "go_native",
                        "title": "Go + Native",
                        "content": "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://rest.ably.io/push/channelSubscriptions?format=SOME_STRING_VALUE&channel=SOME_STRING_VALUE&deviceId=SOME_STRING_VALUE&clientId=SOME_STRING_VALUE&limit=SOME_INTEGER_VALUE\"\n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"X-Ably-Version\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"Authorization\", \"Basic REPLACE_BASIC_AUTH\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
                    },
                    {
                        "id": "ruby_native",
                        "title": "Ruby + Native",
                        "content": "require 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://rest.ably.io/push/channelSubscriptions?format=SOME_STRING_VALUE&channel=SOME_STRING_VALUE&deviceId=SOME_STRING_VALUE&clientId=SOME_STRING_VALUE&limit=SOME_INTEGER_VALUE\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Get.new(url)\nrequest[\"X-Ably-Version\"] = 'SOME_STRING_VALUE'\nrequest[\"Authorization\"] = 'Basic REPLACE_BASIC_AUTH'\n\nresponse = http.request(request)\nputs response.read_body"
                    },
                    {
                        "id": "php_curl",
                        "title": "Php + Curl",
                        "content": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n  CURLOPT_URL => \"https://rest.ably.io/push/channelSubscriptions?format=SOME_STRING_VALUE&channel=SOME_STRING_VALUE&deviceId=SOME_STRING_VALUE&clientId=SOME_STRING_VALUE&limit=SOME_INTEGER_VALUE\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"GET\",\n  CURLOPT_HTTPHEADER => [\n    \"Authorization: Basic REPLACE_BASIC_AUTH\",\n    \"X-Ably-Version: SOME_STRING_VALUE\"\n  ],\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
                    },
                    {
                        "id": "swift_nsurlsession",
                        "title": "Swift + Nsurlsession",
                        "content": "import Foundation\n\nlet headers = [\n  \"X-Ably-Version\": \"SOME_STRING_VALUE\",\n  \"Authorization\": \"Basic REPLACE_BASIC_AUTH\"\n]\n\nlet request = NSMutableURLRequest(url: NSURL(string: \"https://rest.ably.io/push/channelSubscriptions?format=SOME_STRING_VALUE&channel=SOME_STRING_VALUE&deviceId=SOME_STRING_VALUE&clientId=SOME_STRING_VALUE&limit=SOME_INTEGER_VALUE\")! as URL,\n                                        cachePolicy: .useProtocolCachePolicy,\n                                    timeoutInterval: 10.0)\nrequest.httpMethod = \"GET\"\nrequest.allHTTPHeaderFields = headers\n\nlet session = URLSession.shared\nlet dataTask = session.dataTask(with: request as URLRequest, completionHandler: { (data, response, error) -> Void in\n  if (error != nil) {\n    print(error)\n  } else {\n    let httpResponse = response as? HTTPURLResponse\n    print(httpResponse)\n  }\n})\n\ndataTask.resume()"
                    },
                    {
                        "id": "c_libcurl",
                        "title": "C + Libcurl",
                        "content": "CURL *hnd = curl_easy_init();\n\ncurl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, \"GET\");\ncurl_easy_setopt(hnd, CURLOPT_URL, \"https://rest.ably.io/push/channelSubscriptions?format=SOME_STRING_VALUE&channel=SOME_STRING_VALUE&deviceId=SOME_STRING_VALUE&clientId=SOME_STRING_VALUE&limit=SOME_INTEGER_VALUE\");\n\nstruct curl_slist *headers = NULL;\nheaders = curl_slist_append(headers, \"X-Ably-Version: SOME_STRING_VALUE\");\nheaders = curl_slist_append(headers, \"Authorization: Basic REPLACE_BASIC_AUTH\");\ncurl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);\n\nCURLcode ret = curl_easy_perform(hnd);"
                    },
                    {
                        "id": "javascript_xhr",
                        "title": "Javascript + Xhr",
                        "content": "const data = null;\n\nconst xhr = new XMLHttpRequest();\nxhr.withCredentials = true;\n\nxhr.addEventListener(\"readystatechange\", function () {\n  if (this.readyState === this.DONE) {\n    console.log(this.responseText);\n  }\n});\n\nxhr.open(\"GET\", \"https://rest.ably.io/push/channelSubscriptions?format=SOME_STRING_VALUE&channel=SOME_STRING_VALUE&deviceId=SOME_STRING_VALUE&clientId=SOME_STRING_VALUE&limit=SOME_INTEGER_VALUE\");\nxhr.setRequestHeader(\"X-Ably-Version\", \"SOME_STRING_VALUE\");\nxhr.setRequestHeader(\"Authorization\", \"Basic REPLACE_BASIC_AUTH\");\n\nxhr.send(data);"
                    }
                ]
            },
            "parameters": [
                {
                    "$ref": "#/components/parameters/versionHeader"
                },
                {
                    "$ref": "#/components/parameters/responseFormat"
                }
            ],
            "post": {
                "description": "Subscribe either a single device or all devices associated with a client ID to receive push notifications from messages sent to a channel.",
                "operationId": "subscribePushDeviceToChannel",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "example": {
                                "channel": "my:channel",
                                "clientId": "myClientId"
                            },
                            "schema": {
                                "oneOf": [
                                    {
                                        "properties": {
                                            "channel": {
                                                "description": "Channel name.",
                                                "type": "string"
                                            },
                                            "deviceId": {
                                                "description": "Must be set when clientId is empty, cannot be used with clientId.",
                                                "type": "string"
                                            }
                                        },
                                        "type": "object"
                                    },
                                    {
                                        "properties": {
                                            "channel": {
                                                "description": "Channel name.",
                                                "type": "string"
                                            },
                                            "clientId": {
                                                "description": "Must be set when deviceId is empty, cannot be used with deviceId.",
                                                "type": "string"
                                            }
                                        },
                                        "type": "object"
                                    }
                                ]
                            }
                        },
                        "application/x-msgpack": {
                            "example": {
                                "channel": "my:channel",
                                "clientId": "myClientId"
                            },
                            "schema": {
                                "oneOf": [
                                    {
                                        "properties": {
                                            "channel": {
                                                "description": "Channel name.",
                                                "type": "string"
                                            },
                                            "deviceId": {
                                                "description": "Must be set when clientId is empty, cannot be used with clientId.",
                                                "type": "string"
                                            }
                                        },
                                        "type": "object"
                                    },
                                    {
                                        "properties": {
                                            "channel": {
                                                "description": "Channel name.",
                                                "type": "string"
                                            },
                                            "clientId": {
                                                "description": "Must be set when deviceId is empty, cannot be used with deviceId.",
                                                "type": "string"
                                            }
                                        },
                                        "type": "object"
                                    }
                                ]
                            }
                        },
                        "application/x-www-form-urlencoded": {
                            "example": {
                                "channel": "my:channel",
                                "clientId": "myClientId"
                            },
                            "schema": {
                                "oneOf": [
                                    {
                                        "properties": {
                                            "channel": {
                                                "description": "Channel name.",
                                                "type": "string"
                                            },
                                            "deviceId": {
                                                "description": "Must be set when clientId is empty, cannot be used with clientId.",
                                                "type": "string"
                                            }
                                        },
                                        "type": "object"
                                    },
                                    {
                                        "properties": {
                                            "channel": {
                                                "description": "Channel name.",
                                                "type": "string"
                                            },
                                            "clientId": {
                                                "description": "Must be set when deviceId is empty, cannot be used with deviceId.",
                                                "type": "string"
                                            }
                                        },
                                        "type": "object"
                                    }
                                ]
                            }
                        }
                    }
                },
                "responses": {
                    "2XX": {
                        "description": "OK"
                    },
                    "default": {
                        "$ref": "#/components/responses/Error"
                    }
                },
                "summary": "Subscribe a device to a channel",
                "tags": [
                    "Push"
                ],
                "api_calls": [
                    {
                        "id": "shell_curl",
                        "mimeType": "application/json",
                        "title": "Shell + Curl",
                        "content": "curl --request POST \\\n  --url 'https://rest.ably.io/push/channelSubscriptions?format=SOME_STRING_VALUE' \\\n  --header 'Authorization: Basic REPLACE_BASIC_AUTH' \\\n  --header 'X-Ably-Version: SOME_STRING_VALUE' \\\n  --header 'content-type: application/json' \\\n  --data '{\"channel\":\"string\",\"deviceId\":\"string\"}'"
                    },
                    {
                        "id": "java_okhttp",
                        "mimeType": "application/json",
                        "title": "Java + Okhttp",
                        "content": "OkHttpClient client = new OkHttpClient();\n\nMediaType mediaType = MediaType.parse(\"application/json\");\nRequestBody body = RequestBody.create(mediaType, \"{\\\"channel\\\":\\\"string\\\",\\\"deviceId\\\":\\\"string\\\"}\");\nRequest request = new Request.Builder()\n  .url(\"https://rest.ably.io/push/channelSubscriptions?format=SOME_STRING_VALUE\")\n  .post(body)\n  .addHeader(\"X-Ably-Version\", \"SOME_STRING_VALUE\")\n  .addHeader(\"Authorization\", \"Basic REPLACE_BASIC_AUTH\")\n  .addHeader(\"content-type\", \"application/json\")\n  .build();\n\nResponse response = client.newCall(request).execute();"
                    },
                    {
                        "id": "node_request",
                        "mimeType": "application/json",
                        "title": "Node + Request",
                        "content": "const request = require('request');\n\nconst options = {\n  method: 'POST',\n  url: 'https://rest.ably.io/push/channelSubscriptions',\n  qs: {format: 'SOME_STRING_VALUE'},\n  headers: {\n    'X-Ably-Version': 'SOME_STRING_VALUE',\n    Authorization: 'Basic REPLACE_BASIC_AUTH',\n    'content-type': 'application/json'\n  },\n  body: {channel: 'string', deviceId: 'string'},\n  json: true\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
                    },
                    {
                        "id": "python_python3",
                        "mimeType": "application/json",
                        "title": "Python + Python3",
                        "content": "import http.client\n\nconn = http.client.HTTPSConnection(\"rest.ably.io\")\n\npayload = \"{\\\"channel\\\":\\\"string\\\",\\\"deviceId\\\":\\\"string\\\"}\"\n\nheaders = {\n    'X-Ably-Version': \"SOME_STRING_VALUE\",\n    'Authorization': \"Basic REPLACE_BASIC_AUTH\",\n    'content-type': \"application/json\"\n    }\n\nconn.request(\"POST\", \"/push/channelSubscriptions?format=SOME_STRING_VALUE\", payload, headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
                    },
                    {
                        "id": "go_native",
                        "mimeType": "application/json",
                        "title": "Go + Native",
                        "content": "package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://rest.ably.io/push/channelSubscriptions?format=SOME_STRING_VALUE\"\n\n\tpayload := strings.NewReader(\"{\\\"channel\\\":\\\"string\\\",\\\"deviceId\\\":\\\"string\\\"}\")\n\n\treq, _ := http.NewRequest(\"POST\", url, payload)\n\n\treq.Header.Add(\"X-Ably-Version\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"Authorization\", \"Basic REPLACE_BASIC_AUTH\")\n\treq.Header.Add(\"content-type\", \"application/json\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
                    },
                    {
                        "id": "ruby_native",
                        "mimeType": "application/json",
                        "title": "Ruby + Native",
                        "content": "require 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://rest.ably.io/push/channelSubscriptions?format=SOME_STRING_VALUE\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Post.new(url)\nrequest[\"X-Ably-Version\"] = 'SOME_STRING_VALUE'\nrequest[\"Authorization\"] = 'Basic REPLACE_BASIC_AUTH'\nrequest[\"content-type\"] = 'application/json'\nrequest.body = \"{\\\"channel\\\":\\\"string\\\",\\\"deviceId\\\":\\\"string\\\"}\"\n\nresponse = http.request(request)\nputs response.read_body"
                    },
                    {
                        "id": "php_curl",
                        "mimeType": "application/json",
                        "title": "Php + Curl",
                        "content": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n  CURLOPT_URL => \"https://rest.ably.io/push/channelSubscriptions?format=SOME_STRING_VALUE\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"POST\",\n  CURLOPT_POSTFIELDS => \"{\\\"channel\\\":\\\"string\\\",\\\"deviceId\\\":\\\"string\\\"}\",\n  CURLOPT_HTTPHEADER => [\n    \"Authorization: Basic REPLACE_BASIC_AUTH\",\n    \"X-Ably-Version: SOME_STRING_VALUE\",\n    \"content-type: application/json\"\n  ],\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
                    },
                    {
                        "id": "swift_nsurlsession",
                        "mimeType": "application/json",
                        "title": "Swift + Nsurlsession",
                        "content": "import Foundation\n\nlet headers = [\n  \"X-Ably-Version\": \"SOME_STRING_VALUE\",\n  \"Authorization\": \"Basic REPLACE_BASIC_AUTH\",\n  \"content-type\": \"application/json\"\n]\nlet parameters = [\n  \"channel\": \"string\",\n  \"deviceId\": \"string\"\n] as [String : Any]\n\nlet postData = JSONSerialization.data(withJSONObject: parameters, options: [])\n\nlet request = NSMutableURLRequest(url: NSURL(string: \"https://rest.ably.io/push/channelSubscriptions?format=SOME_STRING_VALUE\")! as URL,\n                                        cachePolicy: .useProtocolCachePolicy,\n                                    timeoutInterval: 10.0)\nrequest.httpMethod = \"POST\"\nrequest.allHTTPHeaderFields = headers\nrequest.httpBody = postData as Data\n\nlet session = URLSession.shared\nlet dataTask = session.dataTask(with: request as URLRequest, completionHandler: { (data, response, error) -> Void in\n  if (error != nil) {\n    print(error)\n  } else {\n    let httpResponse = response as? HTTPURLResponse\n    print(httpResponse)\n  }\n})\n\ndataTask.resume()"
                    },
                    {
                        "id": "c_libcurl",
                        "mimeType": "application/json",
                        "title": "C + Libcurl",
                        "content": "CURL *hnd = curl_easy_init();\n\ncurl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, \"POST\");\ncurl_easy_setopt(hnd, CURLOPT_URL, \"https://rest.ably.io/push/channelSubscriptions?format=SOME_STRING_VALUE\");\n\nstruct curl_slist *headers = NULL;\nheaders = curl_slist_append(headers, \"X-Ably-Version: SOME_STRING_VALUE\");\nheaders = curl_slist_append(headers, \"Authorization: Basic REPLACE_BASIC_AUTH\");\nheaders = curl_slist_append(headers, \"content-type: application/json\");\ncurl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);\n\ncurl_easy_setopt(hnd, CURLOPT_POSTFIELDS, \"{\\\"channel\\\":\\\"string\\\",\\\"deviceId\\\":\\\"string\\\"}\");\n\nCURLcode ret = curl_easy_perform(hnd);"
                    },
                    {
                        "id": "javascript_xhr",
                        "mimeType": "application/json",
                        "title": "Javascript + Xhr",
                        "content": "const data = JSON.stringify({\n  \"channel\": \"string\",\n  \"deviceId\": \"string\"\n});\n\nconst xhr = new XMLHttpRequest();\nxhr.withCredentials = true;\n\nxhr.addEventListener(\"readystatechange\", function () {\n  if (this.readyState === this.DONE) {\n    console.log(this.responseText);\n  }\n});\n\nxhr.open(\"POST\", \"https://rest.ably.io/push/channelSubscriptions?format=SOME_STRING_VALUE\");\nxhr.setRequestHeader(\"X-Ably-Version\", \"SOME_STRING_VALUE\");\nxhr.setRequestHeader(\"Authorization\", \"Basic REPLACE_BASIC_AUTH\");\nxhr.setRequestHeader(\"content-type\", \"application/json\");\n\nxhr.send(data);"
                    },
                    {
                        "id": "shell_curl",
                        "mimeType": "application/x-www-form-urlencoded",
                        "title": "Shell + Curl",
                        "content": "curl --request POST \\\n  --url 'https://rest.ably.io/push/channelSubscriptions?format=SOME_STRING_VALUE' \\\n  --header 'Authorization: Basic REPLACE_BASIC_AUTH' \\\n  --header 'X-Ably-Version: SOME_STRING_VALUE' \\\n  --header 'content-type: application/x-www-form-urlencoded' \\\n  --data channel=string \\\n  --data deviceId=string"
                    },
                    {
                        "id": "java_okhttp",
                        "mimeType": "application/x-www-form-urlencoded",
                        "title": "Java + Okhttp",
                        "content": "OkHttpClient client = new OkHttpClient();\n\nMediaType mediaType = MediaType.parse(\"application/x-www-form-urlencoded\");\nRequestBody body = RequestBody.create(mediaType, \"channel=string&deviceId=string\");\nRequest request = new Request.Builder()\n  .url(\"https://rest.ably.io/push/channelSubscriptions?format=SOME_STRING_VALUE\")\n  .post(body)\n  .addHeader(\"X-Ably-Version\", \"SOME_STRING_VALUE\")\n  .addHeader(\"Authorization\", \"Basic REPLACE_BASIC_AUTH\")\n  .addHeader(\"content-type\", \"application/x-www-form-urlencoded\")\n  .build();\n\nResponse response = client.newCall(request).execute();"
                    },
                    {
                        "id": "node_request",
                        "mimeType": "application/x-www-form-urlencoded",
                        "title": "Node + Request",
                        "content": "const request = require('request');\n\nconst options = {\n  method: 'POST',\n  url: 'https://rest.ably.io/push/channelSubscriptions',\n  qs: {format: 'SOME_STRING_VALUE'},\n  headers: {\n    'X-Ably-Version': 'SOME_STRING_VALUE',\n    Authorization: 'Basic REPLACE_BASIC_AUTH',\n    'content-type': 'application/x-www-form-urlencoded'\n  },\n  form: {channel: 'string', deviceId: 'string'}\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
                    },
                    {
                        "id": "python_python3",
                        "mimeType": "application/x-www-form-urlencoded",
                        "title": "Python + Python3",
                        "content": "import http.client\n\nconn = http.client.HTTPSConnection(\"rest.ably.io\")\n\npayload = \"channel=string&deviceId=string\"\n\nheaders = {\n    'X-Ably-Version': \"SOME_STRING_VALUE\",\n    'Authorization': \"Basic REPLACE_BASIC_AUTH\",\n    'content-type': \"application/x-www-form-urlencoded\"\n    }\n\nconn.request(\"POST\", \"/push/channelSubscriptions?format=SOME_STRING_VALUE\", payload, headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
                    },
                    {
                        "id": "go_native",
                        "mimeType": "application/x-www-form-urlencoded",
                        "title": "Go + Native",
                        "content": "package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://rest.ably.io/push/channelSubscriptions?format=SOME_STRING_VALUE\"\n\n\tpayload := strings.NewReader(\"channel=string&deviceId=string\")\n\n\treq, _ := http.NewRequest(\"POST\", url, payload)\n\n\treq.Header.Add(\"X-Ably-Version\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"Authorization\", \"Basic REPLACE_BASIC_AUTH\")\n\treq.Header.Add(\"content-type\", \"application/x-www-form-urlencoded\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
                    },
                    {
                        "id": "ruby_native",
                        "mimeType": "application/x-www-form-urlencoded",
                        "title": "Ruby + Native",
                        "content": "require 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://rest.ably.io/push/channelSubscriptions?format=SOME_STRING_VALUE\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Post.new(url)\nrequest[\"X-Ably-Version\"] = 'SOME_STRING_VALUE'\nrequest[\"Authorization\"] = 'Basic REPLACE_BASIC_AUTH'\nrequest[\"content-type\"] = 'application/x-www-form-urlencoded'\nrequest.body = \"channel=string&deviceId=string\"\n\nresponse = http.request(request)\nputs response.read_body"
                    },
                    {
                        "id": "php_curl",
                        "mimeType": "application/x-www-form-urlencoded",
                        "title": "Php + Curl",
                        "content": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n  CURLOPT_URL => \"https://rest.ably.io/push/channelSubscriptions?format=SOME_STRING_VALUE\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"POST\",\n  CURLOPT_POSTFIELDS => \"channel=string&deviceId=string\",\n  CURLOPT_HTTPHEADER => [\n    \"Authorization: Basic REPLACE_BASIC_AUTH\",\n    \"X-Ably-Version: SOME_STRING_VALUE\",\n    \"content-type: application/x-www-form-urlencoded\"\n  ],\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
                    },
                    {
                        "id": "swift_nsurlsession",
                        "mimeType": "application/x-www-form-urlencoded",
                        "title": "Swift + Nsurlsession",
                        "content": "import Foundation\n\nlet headers = [\n  \"X-Ably-Version\": \"SOME_STRING_VALUE\",\n  \"Authorization\": \"Basic REPLACE_BASIC_AUTH\",\n  \"content-type\": \"application/x-www-form-urlencoded\"\n]\n\nlet postData = NSMutableData(data: \"channel=string\".data(using: String.Encoding.utf8)!)\npostData.append(\"&deviceId=string\".data(using: String.Encoding.utf8)!)\n\nlet request = NSMutableURLRequest(url: NSURL(string: \"https://rest.ably.io/push/channelSubscriptions?format=SOME_STRING_VALUE\")! as URL,\n                                        cachePolicy: .useProtocolCachePolicy,\n                                    timeoutInterval: 10.0)\nrequest.httpMethod = \"POST\"\nrequest.allHTTPHeaderFields = headers\nrequest.httpBody = postData as Data\n\nlet session = URLSession.shared\nlet dataTask = session.dataTask(with: request as URLRequest, completionHandler: { (data, response, error) -> Void in\n  if (error != nil) {\n    print(error)\n  } else {\n    let httpResponse = response as? HTTPURLResponse\n    print(httpResponse)\n  }\n})\n\ndataTask.resume()"
                    },
                    {
                        "id": "c_libcurl",
                        "mimeType": "application/x-www-form-urlencoded",
                        "title": "C + Libcurl",
                        "content": "CURL *hnd = curl_easy_init();\n\ncurl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, \"POST\");\ncurl_easy_setopt(hnd, CURLOPT_URL, \"https://rest.ably.io/push/channelSubscriptions?format=SOME_STRING_VALUE\");\n\nstruct curl_slist *headers = NULL;\nheaders = curl_slist_append(headers, \"X-Ably-Version: SOME_STRING_VALUE\");\nheaders = curl_slist_append(headers, \"Authorization: Basic REPLACE_BASIC_AUTH\");\nheaders = curl_slist_append(headers, \"content-type: application/x-www-form-urlencoded\");\ncurl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);\n\ncurl_easy_setopt(hnd, CURLOPT_POSTFIELDS, \"channel=string&deviceId=string\");\n\nCURLcode ret = curl_easy_perform(hnd);"
                    },
                    {
                        "id": "javascript_xhr",
                        "mimeType": "application/x-www-form-urlencoded",
                        "title": "Javascript + Xhr",
                        "content": "const data = \"channel=string&deviceId=string\";\n\nconst xhr = new XMLHttpRequest();\nxhr.withCredentials = true;\n\nxhr.addEventListener(\"readystatechange\", function () {\n  if (this.readyState === this.DONE) {\n    console.log(this.responseText);\n  }\n});\n\nxhr.open(\"POST\", \"https://rest.ably.io/push/channelSubscriptions?format=SOME_STRING_VALUE\");\nxhr.setRequestHeader(\"X-Ably-Version\", \"SOME_STRING_VALUE\");\nxhr.setRequestHeader(\"Authorization\", \"Basic REPLACE_BASIC_AUTH\");\nxhr.setRequestHeader(\"content-type\", \"application/x-www-form-urlencoded\");\n\nxhr.send(data);"
                    }
                ]
            }
        },
        "/push/channels": {
            "get": {
                "description": "Returns a paginated response of channel names.",
                "operationId": "getChannelsWithPushSubscribers",
                "responses": {
                    "2XX": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "type": "string"
                                    },
                                    "type": "array"
                                }
                            },
                            "application/x-msgpack": {
                                "schema": {
                                    "items": {
                                        "type": "string"
                                    },
                                    "type": "array"
                                }
                            },
                            "text/html": {
                                "schema": {
                                    "items": {
                                        "type": "string"
                                    },
                                    "type": "array"
                                }
                            }
                        },
                        "description": "OK"
                    },
                    "default": {
                        "$ref": "#/components/responses/Error"
                    }
                },
                "summary": "List all channels with at least one subscribed device",
                "tags": [
                    "Push"
                ],
                "api_calls": [
                    {
                        "id": "shell_curl",
                        "title": "Shell + Curl",
                        "content": "curl --request GET \\\n  --url 'https://rest.ably.io/push/channels?format=SOME_STRING_VALUE' \\\n  --header 'Authorization: Basic REPLACE_BASIC_AUTH' \\\n  --header 'X-Ably-Version: SOME_STRING_VALUE'"
                    },
                    {
                        "id": "java_okhttp",
                        "title": "Java + Okhttp",
                        "content": "OkHttpClient client = new OkHttpClient();\n\nRequest request = new Request.Builder()\n  .url(\"https://rest.ably.io/push/channels?format=SOME_STRING_VALUE\")\n  .get()\n  .addHeader(\"X-Ably-Version\", \"SOME_STRING_VALUE\")\n  .addHeader(\"Authorization\", \"Basic REPLACE_BASIC_AUTH\")\n  .build();\n\nResponse response = client.newCall(request).execute();"
                    },
                    {
                        "id": "node_request",
                        "title": "Node + Request",
                        "content": "const request = require('request');\n\nconst options = {\n  method: 'GET',\n  url: 'https://rest.ably.io/push/channels',\n  qs: {format: 'SOME_STRING_VALUE'},\n  headers: {\n    'X-Ably-Version': 'SOME_STRING_VALUE',\n    Authorization: 'Basic REPLACE_BASIC_AUTH'\n  }\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
                    },
                    {
                        "id": "python_python3",
                        "title": "Python + Python3",
                        "content": "import http.client\n\nconn = http.client.HTTPSConnection(\"rest.ably.io\")\n\nheaders = {\n    'X-Ably-Version': \"SOME_STRING_VALUE\",\n    'Authorization': \"Basic REPLACE_BASIC_AUTH\"\n    }\n\nconn.request(\"GET\", \"/push/channels?format=SOME_STRING_VALUE\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
                    },
                    {
                        "id": "go_native",
                        "title": "Go + Native",
                        "content": "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://rest.ably.io/push/channels?format=SOME_STRING_VALUE\"\n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"X-Ably-Version\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"Authorization\", \"Basic REPLACE_BASIC_AUTH\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
                    },
                    {
                        "id": "ruby_native",
                        "title": "Ruby + Native",
                        "content": "require 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://rest.ably.io/push/channels?format=SOME_STRING_VALUE\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Get.new(url)\nrequest[\"X-Ably-Version\"] = 'SOME_STRING_VALUE'\nrequest[\"Authorization\"] = 'Basic REPLACE_BASIC_AUTH'\n\nresponse = http.request(request)\nputs response.read_body"
                    },
                    {
                        "id": "php_curl",
                        "title": "Php + Curl",
                        "content": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n  CURLOPT_URL => \"https://rest.ably.io/push/channels?format=SOME_STRING_VALUE\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"GET\",\n  CURLOPT_HTTPHEADER => [\n    \"Authorization: Basic REPLACE_BASIC_AUTH\",\n    \"X-Ably-Version: SOME_STRING_VALUE\"\n  ],\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
                    },
                    {
                        "id": "swift_nsurlsession",
                        "title": "Swift + Nsurlsession",
                        "content": "import Foundation\n\nlet headers = [\n  \"X-Ably-Version\": \"SOME_STRING_VALUE\",\n  \"Authorization\": \"Basic REPLACE_BASIC_AUTH\"\n]\n\nlet request = NSMutableURLRequest(url: NSURL(string: \"https://rest.ably.io/push/channels?format=SOME_STRING_VALUE\")! as URL,\n                                        cachePolicy: .useProtocolCachePolicy,\n                                    timeoutInterval: 10.0)\nrequest.httpMethod = \"GET\"\nrequest.allHTTPHeaderFields = headers\n\nlet session = URLSession.shared\nlet dataTask = session.dataTask(with: request as URLRequest, completionHandler: { (data, response, error) -> Void in\n  if (error != nil) {\n    print(error)\n  } else {\n    let httpResponse = response as? HTTPURLResponse\n    print(httpResponse)\n  }\n})\n\ndataTask.resume()"
                    },
                    {
                        "id": "c_libcurl",
                        "title": "C + Libcurl",
                        "content": "CURL *hnd = curl_easy_init();\n\ncurl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, \"GET\");\ncurl_easy_setopt(hnd, CURLOPT_URL, \"https://rest.ably.io/push/channels?format=SOME_STRING_VALUE\");\n\nstruct curl_slist *headers = NULL;\nheaders = curl_slist_append(headers, \"X-Ably-Version: SOME_STRING_VALUE\");\nheaders = curl_slist_append(headers, \"Authorization: Basic REPLACE_BASIC_AUTH\");\ncurl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);\n\nCURLcode ret = curl_easy_perform(hnd);"
                    },
                    {
                        "id": "javascript_xhr",
                        "title": "Javascript + Xhr",
                        "content": "const data = null;\n\nconst xhr = new XMLHttpRequest();\nxhr.withCredentials = true;\n\nxhr.addEventListener(\"readystatechange\", function () {\n  if (this.readyState === this.DONE) {\n    console.log(this.responseText);\n  }\n});\n\nxhr.open(\"GET\", \"https://rest.ably.io/push/channels?format=SOME_STRING_VALUE\");\nxhr.setRequestHeader(\"X-Ably-Version\", \"SOME_STRING_VALUE\");\nxhr.setRequestHeader(\"Authorization\", \"Basic REPLACE_BASIC_AUTH\");\n\nxhr.send(data);"
                    }
                ]
            },
            "parameters": [
                {
                    "$ref": "#/components/parameters/versionHeader"
                },
                {
                    "$ref": "#/components/parameters/responseFormat"
                }
            ]
        },
        "/push/deviceRegistrations": {
            "delete": {
                "description": "Unregisters devices. All their subscriptions for receiving push notifications through channels will also be deleted.",
                "operationId": "unregisterAllPushDevices",
                "parameters": [
                    {
                        "description": "Optional filter to restrict to devices associated with that deviceId. Cannot be used with clientId.",
                        "in": "query",
                        "name": "deviceId",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "Optional filter to restrict to devices associated with that clientId. Cannot be used with deviceId.",
                        "in": "query",
                        "name": "clientId",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "2XX": {
                        "description": "OK"
                    },
                    "default": {
                        "$ref": "#/components/responses/Error"
                    }
                },
                "summary": "Unregister matching devices for push notifications",
                "tags": [
                    "Push"
                ],
                "api_calls": [
                    {
                        "id": "shell_curl",
                        "title": "Shell + Curl",
                        "content": "curl --request DELETE \\\n  --url 'https://rest.ably.io/push/deviceRegistrations?format=SOME_STRING_VALUE&deviceId=SOME_STRING_VALUE&clientId=SOME_STRING_VALUE' \\\n  --header 'Authorization: Basic REPLACE_BASIC_AUTH' \\\n  --header 'X-Ably-Version: SOME_STRING_VALUE'"
                    },
                    {
                        "id": "java_okhttp",
                        "title": "Java + Okhttp",
                        "content": "OkHttpClient client = new OkHttpClient();\n\nRequest request = new Request.Builder()\n  .url(\"https://rest.ably.io/push/deviceRegistrations?format=SOME_STRING_VALUE&deviceId=SOME_STRING_VALUE&clientId=SOME_STRING_VALUE\")\n  .delete(null)\n  .addHeader(\"X-Ably-Version\", \"SOME_STRING_VALUE\")\n  .addHeader(\"Authorization\", \"Basic REPLACE_BASIC_AUTH\")\n  .build();\n\nResponse response = client.newCall(request).execute();"
                    },
                    {
                        "id": "node_request",
                        "title": "Node + Request",
                        "content": "const request = require('request');\n\nconst options = {\n  method: 'DELETE',\n  url: 'https://rest.ably.io/push/deviceRegistrations',\n  qs: {\n    format: 'SOME_STRING_VALUE',\n    deviceId: 'SOME_STRING_VALUE',\n    clientId: 'SOME_STRING_VALUE'\n  },\n  headers: {\n    'X-Ably-Version': 'SOME_STRING_VALUE',\n    Authorization: 'Basic REPLACE_BASIC_AUTH'\n  }\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
                    },
                    {
                        "id": "python_python3",
                        "title": "Python + Python3",
                        "content": "import http.client\n\nconn = http.client.HTTPSConnection(\"rest.ably.io\")\n\nheaders = {\n    'X-Ably-Version': \"SOME_STRING_VALUE\",\n    'Authorization': \"Basic REPLACE_BASIC_AUTH\"\n    }\n\nconn.request(\"DELETE\", \"/push/deviceRegistrations?format=SOME_STRING_VALUE&deviceId=SOME_STRING_VALUE&clientId=SOME_STRING_VALUE\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
                    },
                    {
                        "id": "go_native",
                        "title": "Go + Native",
                        "content": "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://rest.ably.io/push/deviceRegistrations?format=SOME_STRING_VALUE&deviceId=SOME_STRING_VALUE&clientId=SOME_STRING_VALUE\"\n\n\treq, _ := http.NewRequest(\"DELETE\", url, nil)\n\n\treq.Header.Add(\"X-Ably-Version\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"Authorization\", \"Basic REPLACE_BASIC_AUTH\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
                    },
                    {
                        "id": "ruby_native",
                        "title": "Ruby + Native",
                        "content": "require 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://rest.ably.io/push/deviceRegistrations?format=SOME_STRING_VALUE&deviceId=SOME_STRING_VALUE&clientId=SOME_STRING_VALUE\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Delete.new(url)\nrequest[\"X-Ably-Version\"] = 'SOME_STRING_VALUE'\nrequest[\"Authorization\"] = 'Basic REPLACE_BASIC_AUTH'\n\nresponse = http.request(request)\nputs response.read_body"
                    },
                    {
                        "id": "php_curl",
                        "title": "Php + Curl",
                        "content": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n  CURLOPT_URL => \"https://rest.ably.io/push/deviceRegistrations?format=SOME_STRING_VALUE&deviceId=SOME_STRING_VALUE&clientId=SOME_STRING_VALUE\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"DELETE\",\n  CURLOPT_HTTPHEADER => [\n    \"Authorization: Basic REPLACE_BASIC_AUTH\",\n    \"X-Ably-Version: SOME_STRING_VALUE\"\n  ],\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
                    },
                    {
                        "id": "swift_nsurlsession",
                        "title": "Swift + Nsurlsession",
                        "content": "import Foundation\n\nlet headers = [\n  \"X-Ably-Version\": \"SOME_STRING_VALUE\",\n  \"Authorization\": \"Basic REPLACE_BASIC_AUTH\"\n]\n\nlet request = NSMutableURLRequest(url: NSURL(string: \"https://rest.ably.io/push/deviceRegistrations?format=SOME_STRING_VALUE&deviceId=SOME_STRING_VALUE&clientId=SOME_STRING_VALUE\")! as URL,\n                                        cachePolicy: .useProtocolCachePolicy,\n                                    timeoutInterval: 10.0)\nrequest.httpMethod = \"DELETE\"\nrequest.allHTTPHeaderFields = headers\n\nlet session = URLSession.shared\nlet dataTask = session.dataTask(with: request as URLRequest, completionHandler: { (data, response, error) -> Void in\n  if (error != nil) {\n    print(error)\n  } else {\n    let httpResponse = response as? HTTPURLResponse\n    print(httpResponse)\n  }\n})\n\ndataTask.resume()"
                    },
                    {
                        "id": "c_libcurl",
                        "title": "C + Libcurl",
                        "content": "CURL *hnd = curl_easy_init();\n\ncurl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, \"DELETE\");\ncurl_easy_setopt(hnd, CURLOPT_URL, \"https://rest.ably.io/push/deviceRegistrations?format=SOME_STRING_VALUE&deviceId=SOME_STRING_VALUE&clientId=SOME_STRING_VALUE\");\n\nstruct curl_slist *headers = NULL;\nheaders = curl_slist_append(headers, \"X-Ably-Version: SOME_STRING_VALUE\");\nheaders = curl_slist_append(headers, \"Authorization: Basic REPLACE_BASIC_AUTH\");\ncurl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);\n\nCURLcode ret = curl_easy_perform(hnd);"
                    },
                    {
                        "id": "javascript_xhr",
                        "title": "Javascript + Xhr",
                        "content": "const data = null;\n\nconst xhr = new XMLHttpRequest();\nxhr.withCredentials = true;\n\nxhr.addEventListener(\"readystatechange\", function () {\n  if (this.readyState === this.DONE) {\n    console.log(this.responseText);\n  }\n});\n\nxhr.open(\"DELETE\", \"https://rest.ably.io/push/deviceRegistrations?format=SOME_STRING_VALUE&deviceId=SOME_STRING_VALUE&clientId=SOME_STRING_VALUE\");\nxhr.setRequestHeader(\"X-Ably-Version\", \"SOME_STRING_VALUE\");\nxhr.setRequestHeader(\"Authorization\", \"Basic REPLACE_BASIC_AUTH\");\n\nxhr.send(data);"
                    }
                ]
            },
            "get": {
                "description": "List of device details of devices registed for push notifications.",
                "operationId": "getRegisteredPushDevices",
                "parameters": [
                    {
                        "description": "Optional filter to restrict to devices associated with that deviceId.",
                        "in": "query",
                        "name": "deviceId",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "Optional filter to restrict to devices associated with that clientId.",
                        "in": "query",
                        "name": "clientId",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "The maximum number of records to return.",
                        "in": "query",
                        "name": "limit",
                        "schema": {
                            "default": 100,
                            "maximum": 1000,
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "2XX": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/DeviceDetails"
                                }
                            },
                            "application/x-msgpack": {
                                "schema": {
                                    "$ref": "#/components/schemas/DeviceDetails"
                                }
                            },
                            "text/html": {
                                "schema": {
                                    "$ref": "#/components/schemas/DeviceDetails"
                                }
                            }
                        },
                        "description": "OK"
                    },
                    "default": {
                        "$ref": "#/components/responses/Error"
                    }
                },
                "summary": "List devices registered for receiving push notifications",
                "tags": [
                    "Push"
                ],
                "api_calls": [
                    {
                        "id": "shell_curl",
                        "title": "Shell + Curl",
                        "content": "curl --request GET \\\n  --url 'https://rest.ably.io/push/deviceRegistrations?format=SOME_STRING_VALUE&deviceId=SOME_STRING_VALUE&clientId=SOME_STRING_VALUE&limit=SOME_INTEGER_VALUE' \\\n  --header 'Authorization: Basic REPLACE_BASIC_AUTH' \\\n  --header 'X-Ably-Version: SOME_STRING_VALUE'"
                    },
                    {
                        "id": "java_okhttp",
                        "title": "Java + Okhttp",
                        "content": "OkHttpClient client = new OkHttpClient();\n\nRequest request = new Request.Builder()\n  .url(\"https://rest.ably.io/push/deviceRegistrations?format=SOME_STRING_VALUE&deviceId=SOME_STRING_VALUE&clientId=SOME_STRING_VALUE&limit=SOME_INTEGER_VALUE\")\n  .get()\n  .addHeader(\"X-Ably-Version\", \"SOME_STRING_VALUE\")\n  .addHeader(\"Authorization\", \"Basic REPLACE_BASIC_AUTH\")\n  .build();\n\nResponse response = client.newCall(request).execute();"
                    },
                    {
                        "id": "node_request",
                        "title": "Node + Request",
                        "content": "const request = require('request');\n\nconst options = {\n  method: 'GET',\n  url: 'https://rest.ably.io/push/deviceRegistrations',\n  qs: {\n    format: 'SOME_STRING_VALUE',\n    deviceId: 'SOME_STRING_VALUE',\n    clientId: 'SOME_STRING_VALUE',\n    limit: 'SOME_INTEGER_VALUE'\n  },\n  headers: {\n    'X-Ably-Version': 'SOME_STRING_VALUE',\n    Authorization: 'Basic REPLACE_BASIC_AUTH'\n  }\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
                    },
                    {
                        "id": "python_python3",
                        "title": "Python + Python3",
                        "content": "import http.client\n\nconn = http.client.HTTPSConnection(\"rest.ably.io\")\n\nheaders = {\n    'X-Ably-Version': \"SOME_STRING_VALUE\",\n    'Authorization': \"Basic REPLACE_BASIC_AUTH\"\n    }\n\nconn.request(\"GET\", \"/push/deviceRegistrations?format=SOME_STRING_VALUE&deviceId=SOME_STRING_VALUE&clientId=SOME_STRING_VALUE&limit=SOME_INTEGER_VALUE\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
                    },
                    {
                        "id": "go_native",
                        "title": "Go + Native",
                        "content": "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://rest.ably.io/push/deviceRegistrations?format=SOME_STRING_VALUE&deviceId=SOME_STRING_VALUE&clientId=SOME_STRING_VALUE&limit=SOME_INTEGER_VALUE\"\n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"X-Ably-Version\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"Authorization\", \"Basic REPLACE_BASIC_AUTH\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
                    },
                    {
                        "id": "ruby_native",
                        "title": "Ruby + Native",
                        "content": "require 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://rest.ably.io/push/deviceRegistrations?format=SOME_STRING_VALUE&deviceId=SOME_STRING_VALUE&clientId=SOME_STRING_VALUE&limit=SOME_INTEGER_VALUE\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Get.new(url)\nrequest[\"X-Ably-Version\"] = 'SOME_STRING_VALUE'\nrequest[\"Authorization\"] = 'Basic REPLACE_BASIC_AUTH'\n\nresponse = http.request(request)\nputs response.read_body"
                    },
                    {
                        "id": "php_curl",
                        "title": "Php + Curl",
                        "content": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n  CURLOPT_URL => \"https://rest.ably.io/push/deviceRegistrations?format=SOME_STRING_VALUE&deviceId=SOME_STRING_VALUE&clientId=SOME_STRING_VALUE&limit=SOME_INTEGER_VALUE\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"GET\",\n  CURLOPT_HTTPHEADER => [\n    \"Authorization: Basic REPLACE_BASIC_AUTH\",\n    \"X-Ably-Version: SOME_STRING_VALUE\"\n  ],\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
                    },
                    {
                        "id": "swift_nsurlsession",
                        "title": "Swift + Nsurlsession",
                        "content": "import Foundation\n\nlet headers = [\n  \"X-Ably-Version\": \"SOME_STRING_VALUE\",\n  \"Authorization\": \"Basic REPLACE_BASIC_AUTH\"\n]\n\nlet request = NSMutableURLRequest(url: NSURL(string: \"https://rest.ably.io/push/deviceRegistrations?format=SOME_STRING_VALUE&deviceId=SOME_STRING_VALUE&clientId=SOME_STRING_VALUE&limit=SOME_INTEGER_VALUE\")! as URL,\n                                        cachePolicy: .useProtocolCachePolicy,\n                                    timeoutInterval: 10.0)\nrequest.httpMethod = \"GET\"\nrequest.allHTTPHeaderFields = headers\n\nlet session = URLSession.shared\nlet dataTask = session.dataTask(with: request as URLRequest, completionHandler: { (data, response, error) -> Void in\n  if (error != nil) {\n    print(error)\n  } else {\n    let httpResponse = response as? HTTPURLResponse\n    print(httpResponse)\n  }\n})\n\ndataTask.resume()"
                    },
                    {
                        "id": "c_libcurl",
                        "title": "C + Libcurl",
                        "content": "CURL *hnd = curl_easy_init();\n\ncurl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, \"GET\");\ncurl_easy_setopt(hnd, CURLOPT_URL, \"https://rest.ably.io/push/deviceRegistrations?format=SOME_STRING_VALUE&deviceId=SOME_STRING_VALUE&clientId=SOME_STRING_VALUE&limit=SOME_INTEGER_VALUE\");\n\nstruct curl_slist *headers = NULL;\nheaders = curl_slist_append(headers, \"X-Ably-Version: SOME_STRING_VALUE\");\nheaders = curl_slist_append(headers, \"Authorization: Basic REPLACE_BASIC_AUTH\");\ncurl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);\n\nCURLcode ret = curl_easy_perform(hnd);"
                    },
                    {
                        "id": "javascript_xhr",
                        "title": "Javascript + Xhr",
                        "content": "const data = null;\n\nconst xhr = new XMLHttpRequest();\nxhr.withCredentials = true;\n\nxhr.addEventListener(\"readystatechange\", function () {\n  if (this.readyState === this.DONE) {\n    console.log(this.responseText);\n  }\n});\n\nxhr.open(\"GET\", \"https://rest.ably.io/push/deviceRegistrations?format=SOME_STRING_VALUE&deviceId=SOME_STRING_VALUE&clientId=SOME_STRING_VALUE&limit=SOME_INTEGER_VALUE\");\nxhr.setRequestHeader(\"X-Ably-Version\", \"SOME_STRING_VALUE\");\nxhr.setRequestHeader(\"Authorization\", \"Basic REPLACE_BASIC_AUTH\");\n\nxhr.send(data);"
                    }
                ]
            },
            "parameters": [
                {
                    "$ref": "#/components/parameters/versionHeader"
                },
                {
                    "$ref": "#/components/parameters/responseFormat"
                }
            ],
            "post": {
                "description": "Register a device’s details, including the information necessary to deliver push notifications to it. Requires \"push-admin\" capability.",
                "operationId": "registerPushDevice",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/DeviceDetails"
                            }
                        },
                        "application/x-msgpack": {
                            "schema": {
                                "$ref": "#/components/schemas/DeviceDetails"
                            }
                        }
                    }
                },
                "responses": {
                    "2XX": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/DeviceDetails"
                                }
                            },
                            "application/x-msgpack": {
                                "schema": {
                                    "$ref": "#/components/schemas/DeviceDetails"
                                }
                            },
                            "text/html": {
                                "schema": {
                                    "$ref": "#/components/schemas/DeviceDetails"
                                }
                            }
                        },
                        "description": "OK"
                    },
                    "default": {
                        "$ref": "#/components/responses/Error"
                    }
                },
                "summary": "Register a device for receiving push notifications",
                "tags": [
                    "Push"
                ],
                "api_calls": [
                    {
                        "id": "shell_curl",
                        "mimeType": "application/json",
                        "title": "Shell + Curl",
                        "content": "curl --request POST \\\n  --url 'https://rest.ably.io/push/deviceRegistrations?format=SOME_STRING_VALUE' \\\n  --header 'Authorization: Basic REPLACE_BASIC_AUTH' \\\n  --header 'X-Ably-Version: SOME_STRING_VALUE' \\\n  --header 'content-type: application/json' \\\n  --data '{\"clientId\":\"string\",\"deviceSecret\":\"string\",\"formFactor\":\"phone\",\"id\":\"string\",\"metadata\":{},\"platform\":\"ios\",\"push.recipient\":{\"clientId\":\"string\",\"deviceId\":\"string\",\"deviceToken\":\"string\",\"registrationToken\":\"string\",\"transportType\":\"apns\"}}'"
                    },
                    {
                        "id": "java_okhttp",
                        "mimeType": "application/json",
                        "title": "Java + Okhttp",
                        "content": "OkHttpClient client = new OkHttpClient();\n\nMediaType mediaType = MediaType.parse(\"application/json\");\nRequestBody body = RequestBody.create(mediaType, \"{\\\"clientId\\\":\\\"string\\\",\\\"deviceSecret\\\":\\\"string\\\",\\\"formFactor\\\":\\\"phone\\\",\\\"id\\\":\\\"string\\\",\\\"metadata\\\":{},\\\"platform\\\":\\\"ios\\\",\\\"push.recipient\\\":{\\\"clientId\\\":\\\"string\\\",\\\"deviceId\\\":\\\"string\\\",\\\"deviceToken\\\":\\\"string\\\",\\\"registrationToken\\\":\\\"string\\\",\\\"transportType\\\":\\\"apns\\\"}}\");\nRequest request = new Request.Builder()\n  .url(\"https://rest.ably.io/push/deviceRegistrations?format=SOME_STRING_VALUE\")\n  .post(body)\n  .addHeader(\"X-Ably-Version\", \"SOME_STRING_VALUE\")\n  .addHeader(\"Authorization\", \"Basic REPLACE_BASIC_AUTH\")\n  .addHeader(\"content-type\", \"application/json\")\n  .build();\n\nResponse response = client.newCall(request).execute();"
                    },
                    {
                        "id": "node_request",
                        "mimeType": "application/json",
                        "title": "Node + Request",
                        "content": "const request = require('request');\n\nconst options = {\n  method: 'POST',\n  url: 'https://rest.ably.io/push/deviceRegistrations',\n  qs: {format: 'SOME_STRING_VALUE'},\n  headers: {\n    'X-Ably-Version': 'SOME_STRING_VALUE',\n    Authorization: 'Basic REPLACE_BASIC_AUTH',\n    'content-type': 'application/json'\n  },\n  body: {\n    clientId: 'string',\n    deviceSecret: 'string',\n    formFactor: 'phone',\n    id: 'string',\n    metadata: {},\n    platform: 'ios',\n    'push.recipient': {\n      clientId: 'string',\n      deviceId: 'string',\n      deviceToken: 'string',\n      registrationToken: 'string',\n      transportType: 'apns'\n    }\n  },\n  json: true\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
                    },
                    {
                        "id": "python_python3",
                        "mimeType": "application/json",
                        "title": "Python + Python3",
                        "content": "import http.client\n\nconn = http.client.HTTPSConnection(\"rest.ably.io\")\n\npayload = \"{\\\"clientId\\\":\\\"string\\\",\\\"deviceSecret\\\":\\\"string\\\",\\\"formFactor\\\":\\\"phone\\\",\\\"id\\\":\\\"string\\\",\\\"metadata\\\":{},\\\"platform\\\":\\\"ios\\\",\\\"push.recipient\\\":{\\\"clientId\\\":\\\"string\\\",\\\"deviceId\\\":\\\"string\\\",\\\"deviceToken\\\":\\\"string\\\",\\\"registrationToken\\\":\\\"string\\\",\\\"transportType\\\":\\\"apns\\\"}}\"\n\nheaders = {\n    'X-Ably-Version': \"SOME_STRING_VALUE\",\n    'Authorization': \"Basic REPLACE_BASIC_AUTH\",\n    'content-type': \"application/json\"\n    }\n\nconn.request(\"POST\", \"/push/deviceRegistrations?format=SOME_STRING_VALUE\", payload, headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
                    },
                    {
                        "id": "go_native",
                        "mimeType": "application/json",
                        "title": "Go + Native",
                        "content": "package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://rest.ably.io/push/deviceRegistrations?format=SOME_STRING_VALUE\"\n\n\tpayload := strings.NewReader(\"{\\\"clientId\\\":\\\"string\\\",\\\"deviceSecret\\\":\\\"string\\\",\\\"formFactor\\\":\\\"phone\\\",\\\"id\\\":\\\"string\\\",\\\"metadata\\\":{},\\\"platform\\\":\\\"ios\\\",\\\"push.recipient\\\":{\\\"clientId\\\":\\\"string\\\",\\\"deviceId\\\":\\\"string\\\",\\\"deviceToken\\\":\\\"string\\\",\\\"registrationToken\\\":\\\"string\\\",\\\"transportType\\\":\\\"apns\\\"}}\")\n\n\treq, _ := http.NewRequest(\"POST\", url, payload)\n\n\treq.Header.Add(\"X-Ably-Version\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"Authorization\", \"Basic REPLACE_BASIC_AUTH\")\n\treq.Header.Add(\"content-type\", \"application/json\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
                    },
                    {
                        "id": "ruby_native",
                        "mimeType": "application/json",
                        "title": "Ruby + Native",
                        "content": "require 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://rest.ably.io/push/deviceRegistrations?format=SOME_STRING_VALUE\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Post.new(url)\nrequest[\"X-Ably-Version\"] = 'SOME_STRING_VALUE'\nrequest[\"Authorization\"] = 'Basic REPLACE_BASIC_AUTH'\nrequest[\"content-type\"] = 'application/json'\nrequest.body = \"{\\\"clientId\\\":\\\"string\\\",\\\"deviceSecret\\\":\\\"string\\\",\\\"formFactor\\\":\\\"phone\\\",\\\"id\\\":\\\"string\\\",\\\"metadata\\\":{},\\\"platform\\\":\\\"ios\\\",\\\"push.recipient\\\":{\\\"clientId\\\":\\\"string\\\",\\\"deviceId\\\":\\\"string\\\",\\\"deviceToken\\\":\\\"string\\\",\\\"registrationToken\\\":\\\"string\\\",\\\"transportType\\\":\\\"apns\\\"}}\"\n\nresponse = http.request(request)\nputs response.read_body"
                    },
                    {
                        "id": "php_curl",
                        "mimeType": "application/json",
                        "title": "Php + Curl",
                        "content": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n  CURLOPT_URL => \"https://rest.ably.io/push/deviceRegistrations?format=SOME_STRING_VALUE\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"POST\",\n  CURLOPT_POSTFIELDS => \"{\\\"clientId\\\":\\\"string\\\",\\\"deviceSecret\\\":\\\"string\\\",\\\"formFactor\\\":\\\"phone\\\",\\\"id\\\":\\\"string\\\",\\\"metadata\\\":{},\\\"platform\\\":\\\"ios\\\",\\\"push.recipient\\\":{\\\"clientId\\\":\\\"string\\\",\\\"deviceId\\\":\\\"string\\\",\\\"deviceToken\\\":\\\"string\\\",\\\"registrationToken\\\":\\\"string\\\",\\\"transportType\\\":\\\"apns\\\"}}\",\n  CURLOPT_HTTPHEADER => [\n    \"Authorization: Basic REPLACE_BASIC_AUTH\",\n    \"X-Ably-Version: SOME_STRING_VALUE\",\n    \"content-type: application/json\"\n  ],\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
                    },
                    {
                        "id": "swift_nsurlsession",
                        "mimeType": "application/json",
                        "title": "Swift + Nsurlsession",
                        "content": "import Foundation\n\nlet headers = [\n  \"X-Ably-Version\": \"SOME_STRING_VALUE\",\n  \"Authorization\": \"Basic REPLACE_BASIC_AUTH\",\n  \"content-type\": \"application/json\"\n]\nlet parameters = [\n  \"clientId\": \"string\",\n  \"deviceSecret\": \"string\",\n  \"formFactor\": \"phone\",\n  \"id\": \"string\",\n  \"metadata\": [],\n  \"platform\": \"ios\",\n  \"push.recipient\": [\n    \"clientId\": \"string\",\n    \"deviceId\": \"string\",\n    \"deviceToken\": \"string\",\n    \"registrationToken\": \"string\",\n    \"transportType\": \"apns\"\n  ]\n] as [String : Any]\n\nlet postData = JSONSerialization.data(withJSONObject: parameters, options: [])\n\nlet request = NSMutableURLRequest(url: NSURL(string: \"https://rest.ably.io/push/deviceRegistrations?format=SOME_STRING_VALUE\")! as URL,\n                                        cachePolicy: .useProtocolCachePolicy,\n                                    timeoutInterval: 10.0)\nrequest.httpMethod = \"POST\"\nrequest.allHTTPHeaderFields = headers\nrequest.httpBody = postData as Data\n\nlet session = URLSession.shared\nlet dataTask = session.dataTask(with: request as URLRequest, completionHandler: { (data, response, error) -> Void in\n  if (error != nil) {\n    print(error)\n  } else {\n    let httpResponse = response as? HTTPURLResponse\n    print(httpResponse)\n  }\n})\n\ndataTask.resume()"
                    },
                    {
                        "id": "c_libcurl",
                        "mimeType": "application/json",
                        "title": "C + Libcurl",
                        "content": "CURL *hnd = curl_easy_init();\n\ncurl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, \"POST\");\ncurl_easy_setopt(hnd, CURLOPT_URL, \"https://rest.ably.io/push/deviceRegistrations?format=SOME_STRING_VALUE\");\n\nstruct curl_slist *headers = NULL;\nheaders = curl_slist_append(headers, \"X-Ably-Version: SOME_STRING_VALUE\");\nheaders = curl_slist_append(headers, \"Authorization: Basic REPLACE_BASIC_AUTH\");\nheaders = curl_slist_append(headers, \"content-type: application/json\");\ncurl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);\n\ncurl_easy_setopt(hnd, CURLOPT_POSTFIELDS, \"{\\\"clientId\\\":\\\"string\\\",\\\"deviceSecret\\\":\\\"string\\\",\\\"formFactor\\\":\\\"phone\\\",\\\"id\\\":\\\"string\\\",\\\"metadata\\\":{},\\\"platform\\\":\\\"ios\\\",\\\"push.recipient\\\":{\\\"clientId\\\":\\\"string\\\",\\\"deviceId\\\":\\\"string\\\",\\\"deviceToken\\\":\\\"string\\\",\\\"registrationToken\\\":\\\"string\\\",\\\"transportType\\\":\\\"apns\\\"}}\");\n\nCURLcode ret = curl_easy_perform(hnd);"
                    },
                    {
                        "id": "javascript_xhr",
                        "mimeType": "application/json",
                        "title": "Javascript + Xhr",
                        "content": "const data = JSON.stringify({\n  \"clientId\": \"string\",\n  \"deviceSecret\": \"string\",\n  \"formFactor\": \"phone\",\n  \"id\": \"string\",\n  \"metadata\": {},\n  \"platform\": \"ios\",\n  \"push.recipient\": {\n    \"clientId\": \"string\",\n    \"deviceId\": \"string\",\n    \"deviceToken\": \"string\",\n    \"registrationToken\": \"string\",\n    \"transportType\": \"apns\"\n  }\n});\n\nconst xhr = new XMLHttpRequest();\nxhr.withCredentials = true;\n\nxhr.addEventListener(\"readystatechange\", function () {\n  if (this.readyState === this.DONE) {\n    console.log(this.responseText);\n  }\n});\n\nxhr.open(\"POST\", \"https://rest.ably.io/push/deviceRegistrations?format=SOME_STRING_VALUE\");\nxhr.setRequestHeader(\"X-Ably-Version\", \"SOME_STRING_VALUE\");\nxhr.setRequestHeader(\"Authorization\", \"Basic REPLACE_BASIC_AUTH\");\nxhr.setRequestHeader(\"content-type\", \"application/json\");\n\nxhr.send(data);"
                    }
                ]
            }
        },
        "/push/deviceRegistrations/{device_id}": {
            "delete": {
                "description": "Unregisters a single device by its device ID. All its subscriptions for receiving push notifications through channels will also be deleted.",
                "operationId": "unregisterPushDevice",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/deviceId"
                    }
                ],
                "responses": {
                    "2XX": {
                        "description": "OK"
                    },
                    "default": {
                        "$ref": "#/components/responses/Error"
                    }
                },
                "summary": "Unregister a single device for push notifications",
                "tags": [
                    "Push"
                ],
                "api_calls": [
                    {
                        "id": "shell_curl",
                        "title": "Shell + Curl",
                        "content": "curl --request DELETE \\\n  --url 'https://rest.ably.io/push/deviceRegistrations/%7Bdevice_id%7D?format=SOME_STRING_VALUE' \\\n  --header 'Authorization: Basic REPLACE_BASIC_AUTH' \\\n  --header 'X-Ably-Version: SOME_STRING_VALUE'"
                    },
                    {
                        "id": "java_okhttp",
                        "title": "Java + Okhttp",
                        "content": "OkHttpClient client = new OkHttpClient();\n\nRequest request = new Request.Builder()\n  .url(\"https://rest.ably.io/push/deviceRegistrations/%7Bdevice_id%7D?format=SOME_STRING_VALUE\")\n  .delete(null)\n  .addHeader(\"X-Ably-Version\", \"SOME_STRING_VALUE\")\n  .addHeader(\"Authorization\", \"Basic REPLACE_BASIC_AUTH\")\n  .build();\n\nResponse response = client.newCall(request).execute();"
                    },
                    {
                        "id": "node_request",
                        "title": "Node + Request",
                        "content": "const request = require('request');\n\nconst options = {\n  method: 'DELETE',\n  url: 'https://rest.ably.io/push/deviceRegistrations/%7Bdevice_id%7D',\n  qs: {format: 'SOME_STRING_VALUE'},\n  headers: {\n    'X-Ably-Version': 'SOME_STRING_VALUE',\n    Authorization: 'Basic REPLACE_BASIC_AUTH'\n  }\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
                    },
                    {
                        "id": "python_python3",
                        "title": "Python + Python3",
                        "content": "import http.client\n\nconn = http.client.HTTPSConnection(\"rest.ably.io\")\n\nheaders = {\n    'X-Ably-Version': \"SOME_STRING_VALUE\",\n    'Authorization': \"Basic REPLACE_BASIC_AUTH\"\n    }\n\nconn.request(\"DELETE\", \"/push/deviceRegistrations/%7Bdevice_id%7D?format=SOME_STRING_VALUE\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
                    },
                    {
                        "id": "go_native",
                        "title": "Go + Native",
                        "content": "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://rest.ably.io/push/deviceRegistrations/%7Bdevice_id%7D?format=SOME_STRING_VALUE\"\n\n\treq, _ := http.NewRequest(\"DELETE\", url, nil)\n\n\treq.Header.Add(\"X-Ably-Version\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"Authorization\", \"Basic REPLACE_BASIC_AUTH\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
                    },
                    {
                        "id": "ruby_native",
                        "title": "Ruby + Native",
                        "content": "require 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://rest.ably.io/push/deviceRegistrations/%7Bdevice_id%7D?format=SOME_STRING_VALUE\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Delete.new(url)\nrequest[\"X-Ably-Version\"] = 'SOME_STRING_VALUE'\nrequest[\"Authorization\"] = 'Basic REPLACE_BASIC_AUTH'\n\nresponse = http.request(request)\nputs response.read_body"
                    },
                    {
                        "id": "php_curl",
                        "title": "Php + Curl",
                        "content": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n  CURLOPT_URL => \"https://rest.ably.io/push/deviceRegistrations/%7Bdevice_id%7D?format=SOME_STRING_VALUE\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"DELETE\",\n  CURLOPT_HTTPHEADER => [\n    \"Authorization: Basic REPLACE_BASIC_AUTH\",\n    \"X-Ably-Version: SOME_STRING_VALUE\"\n  ],\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
                    },
                    {
                        "id": "swift_nsurlsession",
                        "title": "Swift + Nsurlsession",
                        "content": "import Foundation\n\nlet headers = [\n  \"X-Ably-Version\": \"SOME_STRING_VALUE\",\n  \"Authorization\": \"Basic REPLACE_BASIC_AUTH\"\n]\n\nlet request = NSMutableURLRequest(url: NSURL(string: \"https://rest.ably.io/push/deviceRegistrations/%7Bdevice_id%7D?format=SOME_STRING_VALUE\")! as URL,\n                                        cachePolicy: .useProtocolCachePolicy,\n                                    timeoutInterval: 10.0)\nrequest.httpMethod = \"DELETE\"\nrequest.allHTTPHeaderFields = headers\n\nlet session = URLSession.shared\nlet dataTask = session.dataTask(with: request as URLRequest, completionHandler: { (data, response, error) -> Void in\n  if (error != nil) {\n    print(error)\n  } else {\n    let httpResponse = response as? HTTPURLResponse\n    print(httpResponse)\n  }\n})\n\ndataTask.resume()"
                    },
                    {
                        "id": "c_libcurl",
                        "title": "C + Libcurl",
                        "content": "CURL *hnd = curl_easy_init();\n\ncurl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, \"DELETE\");\ncurl_easy_setopt(hnd, CURLOPT_URL, \"https://rest.ably.io/push/deviceRegistrations/%7Bdevice_id%7D?format=SOME_STRING_VALUE\");\n\nstruct curl_slist *headers = NULL;\nheaders = curl_slist_append(headers, \"X-Ably-Version: SOME_STRING_VALUE\");\nheaders = curl_slist_append(headers, \"Authorization: Basic REPLACE_BASIC_AUTH\");\ncurl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);\n\nCURLcode ret = curl_easy_perform(hnd);"
                    },
                    {
                        "id": "javascript_xhr",
                        "title": "Javascript + Xhr",
                        "content": "const data = null;\n\nconst xhr = new XMLHttpRequest();\nxhr.withCredentials = true;\n\nxhr.addEventListener(\"readystatechange\", function () {\n  if (this.readyState === this.DONE) {\n    console.log(this.responseText);\n  }\n});\n\nxhr.open(\"DELETE\", \"https://rest.ably.io/push/deviceRegistrations/%7Bdevice_id%7D?format=SOME_STRING_VALUE\");\nxhr.setRequestHeader(\"X-Ably-Version\", \"SOME_STRING_VALUE\");\nxhr.setRequestHeader(\"Authorization\", \"Basic REPLACE_BASIC_AUTH\");\n\nxhr.send(data);"
                    }
                ]
            },
            "get": {
                "description": "Get the full details of a device.",
                "operationId": "getPushDeviceDetails",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/deviceId"
                    }
                ],
                "responses": {
                    "2XX": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/DeviceDetails"
                                }
                            },
                            "application/x-msgpack": {
                                "schema": {
                                    "$ref": "#/components/schemas/DeviceDetails"
                                }
                            },
                            "text/html": {
                                "schema": {
                                    "$ref": "#/components/schemas/DeviceDetails"
                                }
                            }
                        },
                        "description": "OK"
                    },
                    "default": {
                        "$ref": "#/components/responses/Error"
                    }
                },
                "summary": "Get a device registration",
                "tags": [
                    "Push"
                ],
                "api_calls": [
                    {
                        "id": "shell_curl",
                        "title": "Shell + Curl",
                        "content": "curl --request GET \\\n  --url 'https://rest.ably.io/push/deviceRegistrations/%7Bdevice_id%7D?format=SOME_STRING_VALUE' \\\n  --header 'Authorization: Basic REPLACE_BASIC_AUTH' \\\n  --header 'X-Ably-Version: SOME_STRING_VALUE'"
                    },
                    {
                        "id": "java_okhttp",
                        "title": "Java + Okhttp",
                        "content": "OkHttpClient client = new OkHttpClient();\n\nRequest request = new Request.Builder()\n  .url(\"https://rest.ably.io/push/deviceRegistrations/%7Bdevice_id%7D?format=SOME_STRING_VALUE\")\n  .get()\n  .addHeader(\"X-Ably-Version\", \"SOME_STRING_VALUE\")\n  .addHeader(\"Authorization\", \"Basic REPLACE_BASIC_AUTH\")\n  .build();\n\nResponse response = client.newCall(request).execute();"
                    },
                    {
                        "id": "node_request",
                        "title": "Node + Request",
                        "content": "const request = require('request');\n\nconst options = {\n  method: 'GET',\n  url: 'https://rest.ably.io/push/deviceRegistrations/%7Bdevice_id%7D',\n  qs: {format: 'SOME_STRING_VALUE'},\n  headers: {\n    'X-Ably-Version': 'SOME_STRING_VALUE',\n    Authorization: 'Basic REPLACE_BASIC_AUTH'\n  }\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
                    },
                    {
                        "id": "python_python3",
                        "title": "Python + Python3",
                        "content": "import http.client\n\nconn = http.client.HTTPSConnection(\"rest.ably.io\")\n\nheaders = {\n    'X-Ably-Version': \"SOME_STRING_VALUE\",\n    'Authorization': \"Basic REPLACE_BASIC_AUTH\"\n    }\n\nconn.request(\"GET\", \"/push/deviceRegistrations/%7Bdevice_id%7D?format=SOME_STRING_VALUE\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
                    },
                    {
                        "id": "go_native",
                        "title": "Go + Native",
                        "content": "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://rest.ably.io/push/deviceRegistrations/%7Bdevice_id%7D?format=SOME_STRING_VALUE\"\n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"X-Ably-Version\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"Authorization\", \"Basic REPLACE_BASIC_AUTH\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
                    },
                    {
                        "id": "ruby_native",
                        "title": "Ruby + Native",
                        "content": "require 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://rest.ably.io/push/deviceRegistrations/%7Bdevice_id%7D?format=SOME_STRING_VALUE\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Get.new(url)\nrequest[\"X-Ably-Version\"] = 'SOME_STRING_VALUE'\nrequest[\"Authorization\"] = 'Basic REPLACE_BASIC_AUTH'\n\nresponse = http.request(request)\nputs response.read_body"
                    },
                    {
                        "id": "php_curl",
                        "title": "Php + Curl",
                        "content": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n  CURLOPT_URL => \"https://rest.ably.io/push/deviceRegistrations/%7Bdevice_id%7D?format=SOME_STRING_VALUE\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"GET\",\n  CURLOPT_HTTPHEADER => [\n    \"Authorization: Basic REPLACE_BASIC_AUTH\",\n    \"X-Ably-Version: SOME_STRING_VALUE\"\n  ],\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
                    },
                    {
                        "id": "swift_nsurlsession",
                        "title": "Swift + Nsurlsession",
                        "content": "import Foundation\n\nlet headers = [\n  \"X-Ably-Version\": \"SOME_STRING_VALUE\",\n  \"Authorization\": \"Basic REPLACE_BASIC_AUTH\"\n]\n\nlet request = NSMutableURLRequest(url: NSURL(string: \"https://rest.ably.io/push/deviceRegistrations/%7Bdevice_id%7D?format=SOME_STRING_VALUE\")! as URL,\n                                        cachePolicy: .useProtocolCachePolicy,\n                                    timeoutInterval: 10.0)\nrequest.httpMethod = \"GET\"\nrequest.allHTTPHeaderFields = headers\n\nlet session = URLSession.shared\nlet dataTask = session.dataTask(with: request as URLRequest, completionHandler: { (data, response, error) -> Void in\n  if (error != nil) {\n    print(error)\n  } else {\n    let httpResponse = response as? HTTPURLResponse\n    print(httpResponse)\n  }\n})\n\ndataTask.resume()"
                    },
                    {
                        "id": "c_libcurl",
                        "title": "C + Libcurl",
                        "content": "CURL *hnd = curl_easy_init();\n\ncurl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, \"GET\");\ncurl_easy_setopt(hnd, CURLOPT_URL, \"https://rest.ably.io/push/deviceRegistrations/%7Bdevice_id%7D?format=SOME_STRING_VALUE\");\n\nstruct curl_slist *headers = NULL;\nheaders = curl_slist_append(headers, \"X-Ably-Version: SOME_STRING_VALUE\");\nheaders = curl_slist_append(headers, \"Authorization: Basic REPLACE_BASIC_AUTH\");\ncurl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);\n\nCURLcode ret = curl_easy_perform(hnd);"
                    },
                    {
                        "id": "javascript_xhr",
                        "title": "Javascript + Xhr",
                        "content": "const data = null;\n\nconst xhr = new XMLHttpRequest();\nxhr.withCredentials = true;\n\nxhr.addEventListener(\"readystatechange\", function () {\n  if (this.readyState === this.DONE) {\n    console.log(this.responseText);\n  }\n});\n\nxhr.open(\"GET\", \"https://rest.ably.io/push/deviceRegistrations/%7Bdevice_id%7D?format=SOME_STRING_VALUE\");\nxhr.setRequestHeader(\"X-Ably-Version\", \"SOME_STRING_VALUE\");\nxhr.setRequestHeader(\"Authorization\", \"Basic REPLACE_BASIC_AUTH\");\n\nxhr.send(data);"
                    }
                ]
            },
            "parameters": [
                {
                    "$ref": "#/components/parameters/versionHeader"
                },
                {
                    "$ref": "#/components/parameters/responseFormat"
                }
            ],
            "patch": {
                "description": "Specific attributes of an existing registration can be updated. Only clientId, metadata and push.recipient are mutable.",
                "operationId": "patchPushDeviceDetails",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/deviceId"
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/DeviceDetails"
                            }
                        },
                        "application/x-msgpack": {
                            "schema": {
                                "$ref": "#/components/schemas/DeviceDetails"
                            }
                        },
                        "application/x-www-form-urlencoded": {
                            "schema": {
                                "$ref": "#/components/schemas/DeviceDetails"
                            }
                        }
                    }
                },
                "responses": {
                    "2XX": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/DeviceDetails"
                                }
                            },
                            "application/x-msgpack": {
                                "schema": {
                                    "$ref": "#/components/schemas/DeviceDetails"
                                }
                            },
                            "text/html": {
                                "schema": {
                                    "$ref": "#/components/schemas/DeviceDetails"
                                }
                            }
                        },
                        "description": "OK"
                    },
                    "default": {
                        "$ref": "#/components/responses/Error"
                    }
                },
                "summary": "Update a device registration",
                "tags": [
                    "Push"
                ],
                "api_calls": [
                    {
                        "id": "shell_curl",
                        "mimeType": "application/json",
                        "title": "Shell + Curl",
                        "content": "curl --request PATCH \\\n  --url 'https://rest.ably.io/push/deviceRegistrations/%7Bdevice_id%7D?format=SOME_STRING_VALUE' \\\n  --header 'Authorization: Basic REPLACE_BASIC_AUTH' \\\n  --header 'X-Ably-Version: SOME_STRING_VALUE' \\\n  --header 'content-type: application/json' \\\n  --data '{\"clientId\":\"string\",\"deviceSecret\":\"string\",\"formFactor\":\"phone\",\"id\":\"string\",\"metadata\":{},\"platform\":\"ios\",\"push.recipient\":{\"clientId\":\"string\",\"deviceId\":\"string\",\"deviceToken\":\"string\",\"registrationToken\":\"string\",\"transportType\":\"apns\"}}'"
                    },
                    {
                        "id": "java_okhttp",
                        "mimeType": "application/json",
                        "title": "Java + Okhttp",
                        "content": "OkHttpClient client = new OkHttpClient();\n\nMediaType mediaType = MediaType.parse(\"application/json\");\nRequestBody body = RequestBody.create(mediaType, \"{\\\"clientId\\\":\\\"string\\\",\\\"deviceSecret\\\":\\\"string\\\",\\\"formFactor\\\":\\\"phone\\\",\\\"id\\\":\\\"string\\\",\\\"metadata\\\":{},\\\"platform\\\":\\\"ios\\\",\\\"push.recipient\\\":{\\\"clientId\\\":\\\"string\\\",\\\"deviceId\\\":\\\"string\\\",\\\"deviceToken\\\":\\\"string\\\",\\\"registrationToken\\\":\\\"string\\\",\\\"transportType\\\":\\\"apns\\\"}}\");\nRequest request = new Request.Builder()\n  .url(\"https://rest.ably.io/push/deviceRegistrations/%7Bdevice_id%7D?format=SOME_STRING_VALUE\")\n  .patch(body)\n  .addHeader(\"X-Ably-Version\", \"SOME_STRING_VALUE\")\n  .addHeader(\"Authorization\", \"Basic REPLACE_BASIC_AUTH\")\n  .addHeader(\"content-type\", \"application/json\")\n  .build();\n\nResponse response = client.newCall(request).execute();"
                    },
                    {
                        "id": "node_request",
                        "mimeType": "application/json",
                        "title": "Node + Request",
                        "content": "const request = require('request');\n\nconst options = {\n  method: 'PATCH',\n  url: 'https://rest.ably.io/push/deviceRegistrations/%7Bdevice_id%7D',\n  qs: {format: 'SOME_STRING_VALUE'},\n  headers: {\n    'X-Ably-Version': 'SOME_STRING_VALUE',\n    Authorization: 'Basic REPLACE_BASIC_AUTH',\n    'content-type': 'application/json'\n  },\n  body: {\n    clientId: 'string',\n    deviceSecret: 'string',\n    formFactor: 'phone',\n    id: 'string',\n    metadata: {},\n    platform: 'ios',\n    'push.recipient': {\n      clientId: 'string',\n      deviceId: 'string',\n      deviceToken: 'string',\n      registrationToken: 'string',\n      transportType: 'apns'\n    }\n  },\n  json: true\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
                    },
                    {
                        "id": "python_python3",
                        "mimeType": "application/json",
                        "title": "Python + Python3",
                        "content": "import http.client\n\nconn = http.client.HTTPSConnection(\"rest.ably.io\")\n\npayload = \"{\\\"clientId\\\":\\\"string\\\",\\\"deviceSecret\\\":\\\"string\\\",\\\"formFactor\\\":\\\"phone\\\",\\\"id\\\":\\\"string\\\",\\\"metadata\\\":{},\\\"platform\\\":\\\"ios\\\",\\\"push.recipient\\\":{\\\"clientId\\\":\\\"string\\\",\\\"deviceId\\\":\\\"string\\\",\\\"deviceToken\\\":\\\"string\\\",\\\"registrationToken\\\":\\\"string\\\",\\\"transportType\\\":\\\"apns\\\"}}\"\n\nheaders = {\n    'X-Ably-Version': \"SOME_STRING_VALUE\",\n    'Authorization': \"Basic REPLACE_BASIC_AUTH\",\n    'content-type': \"application/json\"\n    }\n\nconn.request(\"PATCH\", \"/push/deviceRegistrations/%7Bdevice_id%7D?format=SOME_STRING_VALUE\", payload, headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
                    },
                    {
                        "id": "go_native",
                        "mimeType": "application/json",
                        "title": "Go + Native",
                        "content": "package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://rest.ably.io/push/deviceRegistrations/%7Bdevice_id%7D?format=SOME_STRING_VALUE\"\n\n\tpayload := strings.NewReader(\"{\\\"clientId\\\":\\\"string\\\",\\\"deviceSecret\\\":\\\"string\\\",\\\"formFactor\\\":\\\"phone\\\",\\\"id\\\":\\\"string\\\",\\\"metadata\\\":{},\\\"platform\\\":\\\"ios\\\",\\\"push.recipient\\\":{\\\"clientId\\\":\\\"string\\\",\\\"deviceId\\\":\\\"string\\\",\\\"deviceToken\\\":\\\"string\\\",\\\"registrationToken\\\":\\\"string\\\",\\\"transportType\\\":\\\"apns\\\"}}\")\n\n\treq, _ := http.NewRequest(\"PATCH\", url, payload)\n\n\treq.Header.Add(\"X-Ably-Version\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"Authorization\", \"Basic REPLACE_BASIC_AUTH\")\n\treq.Header.Add(\"content-type\", \"application/json\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
                    },
                    {
                        "id": "ruby_native",
                        "mimeType": "application/json",
                        "title": "Ruby + Native",
                        "content": "require 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://rest.ably.io/push/deviceRegistrations/%7Bdevice_id%7D?format=SOME_STRING_VALUE\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Patch.new(url)\nrequest[\"X-Ably-Version\"] = 'SOME_STRING_VALUE'\nrequest[\"Authorization\"] = 'Basic REPLACE_BASIC_AUTH'\nrequest[\"content-type\"] = 'application/json'\nrequest.body = \"{\\\"clientId\\\":\\\"string\\\",\\\"deviceSecret\\\":\\\"string\\\",\\\"formFactor\\\":\\\"phone\\\",\\\"id\\\":\\\"string\\\",\\\"metadata\\\":{},\\\"platform\\\":\\\"ios\\\",\\\"push.recipient\\\":{\\\"clientId\\\":\\\"string\\\",\\\"deviceId\\\":\\\"string\\\",\\\"deviceToken\\\":\\\"string\\\",\\\"registrationToken\\\":\\\"string\\\",\\\"transportType\\\":\\\"apns\\\"}}\"\n\nresponse = http.request(request)\nputs response.read_body"
                    },
                    {
                        "id": "php_curl",
                        "mimeType": "application/json",
                        "title": "Php + Curl",
                        "content": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n  CURLOPT_URL => \"https://rest.ably.io/push/deviceRegistrations/%7Bdevice_id%7D?format=SOME_STRING_VALUE\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"PATCH\",\n  CURLOPT_POSTFIELDS => \"{\\\"clientId\\\":\\\"string\\\",\\\"deviceSecret\\\":\\\"string\\\",\\\"formFactor\\\":\\\"phone\\\",\\\"id\\\":\\\"string\\\",\\\"metadata\\\":{},\\\"platform\\\":\\\"ios\\\",\\\"push.recipient\\\":{\\\"clientId\\\":\\\"string\\\",\\\"deviceId\\\":\\\"string\\\",\\\"deviceToken\\\":\\\"string\\\",\\\"registrationToken\\\":\\\"string\\\",\\\"transportType\\\":\\\"apns\\\"}}\",\n  CURLOPT_HTTPHEADER => [\n    \"Authorization: Basic REPLACE_BASIC_AUTH\",\n    \"X-Ably-Version: SOME_STRING_VALUE\",\n    \"content-type: application/json\"\n  ],\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
                    },
                    {
                        "id": "swift_nsurlsession",
                        "mimeType": "application/json",
                        "title": "Swift + Nsurlsession",
                        "content": "import Foundation\n\nlet headers = [\n  \"X-Ably-Version\": \"SOME_STRING_VALUE\",\n  \"Authorization\": \"Basic REPLACE_BASIC_AUTH\",\n  \"content-type\": \"application/json\"\n]\nlet parameters = [\n  \"clientId\": \"string\",\n  \"deviceSecret\": \"string\",\n  \"formFactor\": \"phone\",\n  \"id\": \"string\",\n  \"metadata\": [],\n  \"platform\": \"ios\",\n  \"push.recipient\": [\n    \"clientId\": \"string\",\n    \"deviceId\": \"string\",\n    \"deviceToken\": \"string\",\n    \"registrationToken\": \"string\",\n    \"transportType\": \"apns\"\n  ]\n] as [String : Any]\n\nlet postData = JSONSerialization.data(withJSONObject: parameters, options: [])\n\nlet request = NSMutableURLRequest(url: NSURL(string: \"https://rest.ably.io/push/deviceRegistrations/%7Bdevice_id%7D?format=SOME_STRING_VALUE\")! as URL,\n                                        cachePolicy: .useProtocolCachePolicy,\n                                    timeoutInterval: 10.0)\nrequest.httpMethod = \"PATCH\"\nrequest.allHTTPHeaderFields = headers\nrequest.httpBody = postData as Data\n\nlet session = URLSession.shared\nlet dataTask = session.dataTask(with: request as URLRequest, completionHandler: { (data, response, error) -> Void in\n  if (error != nil) {\n    print(error)\n  } else {\n    let httpResponse = response as? HTTPURLResponse\n    print(httpResponse)\n  }\n})\n\ndataTask.resume()"
                    },
                    {
                        "id": "c_libcurl",
                        "mimeType": "application/json",
                        "title": "C + Libcurl",
                        "content": "CURL *hnd = curl_easy_init();\n\ncurl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, \"PATCH\");\ncurl_easy_setopt(hnd, CURLOPT_URL, \"https://rest.ably.io/push/deviceRegistrations/%7Bdevice_id%7D?format=SOME_STRING_VALUE\");\n\nstruct curl_slist *headers = NULL;\nheaders = curl_slist_append(headers, \"X-Ably-Version: SOME_STRING_VALUE\");\nheaders = curl_slist_append(headers, \"Authorization: Basic REPLACE_BASIC_AUTH\");\nheaders = curl_slist_append(headers, \"content-type: application/json\");\ncurl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);\n\ncurl_easy_setopt(hnd, CURLOPT_POSTFIELDS, \"{\\\"clientId\\\":\\\"string\\\",\\\"deviceSecret\\\":\\\"string\\\",\\\"formFactor\\\":\\\"phone\\\",\\\"id\\\":\\\"string\\\",\\\"metadata\\\":{},\\\"platform\\\":\\\"ios\\\",\\\"push.recipient\\\":{\\\"clientId\\\":\\\"string\\\",\\\"deviceId\\\":\\\"string\\\",\\\"deviceToken\\\":\\\"string\\\",\\\"registrationToken\\\":\\\"string\\\",\\\"transportType\\\":\\\"apns\\\"}}\");\n\nCURLcode ret = curl_easy_perform(hnd);"
                    },
                    {
                        "id": "javascript_xhr",
                        "mimeType": "application/json",
                        "title": "Javascript + Xhr",
                        "content": "const data = JSON.stringify({\n  \"clientId\": \"string\",\n  \"deviceSecret\": \"string\",\n  \"formFactor\": \"phone\",\n  \"id\": \"string\",\n  \"metadata\": {},\n  \"platform\": \"ios\",\n  \"push.recipient\": {\n    \"clientId\": \"string\",\n    \"deviceId\": \"string\",\n    \"deviceToken\": \"string\",\n    \"registrationToken\": \"string\",\n    \"transportType\": \"apns\"\n  }\n});\n\nconst xhr = new XMLHttpRequest();\nxhr.withCredentials = true;\n\nxhr.addEventListener(\"readystatechange\", function () {\n  if (this.readyState === this.DONE) {\n    console.log(this.responseText);\n  }\n});\n\nxhr.open(\"PATCH\", \"https://rest.ably.io/push/deviceRegistrations/%7Bdevice_id%7D?format=SOME_STRING_VALUE\");\nxhr.setRequestHeader(\"X-Ably-Version\", \"SOME_STRING_VALUE\");\nxhr.setRequestHeader(\"Authorization\", \"Basic REPLACE_BASIC_AUTH\");\nxhr.setRequestHeader(\"content-type\", \"application/json\");\n\nxhr.send(data);"
                    },
                    {
                        "id": "shell_curl",
                        "mimeType": "application/x-www-form-urlencoded",
                        "title": "Shell + Curl",
                        "content": "curl --request PATCH \\\n  --url 'https://rest.ably.io/push/deviceRegistrations/%7Bdevice_id%7D?format=SOME_STRING_VALUE' \\\n  --header 'Authorization: Basic REPLACE_BASIC_AUTH' \\\n  --header 'X-Ably-Version: SOME_STRING_VALUE' \\\n  --header 'content-type: application/x-www-form-urlencoded' \\\n  --data clientId=string \\\n  --data deviceSecret=string \\\n  --data formFactor=phone \\\n  --data id=string \\\n  --data 'metadata=%5Bobject+Object%5D' \\\n  --data platform=ios \\\n  --data 'push.recipient=%5Bobject+Object%5D'"
                    },
                    {
                        "id": "java_okhttp",
                        "mimeType": "application/x-www-form-urlencoded",
                        "title": "Java + Okhttp",
                        "content": "OkHttpClient client = new OkHttpClient();\n\nMediaType mediaType = MediaType.parse(\"application/x-www-form-urlencoded\");\nRequestBody body = RequestBody.create(mediaType, \"clientId=string&deviceSecret=string&formFactor=phone&id=string&metadata=%255Bobject%2BObject%255D&platform=ios&push.recipient=%255Bobject%2BObject%255D\");\nRequest request = new Request.Builder()\n  .url(\"https://rest.ably.io/push/deviceRegistrations/%7Bdevice_id%7D?format=SOME_STRING_VALUE\")\n  .patch(body)\n  .addHeader(\"X-Ably-Version\", \"SOME_STRING_VALUE\")\n  .addHeader(\"Authorization\", \"Basic REPLACE_BASIC_AUTH\")\n  .addHeader(\"content-type\", \"application/x-www-form-urlencoded\")\n  .build();\n\nResponse response = client.newCall(request).execute();"
                    },
                    {
                        "id": "node_request",
                        "mimeType": "application/x-www-form-urlencoded",
                        "title": "Node + Request",
                        "content": "const request = require('request');\n\nconst options = {\n  method: 'PATCH',\n  url: 'https://rest.ably.io/push/deviceRegistrations/%7Bdevice_id%7D',\n  qs: {format: 'SOME_STRING_VALUE'},\n  headers: {\n    'X-Ably-Version': 'SOME_STRING_VALUE',\n    Authorization: 'Basic REPLACE_BASIC_AUTH',\n    'content-type': 'application/x-www-form-urlencoded'\n  },\n  form: {\n    clientId: 'string',\n    deviceSecret: 'string',\n    formFactor: 'phone',\n    id: 'string',\n    metadata: '%5Bobject+Object%5D',\n    platform: 'ios',\n    'push.recipient': '%5Bobject+Object%5D'\n  }\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
                    },
                    {
                        "id": "python_python3",
                        "mimeType": "application/x-www-form-urlencoded",
                        "title": "Python + Python3",
                        "content": "import http.client\n\nconn = http.client.HTTPSConnection(\"rest.ably.io\")\n\npayload = \"clientId=string&deviceSecret=string&formFactor=phone&id=string&metadata=%255Bobject%2BObject%255D&platform=ios&push.recipient=%255Bobject%2BObject%255D\"\n\nheaders = {\n    'X-Ably-Version': \"SOME_STRING_VALUE\",\n    'Authorization': \"Basic REPLACE_BASIC_AUTH\",\n    'content-type': \"application/x-www-form-urlencoded\"\n    }\n\nconn.request(\"PATCH\", \"/push/deviceRegistrations/%7Bdevice_id%7D?format=SOME_STRING_VALUE\", payload, headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
                    },
                    {
                        "id": "go_native",
                        "mimeType": "application/x-www-form-urlencoded",
                        "title": "Go + Native",
                        "content": "package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://rest.ably.io/push/deviceRegistrations/%7Bdevice_id%7D?format=SOME_STRING_VALUE\"\n\n\tpayload := strings.NewReader(\"clientId=string&deviceSecret=string&formFactor=phone&id=string&metadata=%255Bobject%2BObject%255D&platform=ios&push.recipient=%255Bobject%2BObject%255D\")\n\n\treq, _ := http.NewRequest(\"PATCH\", url, payload)\n\n\treq.Header.Add(\"X-Ably-Version\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"Authorization\", \"Basic REPLACE_BASIC_AUTH\")\n\treq.Header.Add(\"content-type\", \"application/x-www-form-urlencoded\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
                    },
                    {
                        "id": "ruby_native",
                        "mimeType": "application/x-www-form-urlencoded",
                        "title": "Ruby + Native",
                        "content": "require 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://rest.ably.io/push/deviceRegistrations/%7Bdevice_id%7D?format=SOME_STRING_VALUE\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Patch.new(url)\nrequest[\"X-Ably-Version\"] = 'SOME_STRING_VALUE'\nrequest[\"Authorization\"] = 'Basic REPLACE_BASIC_AUTH'\nrequest[\"content-type\"] = 'application/x-www-form-urlencoded'\nrequest.body = \"clientId=string&deviceSecret=string&formFactor=phone&id=string&metadata=%255Bobject%2BObject%255D&platform=ios&push.recipient=%255Bobject%2BObject%255D\"\n\nresponse = http.request(request)\nputs response.read_body"
                    },
                    {
                        "id": "php_curl",
                        "mimeType": "application/x-www-form-urlencoded",
                        "title": "Php + Curl",
                        "content": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n  CURLOPT_URL => \"https://rest.ably.io/push/deviceRegistrations/%7Bdevice_id%7D?format=SOME_STRING_VALUE\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"PATCH\",\n  CURLOPT_POSTFIELDS => \"clientId=string&deviceSecret=string&formFactor=phone&id=string&metadata=%255Bobject%2BObject%255D&platform=ios&push.recipient=%255Bobject%2BObject%255D\",\n  CURLOPT_HTTPHEADER => [\n    \"Authorization: Basic REPLACE_BASIC_AUTH\",\n    \"X-Ably-Version: SOME_STRING_VALUE\",\n    \"content-type: application/x-www-form-urlencoded\"\n  ],\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
                    },
                    {
                        "id": "swift_nsurlsession",
                        "mimeType": "application/x-www-form-urlencoded",
                        "title": "Swift + Nsurlsession",
                        "content": "import Foundation\n\nlet headers = [\n  \"X-Ably-Version\": \"SOME_STRING_VALUE\",\n  \"Authorization\": \"Basic REPLACE_BASIC_AUTH\",\n  \"content-type\": \"application/x-www-form-urlencoded\"\n]\n\nlet postData = NSMutableData(data: \"clientId=string\".data(using: String.Encoding.utf8)!)\npostData.append(\"&deviceSecret=string\".data(using: String.Encoding.utf8)!)\npostData.append(\"&formFactor=phone\".data(using: String.Encoding.utf8)!)\npostData.append(\"&id=string\".data(using: String.Encoding.utf8)!)\npostData.append(\"&metadata=%5Bobject+Object%5D\".data(using: String.Encoding.utf8)!)\npostData.append(\"&platform=ios\".data(using: String.Encoding.utf8)!)\npostData.append(\"&push.recipient=%5Bobject+Object%5D\".data(using: String.Encoding.utf8)!)\n\nlet request = NSMutableURLRequest(url: NSURL(string: \"https://rest.ably.io/push/deviceRegistrations/%7Bdevice_id%7D?format=SOME_STRING_VALUE\")! as URL,\n                                        cachePolicy: .useProtocolCachePolicy,\n                                    timeoutInterval: 10.0)\nrequest.httpMethod = \"PATCH\"\nrequest.allHTTPHeaderFields = headers\nrequest.httpBody = postData as Data\n\nlet session = URLSession.shared\nlet dataTask = session.dataTask(with: request as URLRequest, completionHandler: { (data, response, error) -> Void in\n  if (error != nil) {\n    print(error)\n  } else {\n    let httpResponse = response as? HTTPURLResponse\n    print(httpResponse)\n  }\n})\n\ndataTask.resume()"
                    },
                    {
                        "id": "c_libcurl",
                        "mimeType": "application/x-www-form-urlencoded",
                        "title": "C + Libcurl",
                        "content": "CURL *hnd = curl_easy_init();\n\ncurl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, \"PATCH\");\ncurl_easy_setopt(hnd, CURLOPT_URL, \"https://rest.ably.io/push/deviceRegistrations/%7Bdevice_id%7D?format=SOME_STRING_VALUE\");\n\nstruct curl_slist *headers = NULL;\nheaders = curl_slist_append(headers, \"X-Ably-Version: SOME_STRING_VALUE\");\nheaders = curl_slist_append(headers, \"Authorization: Basic REPLACE_BASIC_AUTH\");\nheaders = curl_slist_append(headers, \"content-type: application/x-www-form-urlencoded\");\ncurl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);\n\ncurl_easy_setopt(hnd, CURLOPT_POSTFIELDS, \"clientId=string&deviceSecret=string&formFactor=phone&id=string&metadata=%255Bobject%2BObject%255D&platform=ios&push.recipient=%255Bobject%2BObject%255D\");\n\nCURLcode ret = curl_easy_perform(hnd);"
                    },
                    {
                        "id": "javascript_xhr",
                        "mimeType": "application/x-www-form-urlencoded",
                        "title": "Javascript + Xhr",
                        "content": "const data = \"clientId=string&deviceSecret=string&formFactor=phone&id=string&metadata=%255Bobject%2BObject%255D&platform=ios&push.recipient=%255Bobject%2BObject%255D\";\n\nconst xhr = new XMLHttpRequest();\nxhr.withCredentials = true;\n\nxhr.addEventListener(\"readystatechange\", function () {\n  if (this.readyState === this.DONE) {\n    console.log(this.responseText);\n  }\n});\n\nxhr.open(\"PATCH\", \"https://rest.ably.io/push/deviceRegistrations/%7Bdevice_id%7D?format=SOME_STRING_VALUE\");\nxhr.setRequestHeader(\"X-Ably-Version\", \"SOME_STRING_VALUE\");\nxhr.setRequestHeader(\"Authorization\", \"Basic REPLACE_BASIC_AUTH\");\nxhr.setRequestHeader(\"content-type\", \"application/x-www-form-urlencoded\");\n\nxhr.send(data);"
                    }
                ]
            },
            "put": {
                "description": "Device registrations can be upserted (the existing registration is replaced entirely) with a PUT operation. Only clientId, metadata and push.recipient are mutable.",
                "operationId": "putPushDeviceDetails",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/deviceId"
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/DeviceDetails"
                            }
                        },
                        "application/x-msgpack": {
                            "schema": {
                                "$ref": "#/components/schemas/DeviceDetails"
                            }
                        },
                        "application/x-www-form-urlencoded": {
                            "schema": {
                                "$ref": "#/components/schemas/DeviceDetails"
                            }
                        }
                    }
                },
                "responses": {
                    "2XX": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/DeviceDetails"
                                }
                            },
                            "application/x-msgpack": {
                                "schema": {
                                    "$ref": "#/components/schemas/DeviceDetails"
                                }
                            },
                            "text/html": {
                                "schema": {
                                    "$ref": "#/components/schemas/DeviceDetails"
                                }
                            }
                        },
                        "description": "OK"
                    },
                    "default": {
                        "$ref": "#/components/responses/Error"
                    }
                },
                "summary": "Update a device registration",
                "tags": [
                    "Push"
                ],
                "api_calls": [
                    {
                        "id": "shell_curl",
                        "mimeType": "application/json",
                        "title": "Shell + Curl",
                        "content": "curl --request PUT \\\n  --url 'https://rest.ably.io/push/deviceRegistrations/%7Bdevice_id%7D?format=SOME_STRING_VALUE' \\\n  --header 'Authorization: Basic REPLACE_BASIC_AUTH' \\\n  --header 'X-Ably-Version: SOME_STRING_VALUE' \\\n  --header 'content-type: application/json' \\\n  --data '{\"clientId\":\"string\",\"deviceSecret\":\"string\",\"formFactor\":\"phone\",\"id\":\"string\",\"metadata\":{},\"platform\":\"ios\",\"push.recipient\":{\"clientId\":\"string\",\"deviceId\":\"string\",\"deviceToken\":\"string\",\"registrationToken\":\"string\",\"transportType\":\"apns\"}}'"
                    },
                    {
                        "id": "java_okhttp",
                        "mimeType": "application/json",
                        "title": "Java + Okhttp",
                        "content": "OkHttpClient client = new OkHttpClient();\n\nMediaType mediaType = MediaType.parse(\"application/json\");\nRequestBody body = RequestBody.create(mediaType, \"{\\\"clientId\\\":\\\"string\\\",\\\"deviceSecret\\\":\\\"string\\\",\\\"formFactor\\\":\\\"phone\\\",\\\"id\\\":\\\"string\\\",\\\"metadata\\\":{},\\\"platform\\\":\\\"ios\\\",\\\"push.recipient\\\":{\\\"clientId\\\":\\\"string\\\",\\\"deviceId\\\":\\\"string\\\",\\\"deviceToken\\\":\\\"string\\\",\\\"registrationToken\\\":\\\"string\\\",\\\"transportType\\\":\\\"apns\\\"}}\");\nRequest request = new Request.Builder()\n  .url(\"https://rest.ably.io/push/deviceRegistrations/%7Bdevice_id%7D?format=SOME_STRING_VALUE\")\n  .put(body)\n  .addHeader(\"X-Ably-Version\", \"SOME_STRING_VALUE\")\n  .addHeader(\"Authorization\", \"Basic REPLACE_BASIC_AUTH\")\n  .addHeader(\"content-type\", \"application/json\")\n  .build();\n\nResponse response = client.newCall(request).execute();"
                    },
                    {
                        "id": "node_request",
                        "mimeType": "application/json",
                        "title": "Node + Request",
                        "content": "const request = require('request');\n\nconst options = {\n  method: 'PUT',\n  url: 'https://rest.ably.io/push/deviceRegistrations/%7Bdevice_id%7D',\n  qs: {format: 'SOME_STRING_VALUE'},\n  headers: {\n    'X-Ably-Version': 'SOME_STRING_VALUE',\n    Authorization: 'Basic REPLACE_BASIC_AUTH',\n    'content-type': 'application/json'\n  },\n  body: {\n    clientId: 'string',\n    deviceSecret: 'string',\n    formFactor: 'phone',\n    id: 'string',\n    metadata: {},\n    platform: 'ios',\n    'push.recipient': {\n      clientId: 'string',\n      deviceId: 'string',\n      deviceToken: 'string',\n      registrationToken: 'string',\n      transportType: 'apns'\n    }\n  },\n  json: true\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
                    },
                    {
                        "id": "python_python3",
                        "mimeType": "application/json",
                        "title": "Python + Python3",
                        "content": "import http.client\n\nconn = http.client.HTTPSConnection(\"rest.ably.io\")\n\npayload = \"{\\\"clientId\\\":\\\"string\\\",\\\"deviceSecret\\\":\\\"string\\\",\\\"formFactor\\\":\\\"phone\\\",\\\"id\\\":\\\"string\\\",\\\"metadata\\\":{},\\\"platform\\\":\\\"ios\\\",\\\"push.recipient\\\":{\\\"clientId\\\":\\\"string\\\",\\\"deviceId\\\":\\\"string\\\",\\\"deviceToken\\\":\\\"string\\\",\\\"registrationToken\\\":\\\"string\\\",\\\"transportType\\\":\\\"apns\\\"}}\"\n\nheaders = {\n    'X-Ably-Version': \"SOME_STRING_VALUE\",\n    'Authorization': \"Basic REPLACE_BASIC_AUTH\",\n    'content-type': \"application/json\"\n    }\n\nconn.request(\"PUT\", \"/push/deviceRegistrations/%7Bdevice_id%7D?format=SOME_STRING_VALUE\", payload, headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
                    },
                    {
                        "id": "go_native",
                        "mimeType": "application/json",
                        "title": "Go + Native",
                        "content": "package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://rest.ably.io/push/deviceRegistrations/%7Bdevice_id%7D?format=SOME_STRING_VALUE\"\n\n\tpayload := strings.NewReader(\"{\\\"clientId\\\":\\\"string\\\",\\\"deviceSecret\\\":\\\"string\\\",\\\"formFactor\\\":\\\"phone\\\",\\\"id\\\":\\\"string\\\",\\\"metadata\\\":{},\\\"platform\\\":\\\"ios\\\",\\\"push.recipient\\\":{\\\"clientId\\\":\\\"string\\\",\\\"deviceId\\\":\\\"string\\\",\\\"deviceToken\\\":\\\"string\\\",\\\"registrationToken\\\":\\\"string\\\",\\\"transportType\\\":\\\"apns\\\"}}\")\n\n\treq, _ := http.NewRequest(\"PUT\", url, payload)\n\n\treq.Header.Add(\"X-Ably-Version\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"Authorization\", \"Basic REPLACE_BASIC_AUTH\")\n\treq.Header.Add(\"content-type\", \"application/json\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
                    },
                    {
                        "id": "ruby_native",
                        "mimeType": "application/json",
                        "title": "Ruby + Native",
                        "content": "require 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://rest.ably.io/push/deviceRegistrations/%7Bdevice_id%7D?format=SOME_STRING_VALUE\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Put.new(url)\nrequest[\"X-Ably-Version\"] = 'SOME_STRING_VALUE'\nrequest[\"Authorization\"] = 'Basic REPLACE_BASIC_AUTH'\nrequest[\"content-type\"] = 'application/json'\nrequest.body = \"{\\\"clientId\\\":\\\"string\\\",\\\"deviceSecret\\\":\\\"string\\\",\\\"formFactor\\\":\\\"phone\\\",\\\"id\\\":\\\"string\\\",\\\"metadata\\\":{},\\\"platform\\\":\\\"ios\\\",\\\"push.recipient\\\":{\\\"clientId\\\":\\\"string\\\",\\\"deviceId\\\":\\\"string\\\",\\\"deviceToken\\\":\\\"string\\\",\\\"registrationToken\\\":\\\"string\\\",\\\"transportType\\\":\\\"apns\\\"}}\"\n\nresponse = http.request(request)\nputs response.read_body"
                    },
                    {
                        "id": "php_curl",
                        "mimeType": "application/json",
                        "title": "Php + Curl",
                        "content": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n  CURLOPT_URL => \"https://rest.ably.io/push/deviceRegistrations/%7Bdevice_id%7D?format=SOME_STRING_VALUE\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"PUT\",\n  CURLOPT_POSTFIELDS => \"{\\\"clientId\\\":\\\"string\\\",\\\"deviceSecret\\\":\\\"string\\\",\\\"formFactor\\\":\\\"phone\\\",\\\"id\\\":\\\"string\\\",\\\"metadata\\\":{},\\\"platform\\\":\\\"ios\\\",\\\"push.recipient\\\":{\\\"clientId\\\":\\\"string\\\",\\\"deviceId\\\":\\\"string\\\",\\\"deviceToken\\\":\\\"string\\\",\\\"registrationToken\\\":\\\"string\\\",\\\"transportType\\\":\\\"apns\\\"}}\",\n  CURLOPT_HTTPHEADER => [\n    \"Authorization: Basic REPLACE_BASIC_AUTH\",\n    \"X-Ably-Version: SOME_STRING_VALUE\",\n    \"content-type: application/json\"\n  ],\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
                    },
                    {
                        "id": "swift_nsurlsession",
                        "mimeType": "application/json",
                        "title": "Swift + Nsurlsession",
                        "content": "import Foundation\n\nlet headers = [\n  \"X-Ably-Version\": \"SOME_STRING_VALUE\",\n  \"Authorization\": \"Basic REPLACE_BASIC_AUTH\",\n  \"content-type\": \"application/json\"\n]\nlet parameters = [\n  \"clientId\": \"string\",\n  \"deviceSecret\": \"string\",\n  \"formFactor\": \"phone\",\n  \"id\": \"string\",\n  \"metadata\": [],\n  \"platform\": \"ios\",\n  \"push.recipient\": [\n    \"clientId\": \"string\",\n    \"deviceId\": \"string\",\n    \"deviceToken\": \"string\",\n    \"registrationToken\": \"string\",\n    \"transportType\": \"apns\"\n  ]\n] as [String : Any]\n\nlet postData = JSONSerialization.data(withJSONObject: parameters, options: [])\n\nlet request = NSMutableURLRequest(url: NSURL(string: \"https://rest.ably.io/push/deviceRegistrations/%7Bdevice_id%7D?format=SOME_STRING_VALUE\")! as URL,\n                                        cachePolicy: .useProtocolCachePolicy,\n                                    timeoutInterval: 10.0)\nrequest.httpMethod = \"PUT\"\nrequest.allHTTPHeaderFields = headers\nrequest.httpBody = postData as Data\n\nlet session = URLSession.shared\nlet dataTask = session.dataTask(with: request as URLRequest, completionHandler: { (data, response, error) -> Void in\n  if (error != nil) {\n    print(error)\n  } else {\n    let httpResponse = response as? HTTPURLResponse\n    print(httpResponse)\n  }\n})\n\ndataTask.resume()"
                    },
                    {
                        "id": "c_libcurl",
                        "mimeType": "application/json",
                        "title": "C + Libcurl",
                        "content": "CURL *hnd = curl_easy_init();\n\ncurl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, \"PUT\");\ncurl_easy_setopt(hnd, CURLOPT_URL, \"https://rest.ably.io/push/deviceRegistrations/%7Bdevice_id%7D?format=SOME_STRING_VALUE\");\n\nstruct curl_slist *headers = NULL;\nheaders = curl_slist_append(headers, \"X-Ably-Version: SOME_STRING_VALUE\");\nheaders = curl_slist_append(headers, \"Authorization: Basic REPLACE_BASIC_AUTH\");\nheaders = curl_slist_append(headers, \"content-type: application/json\");\ncurl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);\n\ncurl_easy_setopt(hnd, CURLOPT_POSTFIELDS, \"{\\\"clientId\\\":\\\"string\\\",\\\"deviceSecret\\\":\\\"string\\\",\\\"formFactor\\\":\\\"phone\\\",\\\"id\\\":\\\"string\\\",\\\"metadata\\\":{},\\\"platform\\\":\\\"ios\\\",\\\"push.recipient\\\":{\\\"clientId\\\":\\\"string\\\",\\\"deviceId\\\":\\\"string\\\",\\\"deviceToken\\\":\\\"string\\\",\\\"registrationToken\\\":\\\"string\\\",\\\"transportType\\\":\\\"apns\\\"}}\");\n\nCURLcode ret = curl_easy_perform(hnd);"
                    },
                    {
                        "id": "javascript_xhr",
                        "mimeType": "application/json",
                        "title": "Javascript + Xhr",
                        "content": "const data = JSON.stringify({\n  \"clientId\": \"string\",\n  \"deviceSecret\": \"string\",\n  \"formFactor\": \"phone\",\n  \"id\": \"string\",\n  \"metadata\": {},\n  \"platform\": \"ios\",\n  \"push.recipient\": {\n    \"clientId\": \"string\",\n    \"deviceId\": \"string\",\n    \"deviceToken\": \"string\",\n    \"registrationToken\": \"string\",\n    \"transportType\": \"apns\"\n  }\n});\n\nconst xhr = new XMLHttpRequest();\nxhr.withCredentials = true;\n\nxhr.addEventListener(\"readystatechange\", function () {\n  if (this.readyState === this.DONE) {\n    console.log(this.responseText);\n  }\n});\n\nxhr.open(\"PUT\", \"https://rest.ably.io/push/deviceRegistrations/%7Bdevice_id%7D?format=SOME_STRING_VALUE\");\nxhr.setRequestHeader(\"X-Ably-Version\", \"SOME_STRING_VALUE\");\nxhr.setRequestHeader(\"Authorization\", \"Basic REPLACE_BASIC_AUTH\");\nxhr.setRequestHeader(\"content-type\", \"application/json\");\n\nxhr.send(data);"
                    },
                    {
                        "id": "shell_curl",
                        "mimeType": "application/x-www-form-urlencoded",
                        "title": "Shell + Curl",
                        "content": "curl --request PUT \\\n  --url 'https://rest.ably.io/push/deviceRegistrations/%7Bdevice_id%7D?format=SOME_STRING_VALUE' \\\n  --header 'Authorization: Basic REPLACE_BASIC_AUTH' \\\n  --header 'X-Ably-Version: SOME_STRING_VALUE' \\\n  --header 'content-type: application/x-www-form-urlencoded' \\\n  --data clientId=string \\\n  --data deviceSecret=string \\\n  --data formFactor=phone \\\n  --data id=string \\\n  --data 'metadata=%5Bobject+Object%5D' \\\n  --data platform=ios \\\n  --data 'push.recipient=%5Bobject+Object%5D'"
                    },
                    {
                        "id": "java_okhttp",
                        "mimeType": "application/x-www-form-urlencoded",
                        "title": "Java + Okhttp",
                        "content": "OkHttpClient client = new OkHttpClient();\n\nMediaType mediaType = MediaType.parse(\"application/x-www-form-urlencoded\");\nRequestBody body = RequestBody.create(mediaType, \"clientId=string&deviceSecret=string&formFactor=phone&id=string&metadata=%255Bobject%2BObject%255D&platform=ios&push.recipient=%255Bobject%2BObject%255D\");\nRequest request = new Request.Builder()\n  .url(\"https://rest.ably.io/push/deviceRegistrations/%7Bdevice_id%7D?format=SOME_STRING_VALUE\")\n  .put(body)\n  .addHeader(\"X-Ably-Version\", \"SOME_STRING_VALUE\")\n  .addHeader(\"Authorization\", \"Basic REPLACE_BASIC_AUTH\")\n  .addHeader(\"content-type\", \"application/x-www-form-urlencoded\")\n  .build();\n\nResponse response = client.newCall(request).execute();"
                    },
                    {
                        "id": "node_request",
                        "mimeType": "application/x-www-form-urlencoded",
                        "title": "Node + Request",
                        "content": "const request = require('request');\n\nconst options = {\n  method: 'PUT',\n  url: 'https://rest.ably.io/push/deviceRegistrations/%7Bdevice_id%7D',\n  qs: {format: 'SOME_STRING_VALUE'},\n  headers: {\n    'X-Ably-Version': 'SOME_STRING_VALUE',\n    Authorization: 'Basic REPLACE_BASIC_AUTH',\n    'content-type': 'application/x-www-form-urlencoded'\n  },\n  form: {\n    clientId: 'string',\n    deviceSecret: 'string',\n    formFactor: 'phone',\n    id: 'string',\n    metadata: '%5Bobject+Object%5D',\n    platform: 'ios',\n    'push.recipient': '%5Bobject+Object%5D'\n  }\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
                    },
                    {
                        "id": "python_python3",
                        "mimeType": "application/x-www-form-urlencoded",
                        "title": "Python + Python3",
                        "content": "import http.client\n\nconn = http.client.HTTPSConnection(\"rest.ably.io\")\n\npayload = \"clientId=string&deviceSecret=string&formFactor=phone&id=string&metadata=%255Bobject%2BObject%255D&platform=ios&push.recipient=%255Bobject%2BObject%255D\"\n\nheaders = {\n    'X-Ably-Version': \"SOME_STRING_VALUE\",\n    'Authorization': \"Basic REPLACE_BASIC_AUTH\",\n    'content-type': \"application/x-www-form-urlencoded\"\n    }\n\nconn.request(\"PUT\", \"/push/deviceRegistrations/%7Bdevice_id%7D?format=SOME_STRING_VALUE\", payload, headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
                    },
                    {
                        "id": "go_native",
                        "mimeType": "application/x-www-form-urlencoded",
                        "title": "Go + Native",
                        "content": "package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://rest.ably.io/push/deviceRegistrations/%7Bdevice_id%7D?format=SOME_STRING_VALUE\"\n\n\tpayload := strings.NewReader(\"clientId=string&deviceSecret=string&formFactor=phone&id=string&metadata=%255Bobject%2BObject%255D&platform=ios&push.recipient=%255Bobject%2BObject%255D\")\n\n\treq, _ := http.NewRequest(\"PUT\", url, payload)\n\n\treq.Header.Add(\"X-Ably-Version\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"Authorization\", \"Basic REPLACE_BASIC_AUTH\")\n\treq.Header.Add(\"content-type\", \"application/x-www-form-urlencoded\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
                    },
                    {
                        "id": "ruby_native",
                        "mimeType": "application/x-www-form-urlencoded",
                        "title": "Ruby + Native",
                        "content": "require 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://rest.ably.io/push/deviceRegistrations/%7Bdevice_id%7D?format=SOME_STRING_VALUE\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Put.new(url)\nrequest[\"X-Ably-Version\"] = 'SOME_STRING_VALUE'\nrequest[\"Authorization\"] = 'Basic REPLACE_BASIC_AUTH'\nrequest[\"content-type\"] = 'application/x-www-form-urlencoded'\nrequest.body = \"clientId=string&deviceSecret=string&formFactor=phone&id=string&metadata=%255Bobject%2BObject%255D&platform=ios&push.recipient=%255Bobject%2BObject%255D\"\n\nresponse = http.request(request)\nputs response.read_body"
                    },
                    {
                        "id": "php_curl",
                        "mimeType": "application/x-www-form-urlencoded",
                        "title": "Php + Curl",
                        "content": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n  CURLOPT_URL => \"https://rest.ably.io/push/deviceRegistrations/%7Bdevice_id%7D?format=SOME_STRING_VALUE\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"PUT\",\n  CURLOPT_POSTFIELDS => \"clientId=string&deviceSecret=string&formFactor=phone&id=string&metadata=%255Bobject%2BObject%255D&platform=ios&push.recipient=%255Bobject%2BObject%255D\",\n  CURLOPT_HTTPHEADER => [\n    \"Authorization: Basic REPLACE_BASIC_AUTH\",\n    \"X-Ably-Version: SOME_STRING_VALUE\",\n    \"content-type: application/x-www-form-urlencoded\"\n  ],\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
                    },
                    {
                        "id": "swift_nsurlsession",
                        "mimeType": "application/x-www-form-urlencoded",
                        "title": "Swift + Nsurlsession",
                        "content": "import Foundation\n\nlet headers = [\n  \"X-Ably-Version\": \"SOME_STRING_VALUE\",\n  \"Authorization\": \"Basic REPLACE_BASIC_AUTH\",\n  \"content-type\": \"application/x-www-form-urlencoded\"\n]\n\nlet postData = NSMutableData(data: \"clientId=string\".data(using: String.Encoding.utf8)!)\npostData.append(\"&deviceSecret=string\".data(using: String.Encoding.utf8)!)\npostData.append(\"&formFactor=phone\".data(using: String.Encoding.utf8)!)\npostData.append(\"&id=string\".data(using: String.Encoding.utf8)!)\npostData.append(\"&metadata=%5Bobject+Object%5D\".data(using: String.Encoding.utf8)!)\npostData.append(\"&platform=ios\".data(using: String.Encoding.utf8)!)\npostData.append(\"&push.recipient=%5Bobject+Object%5D\".data(using: String.Encoding.utf8)!)\n\nlet request = NSMutableURLRequest(url: NSURL(string: \"https://rest.ably.io/push/deviceRegistrations/%7Bdevice_id%7D?format=SOME_STRING_VALUE\")! as URL,\n                                        cachePolicy: .useProtocolCachePolicy,\n                                    timeoutInterval: 10.0)\nrequest.httpMethod = \"PUT\"\nrequest.allHTTPHeaderFields = headers\nrequest.httpBody = postData as Data\n\nlet session = URLSession.shared\nlet dataTask = session.dataTask(with: request as URLRequest, completionHandler: { (data, response, error) -> Void in\n  if (error != nil) {\n    print(error)\n  } else {\n    let httpResponse = response as? HTTPURLResponse\n    print(httpResponse)\n  }\n})\n\ndataTask.resume()"
                    },
                    {
                        "id": "c_libcurl",
                        "mimeType": "application/x-www-form-urlencoded",
                        "title": "C + Libcurl",
                        "content": "CURL *hnd = curl_easy_init();\n\ncurl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, \"PUT\");\ncurl_easy_setopt(hnd, CURLOPT_URL, \"https://rest.ably.io/push/deviceRegistrations/%7Bdevice_id%7D?format=SOME_STRING_VALUE\");\n\nstruct curl_slist *headers = NULL;\nheaders = curl_slist_append(headers, \"X-Ably-Version: SOME_STRING_VALUE\");\nheaders = curl_slist_append(headers, \"Authorization: Basic REPLACE_BASIC_AUTH\");\nheaders = curl_slist_append(headers, \"content-type: application/x-www-form-urlencoded\");\ncurl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);\n\ncurl_easy_setopt(hnd, CURLOPT_POSTFIELDS, \"clientId=string&deviceSecret=string&formFactor=phone&id=string&metadata=%255Bobject%2BObject%255D&platform=ios&push.recipient=%255Bobject%2BObject%255D\");\n\nCURLcode ret = curl_easy_perform(hnd);"
                    },
                    {
                        "id": "javascript_xhr",
                        "mimeType": "application/x-www-form-urlencoded",
                        "title": "Javascript + Xhr",
                        "content": "const data = \"clientId=string&deviceSecret=string&formFactor=phone&id=string&metadata=%255Bobject%2BObject%255D&platform=ios&push.recipient=%255Bobject%2BObject%255D\";\n\nconst xhr = new XMLHttpRequest();\nxhr.withCredentials = true;\n\nxhr.addEventListener(\"readystatechange\", function () {\n  if (this.readyState === this.DONE) {\n    console.log(this.responseText);\n  }\n});\n\nxhr.open(\"PUT\", \"https://rest.ably.io/push/deviceRegistrations/%7Bdevice_id%7D?format=SOME_STRING_VALUE\");\nxhr.setRequestHeader(\"X-Ably-Version\", \"SOME_STRING_VALUE\");\nxhr.setRequestHeader(\"Authorization\", \"Basic REPLACE_BASIC_AUTH\");\nxhr.setRequestHeader(\"content-type\", \"application/x-www-form-urlencoded\");\n\nxhr.send(data);"
                    }
                ]
            }
        },
        "/push/deviceRegistrations/{device_id}/resetUpdateToken": {
            "get": {
                "description": "Gets an updated device details object.",
                "operationId": "updatePushDeviceDetails",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/deviceId"
                    }
                ],
                "responses": {
                    "2XX": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/DeviceDetails"
                                }
                            },
                            "application/x-msgpack": {
                                "schema": {
                                    "$ref": "#/components/schemas/DeviceDetails"
                                }
                            },
                            "text/html": {
                                "schema": {
                                    "$ref": "#/components/schemas/DeviceDetails"
                                }
                            }
                        },
                        "description": "OK"
                    },
                    "default": {
                        "$ref": "#/components/responses/Error"
                    }
                },
                "summary": "Reset a registered device's update token",
                "tags": [
                    "Push"
                ],
                "api_calls": [
                    {
                        "id": "shell_curl",
                        "title": "Shell + Curl",
                        "content": "curl --request GET \\\n  --url 'https://rest.ably.io/push/deviceRegistrations/%7Bdevice_id%7D/resetUpdateToken?format=SOME_STRING_VALUE' \\\n  --header 'Authorization: Basic REPLACE_BASIC_AUTH' \\\n  --header 'X-Ably-Version: SOME_STRING_VALUE'"
                    },
                    {
                        "id": "java_okhttp",
                        "title": "Java + Okhttp",
                        "content": "OkHttpClient client = new OkHttpClient();\n\nRequest request = new Request.Builder()\n  .url(\"https://rest.ably.io/push/deviceRegistrations/%7Bdevice_id%7D/resetUpdateToken?format=SOME_STRING_VALUE\")\n  .get()\n  .addHeader(\"X-Ably-Version\", \"SOME_STRING_VALUE\")\n  .addHeader(\"Authorization\", \"Basic REPLACE_BASIC_AUTH\")\n  .build();\n\nResponse response = client.newCall(request).execute();"
                    },
                    {
                        "id": "node_request",
                        "title": "Node + Request",
                        "content": "const request = require('request');\n\nconst options = {\n  method: 'GET',\n  url: 'https://rest.ably.io/push/deviceRegistrations/%7Bdevice_id%7D/resetUpdateToken',\n  qs: {format: 'SOME_STRING_VALUE'},\n  headers: {\n    'X-Ably-Version': 'SOME_STRING_VALUE',\n    Authorization: 'Basic REPLACE_BASIC_AUTH'\n  }\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
                    },
                    {
                        "id": "python_python3",
                        "title": "Python + Python3",
                        "content": "import http.client\n\nconn = http.client.HTTPSConnection(\"rest.ably.io\")\n\nheaders = {\n    'X-Ably-Version': \"SOME_STRING_VALUE\",\n    'Authorization': \"Basic REPLACE_BASIC_AUTH\"\n    }\n\nconn.request(\"GET\", \"/push/deviceRegistrations/%7Bdevice_id%7D/resetUpdateToken?format=SOME_STRING_VALUE\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
                    },
                    {
                        "id": "go_native",
                        "title": "Go + Native",
                        "content": "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://rest.ably.io/push/deviceRegistrations/%7Bdevice_id%7D/resetUpdateToken?format=SOME_STRING_VALUE\"\n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"X-Ably-Version\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"Authorization\", \"Basic REPLACE_BASIC_AUTH\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
                    },
                    {
                        "id": "ruby_native",
                        "title": "Ruby + Native",
                        "content": "require 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://rest.ably.io/push/deviceRegistrations/%7Bdevice_id%7D/resetUpdateToken?format=SOME_STRING_VALUE\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Get.new(url)\nrequest[\"X-Ably-Version\"] = 'SOME_STRING_VALUE'\nrequest[\"Authorization\"] = 'Basic REPLACE_BASIC_AUTH'\n\nresponse = http.request(request)\nputs response.read_body"
                    },
                    {
                        "id": "php_curl",
                        "title": "Php + Curl",
                        "content": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n  CURLOPT_URL => \"https://rest.ably.io/push/deviceRegistrations/%7Bdevice_id%7D/resetUpdateToken?format=SOME_STRING_VALUE\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"GET\",\n  CURLOPT_HTTPHEADER => [\n    \"Authorization: Basic REPLACE_BASIC_AUTH\",\n    \"X-Ably-Version: SOME_STRING_VALUE\"\n  ],\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
                    },
                    {
                        "id": "swift_nsurlsession",
                        "title": "Swift + Nsurlsession",
                        "content": "import Foundation\n\nlet headers = [\n  \"X-Ably-Version\": \"SOME_STRING_VALUE\",\n  \"Authorization\": \"Basic REPLACE_BASIC_AUTH\"\n]\n\nlet request = NSMutableURLRequest(url: NSURL(string: \"https://rest.ably.io/push/deviceRegistrations/%7Bdevice_id%7D/resetUpdateToken?format=SOME_STRING_VALUE\")! as URL,\n                                        cachePolicy: .useProtocolCachePolicy,\n                                    timeoutInterval: 10.0)\nrequest.httpMethod = \"GET\"\nrequest.allHTTPHeaderFields = headers\n\nlet session = URLSession.shared\nlet dataTask = session.dataTask(with: request as URLRequest, completionHandler: { (data, response, error) -> Void in\n  if (error != nil) {\n    print(error)\n  } else {\n    let httpResponse = response as? HTTPURLResponse\n    print(httpResponse)\n  }\n})\n\ndataTask.resume()"
                    },
                    {
                        "id": "c_libcurl",
                        "title": "C + Libcurl",
                        "content": "CURL *hnd = curl_easy_init();\n\ncurl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, \"GET\");\ncurl_easy_setopt(hnd, CURLOPT_URL, \"https://rest.ably.io/push/deviceRegistrations/%7Bdevice_id%7D/resetUpdateToken?format=SOME_STRING_VALUE\");\n\nstruct curl_slist *headers = NULL;\nheaders = curl_slist_append(headers, \"X-Ably-Version: SOME_STRING_VALUE\");\nheaders = curl_slist_append(headers, \"Authorization: Basic REPLACE_BASIC_AUTH\");\ncurl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);\n\nCURLcode ret = curl_easy_perform(hnd);"
                    },
                    {
                        "id": "javascript_xhr",
                        "title": "Javascript + Xhr",
                        "content": "const data = null;\n\nconst xhr = new XMLHttpRequest();\nxhr.withCredentials = true;\n\nxhr.addEventListener(\"readystatechange\", function () {\n  if (this.readyState === this.DONE) {\n    console.log(this.responseText);\n  }\n});\n\nxhr.open(\"GET\", \"https://rest.ably.io/push/deviceRegistrations/%7Bdevice_id%7D/resetUpdateToken?format=SOME_STRING_VALUE\");\nxhr.setRequestHeader(\"X-Ably-Version\", \"SOME_STRING_VALUE\");\nxhr.setRequestHeader(\"Authorization\", \"Basic REPLACE_BASIC_AUTH\");\n\nxhr.send(data);"
                    }
                ]
            },
            "parameters": [
                {
                    "$ref": "#/components/parameters/versionHeader"
                },
                {
                    "$ref": "#/components/parameters/responseFormat"
                }
            ]
        },
        "/push/publish": {
            "parameters": [
                {
                    "$ref": "#/components/parameters/versionHeader"
                },
                {
                    "$ref": "#/components/parameters/responseFormat"
                }
            ],
            "post": {
                "description": "A convenience endpoint to deliver a push notification payload to a single device or set of devices identified by their client identifier.",
                "operationId": "publishPushNotificationToDevices",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "push": {
                                        "$ref": "#/components/schemas/Push"
                                    },
                                    "recipient": {
                                        "$ref": "#/components/schemas/Recipient"
                                    }
                                },
                                "required": [
                                    "recipient"
                                ],
                                "type": "object"
                            }
                        },
                        "application/x-msgpack": {
                            "schema": {
                                "properties": {
                                    "push": {
                                        "$ref": "#/components/schemas/Push"
                                    },
                                    "recipient": {
                                        "$ref": "#/components/schemas/Recipient"
                                    }
                                },
                                "required": [
                                    "recipient"
                                ],
                                "type": "object"
                            }
                        },
                        "application/x-www-form-urlencoded": {
                            "schema": {
                                "properties": {
                                    "push": {
                                        "$ref": "#/components/schemas/Push"
                                    },
                                    "recipient": {
                                        "$ref": "#/components/schemas/Recipient"
                                    }
                                },
                                "required": [
                                    "recipient"
                                ],
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "2XX": {
                        "description": "OK"
                    },
                    "default": {
                        "$ref": "#/components/responses/Error"
                    }
                },
                "summary": "Publish a push notification to device(s)",
                "tags": [
                    "Push"
                ],
                "api_calls": [
                    {
                        "id": "shell_curl",
                        "mimeType": "application/json",
                        "title": "Shell + Curl",
                        "content": "curl --request POST \\\n  --url 'https://rest.ably.io/push/publish?format=SOME_STRING_VALUE' \\\n  --header 'Authorization: Basic REPLACE_BASIC_AUTH' \\\n  --header 'X-Ably-Version: SOME_STRING_VALUE' \\\n  --header 'content-type: application/json' \\\n  --data '{\"push\":{\"apns\":{\"notification\":{\"body\":\"string\",\"collapseKey\":\"string\",\"icon\":\"string\",\"sound\":\"string\",\"title\":\"string\"}},\"data\":\"string\",\"fcm\":{\"notification\":{\"body\":\"string\",\"collapseKey\":\"string\",\"icon\":\"string\",\"sound\":\"string\",\"title\":\"string\"}},\"notification\":{\"body\":\"string\",\"collapseKey\":\"string\",\"icon\":\"string\",\"sound\":\"string\",\"title\":\"string\"},\"web\":{\"notification\":{\"body\":\"string\",\"collapseKey\":\"string\",\"icon\":\"string\",\"sound\":\"string\",\"title\":\"string\"}}},\"recipient\":{\"clientId\":\"string\",\"deviceId\":\"string\",\"deviceToken\":\"string\",\"registrationToken\":\"string\",\"transportType\":\"apns\"}}'"
                    },
                    {
                        "id": "java_okhttp",
                        "mimeType": "application/json",
                        "title": "Java + Okhttp",
                        "content": "OkHttpClient client = new OkHttpClient();\n\nMediaType mediaType = MediaType.parse(\"application/json\");\nRequestBody body = RequestBody.create(mediaType, \"{\\\"push\\\":{\\\"apns\\\":{\\\"notification\\\":{\\\"body\\\":\\\"string\\\",\\\"collapseKey\\\":\\\"string\\\",\\\"icon\\\":\\\"string\\\",\\\"sound\\\":\\\"string\\\",\\\"title\\\":\\\"string\\\"}},\\\"data\\\":\\\"string\\\",\\\"fcm\\\":{\\\"notification\\\":{\\\"body\\\":\\\"string\\\",\\\"collapseKey\\\":\\\"string\\\",\\\"icon\\\":\\\"string\\\",\\\"sound\\\":\\\"string\\\",\\\"title\\\":\\\"string\\\"}},\\\"notification\\\":{\\\"body\\\":\\\"string\\\",\\\"collapseKey\\\":\\\"string\\\",\\\"icon\\\":\\\"string\\\",\\\"sound\\\":\\\"string\\\",\\\"title\\\":\\\"string\\\"},\\\"web\\\":{\\\"notification\\\":{\\\"body\\\":\\\"string\\\",\\\"collapseKey\\\":\\\"string\\\",\\\"icon\\\":\\\"string\\\",\\\"sound\\\":\\\"string\\\",\\\"title\\\":\\\"string\\\"}}},\\\"recipient\\\":{\\\"clientId\\\":\\\"string\\\",\\\"deviceId\\\":\\\"string\\\",\\\"deviceToken\\\":\\\"string\\\",\\\"registrationToken\\\":\\\"string\\\",\\\"transportType\\\":\\\"apns\\\"}}\");\nRequest request = new Request.Builder()\n  .url(\"https://rest.ably.io/push/publish?format=SOME_STRING_VALUE\")\n  .post(body)\n  .addHeader(\"X-Ably-Version\", \"SOME_STRING_VALUE\")\n  .addHeader(\"Authorization\", \"Basic REPLACE_BASIC_AUTH\")\n  .addHeader(\"content-type\", \"application/json\")\n  .build();\n\nResponse response = client.newCall(request).execute();"
                    },
                    {
                        "id": "node_request",
                        "mimeType": "application/json",
                        "title": "Node + Request",
                        "content": "const request = require('request');\n\nconst options = {\n  method: 'POST',\n  url: 'https://rest.ably.io/push/publish',\n  qs: {format: 'SOME_STRING_VALUE'},\n  headers: {\n    'X-Ably-Version': 'SOME_STRING_VALUE',\n    Authorization: 'Basic REPLACE_BASIC_AUTH',\n    'content-type': 'application/json'\n  },\n  body: {\n    push: {\n      apns: {\n        notification: {\n          body: 'string',\n          collapseKey: 'string',\n          icon: 'string',\n          sound: 'string',\n          title: 'string'\n        }\n      },\n      data: 'string',\n      fcm: {\n        notification: {\n          body: 'string',\n          collapseKey: 'string',\n          icon: 'string',\n          sound: 'string',\n          title: 'string'\n        }\n      },\n      notification: {\n        body: 'string',\n        collapseKey: 'string',\n        icon: 'string',\n        sound: 'string',\n        title: 'string'\n      },\n      web: {\n        notification: {\n          body: 'string',\n          collapseKey: 'string',\n          icon: 'string',\n          sound: 'string',\n          title: 'string'\n        }\n      }\n    },\n    recipient: {\n      clientId: 'string',\n      deviceId: 'string',\n      deviceToken: 'string',\n      registrationToken: 'string',\n      transportType: 'apns'\n    }\n  },\n  json: true\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
                    },
                    {
                        "id": "python_python3",
                        "mimeType": "application/json",
                        "title": "Python + Python3",
                        "content": "import http.client\n\nconn = http.client.HTTPSConnection(\"rest.ably.io\")\n\npayload = \"{\\\"push\\\":{\\\"apns\\\":{\\\"notification\\\":{\\\"body\\\":\\\"string\\\",\\\"collapseKey\\\":\\\"string\\\",\\\"icon\\\":\\\"string\\\",\\\"sound\\\":\\\"string\\\",\\\"title\\\":\\\"string\\\"}},\\\"data\\\":\\\"string\\\",\\\"fcm\\\":{\\\"notification\\\":{\\\"body\\\":\\\"string\\\",\\\"collapseKey\\\":\\\"string\\\",\\\"icon\\\":\\\"string\\\",\\\"sound\\\":\\\"string\\\",\\\"title\\\":\\\"string\\\"}},\\\"notification\\\":{\\\"body\\\":\\\"string\\\",\\\"collapseKey\\\":\\\"string\\\",\\\"icon\\\":\\\"string\\\",\\\"sound\\\":\\\"string\\\",\\\"title\\\":\\\"string\\\"},\\\"web\\\":{\\\"notification\\\":{\\\"body\\\":\\\"string\\\",\\\"collapseKey\\\":\\\"string\\\",\\\"icon\\\":\\\"string\\\",\\\"sound\\\":\\\"string\\\",\\\"title\\\":\\\"string\\\"}}},\\\"recipient\\\":{\\\"clientId\\\":\\\"string\\\",\\\"deviceId\\\":\\\"string\\\",\\\"deviceToken\\\":\\\"string\\\",\\\"registrationToken\\\":\\\"string\\\",\\\"transportType\\\":\\\"apns\\\"}}\"\n\nheaders = {\n    'X-Ably-Version': \"SOME_STRING_VALUE\",\n    'Authorization': \"Basic REPLACE_BASIC_AUTH\",\n    'content-type': \"application/json\"\n    }\n\nconn.request(\"POST\", \"/push/publish?format=SOME_STRING_VALUE\", payload, headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
                    },
                    {
                        "id": "go_native",
                        "mimeType": "application/json",
                        "title": "Go + Native",
                        "content": "package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://rest.ably.io/push/publish?format=SOME_STRING_VALUE\"\n\n\tpayload := strings.NewReader(\"{\\\"push\\\":{\\\"apns\\\":{\\\"notification\\\":{\\\"body\\\":\\\"string\\\",\\\"collapseKey\\\":\\\"string\\\",\\\"icon\\\":\\\"string\\\",\\\"sound\\\":\\\"string\\\",\\\"title\\\":\\\"string\\\"}},\\\"data\\\":\\\"string\\\",\\\"fcm\\\":{\\\"notification\\\":{\\\"body\\\":\\\"string\\\",\\\"collapseKey\\\":\\\"string\\\",\\\"icon\\\":\\\"string\\\",\\\"sound\\\":\\\"string\\\",\\\"title\\\":\\\"string\\\"}},\\\"notification\\\":{\\\"body\\\":\\\"string\\\",\\\"collapseKey\\\":\\\"string\\\",\\\"icon\\\":\\\"string\\\",\\\"sound\\\":\\\"string\\\",\\\"title\\\":\\\"string\\\"},\\\"web\\\":{\\\"notification\\\":{\\\"body\\\":\\\"string\\\",\\\"collapseKey\\\":\\\"string\\\",\\\"icon\\\":\\\"string\\\",\\\"sound\\\":\\\"string\\\",\\\"title\\\":\\\"string\\\"}}},\\\"recipient\\\":{\\\"clientId\\\":\\\"string\\\",\\\"deviceId\\\":\\\"string\\\",\\\"deviceToken\\\":\\\"string\\\",\\\"registrationToken\\\":\\\"string\\\",\\\"transportType\\\":\\\"apns\\\"}}\")\n\n\treq, _ := http.NewRequest(\"POST\", url, payload)\n\n\treq.Header.Add(\"X-Ably-Version\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"Authorization\", \"Basic REPLACE_BASIC_AUTH\")\n\treq.Header.Add(\"content-type\", \"application/json\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
                    },
                    {
                        "id": "ruby_native",
                        "mimeType": "application/json",
                        "title": "Ruby + Native",
                        "content": "require 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://rest.ably.io/push/publish?format=SOME_STRING_VALUE\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Post.new(url)\nrequest[\"X-Ably-Version\"] = 'SOME_STRING_VALUE'\nrequest[\"Authorization\"] = 'Basic REPLACE_BASIC_AUTH'\nrequest[\"content-type\"] = 'application/json'\nrequest.body = \"{\\\"push\\\":{\\\"apns\\\":{\\\"notification\\\":{\\\"body\\\":\\\"string\\\",\\\"collapseKey\\\":\\\"string\\\",\\\"icon\\\":\\\"string\\\",\\\"sound\\\":\\\"string\\\",\\\"title\\\":\\\"string\\\"}},\\\"data\\\":\\\"string\\\",\\\"fcm\\\":{\\\"notification\\\":{\\\"body\\\":\\\"string\\\",\\\"collapseKey\\\":\\\"string\\\",\\\"icon\\\":\\\"string\\\",\\\"sound\\\":\\\"string\\\",\\\"title\\\":\\\"string\\\"}},\\\"notification\\\":{\\\"body\\\":\\\"string\\\",\\\"collapseKey\\\":\\\"string\\\",\\\"icon\\\":\\\"string\\\",\\\"sound\\\":\\\"string\\\",\\\"title\\\":\\\"string\\\"},\\\"web\\\":{\\\"notification\\\":{\\\"body\\\":\\\"string\\\",\\\"collapseKey\\\":\\\"string\\\",\\\"icon\\\":\\\"string\\\",\\\"sound\\\":\\\"string\\\",\\\"title\\\":\\\"string\\\"}}},\\\"recipient\\\":{\\\"clientId\\\":\\\"string\\\",\\\"deviceId\\\":\\\"string\\\",\\\"deviceToken\\\":\\\"string\\\",\\\"registrationToken\\\":\\\"string\\\",\\\"transportType\\\":\\\"apns\\\"}}\"\n\nresponse = http.request(request)\nputs response.read_body"
                    },
                    {
                        "id": "php_curl",
                        "mimeType": "application/json",
                        "title": "Php + Curl",
                        "content": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n  CURLOPT_URL => \"https://rest.ably.io/push/publish?format=SOME_STRING_VALUE\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"POST\",\n  CURLOPT_POSTFIELDS => \"{\\\"push\\\":{\\\"apns\\\":{\\\"notification\\\":{\\\"body\\\":\\\"string\\\",\\\"collapseKey\\\":\\\"string\\\",\\\"icon\\\":\\\"string\\\",\\\"sound\\\":\\\"string\\\",\\\"title\\\":\\\"string\\\"}},\\\"data\\\":\\\"string\\\",\\\"fcm\\\":{\\\"notification\\\":{\\\"body\\\":\\\"string\\\",\\\"collapseKey\\\":\\\"string\\\",\\\"icon\\\":\\\"string\\\",\\\"sound\\\":\\\"string\\\",\\\"title\\\":\\\"string\\\"}},\\\"notification\\\":{\\\"body\\\":\\\"string\\\",\\\"collapseKey\\\":\\\"string\\\",\\\"icon\\\":\\\"string\\\",\\\"sound\\\":\\\"string\\\",\\\"title\\\":\\\"string\\\"},\\\"web\\\":{\\\"notification\\\":{\\\"body\\\":\\\"string\\\",\\\"collapseKey\\\":\\\"string\\\",\\\"icon\\\":\\\"string\\\",\\\"sound\\\":\\\"string\\\",\\\"title\\\":\\\"string\\\"}}},\\\"recipient\\\":{\\\"clientId\\\":\\\"string\\\",\\\"deviceId\\\":\\\"string\\\",\\\"deviceToken\\\":\\\"string\\\",\\\"registrationToken\\\":\\\"string\\\",\\\"transportType\\\":\\\"apns\\\"}}\",\n  CURLOPT_HTTPHEADER => [\n    \"Authorization: Basic REPLACE_BASIC_AUTH\",\n    \"X-Ably-Version: SOME_STRING_VALUE\",\n    \"content-type: application/json\"\n  ],\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
                    },
                    {
                        "id": "swift_nsurlsession",
                        "mimeType": "application/json",
                        "title": "Swift + Nsurlsession",
                        "content": "import Foundation\n\nlet headers = [\n  \"X-Ably-Version\": \"SOME_STRING_VALUE\",\n  \"Authorization\": \"Basic REPLACE_BASIC_AUTH\",\n  \"content-type\": \"application/json\"\n]\nlet parameters = [\n  \"push\": [\n    \"apns\": [\"notification\": [\n        \"body\": \"string\",\n        \"collapseKey\": \"string\",\n        \"icon\": \"string\",\n        \"sound\": \"string\",\n        \"title\": \"string\"\n      ]],\n    \"data\": \"string\",\n    \"fcm\": [\"notification\": [\n        \"body\": \"string\",\n        \"collapseKey\": \"string\",\n        \"icon\": \"string\",\n        \"sound\": \"string\",\n        \"title\": \"string\"\n      ]],\n    \"notification\": [\n      \"body\": \"string\",\n      \"collapseKey\": \"string\",\n      \"icon\": \"string\",\n      \"sound\": \"string\",\n      \"title\": \"string\"\n    ],\n    \"web\": [\"notification\": [\n        \"body\": \"string\",\n        \"collapseKey\": \"string\",\n        \"icon\": \"string\",\n        \"sound\": \"string\",\n        \"title\": \"string\"\n      ]]\n  ],\n  \"recipient\": [\n    \"clientId\": \"string\",\n    \"deviceId\": \"string\",\n    \"deviceToken\": \"string\",\n    \"registrationToken\": \"string\",\n    \"transportType\": \"apns\"\n  ]\n] as [String : Any]\n\nlet postData = JSONSerialization.data(withJSONObject: parameters, options: [])\n\nlet request = NSMutableURLRequest(url: NSURL(string: \"https://rest.ably.io/push/publish?format=SOME_STRING_VALUE\")! as URL,\n                                        cachePolicy: .useProtocolCachePolicy,\n                                    timeoutInterval: 10.0)\nrequest.httpMethod = \"POST\"\nrequest.allHTTPHeaderFields = headers\nrequest.httpBody = postData as Data\n\nlet session = URLSession.shared\nlet dataTask = session.dataTask(with: request as URLRequest, completionHandler: { (data, response, error) -> Void in\n  if (error != nil) {\n    print(error)\n  } else {\n    let httpResponse = response as? HTTPURLResponse\n    print(httpResponse)\n  }\n})\n\ndataTask.resume()"
                    },
                    {
                        "id": "c_libcurl",
                        "mimeType": "application/json",
                        "title": "C + Libcurl",
                        "content": "CURL *hnd = curl_easy_init();\n\ncurl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, \"POST\");\ncurl_easy_setopt(hnd, CURLOPT_URL, \"https://rest.ably.io/push/publish?format=SOME_STRING_VALUE\");\n\nstruct curl_slist *headers = NULL;\nheaders = curl_slist_append(headers, \"X-Ably-Version: SOME_STRING_VALUE\");\nheaders = curl_slist_append(headers, \"Authorization: Basic REPLACE_BASIC_AUTH\");\nheaders = curl_slist_append(headers, \"content-type: application/json\");\ncurl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);\n\ncurl_easy_setopt(hnd, CURLOPT_POSTFIELDS, \"{\\\"push\\\":{\\\"apns\\\":{\\\"notification\\\":{\\\"body\\\":\\\"string\\\",\\\"collapseKey\\\":\\\"string\\\",\\\"icon\\\":\\\"string\\\",\\\"sound\\\":\\\"string\\\",\\\"title\\\":\\\"string\\\"}},\\\"data\\\":\\\"string\\\",\\\"fcm\\\":{\\\"notification\\\":{\\\"body\\\":\\\"string\\\",\\\"collapseKey\\\":\\\"string\\\",\\\"icon\\\":\\\"string\\\",\\\"sound\\\":\\\"string\\\",\\\"title\\\":\\\"string\\\"}},\\\"notification\\\":{\\\"body\\\":\\\"string\\\",\\\"collapseKey\\\":\\\"string\\\",\\\"icon\\\":\\\"string\\\",\\\"sound\\\":\\\"string\\\",\\\"title\\\":\\\"string\\\"},\\\"web\\\":{\\\"notification\\\":{\\\"body\\\":\\\"string\\\",\\\"collapseKey\\\":\\\"string\\\",\\\"icon\\\":\\\"string\\\",\\\"sound\\\":\\\"string\\\",\\\"title\\\":\\\"string\\\"}}},\\\"recipient\\\":{\\\"clientId\\\":\\\"string\\\",\\\"deviceId\\\":\\\"string\\\",\\\"deviceToken\\\":\\\"string\\\",\\\"registrationToken\\\":\\\"string\\\",\\\"transportType\\\":\\\"apns\\\"}}\");\n\nCURLcode ret = curl_easy_perform(hnd);"
                    },
                    {
                        "id": "javascript_xhr",
                        "mimeType": "application/json",
                        "title": "Javascript + Xhr",
                        "content": "const data = JSON.stringify({\n  \"push\": {\n    \"apns\": {\n      \"notification\": {\n        \"body\": \"string\",\n        \"collapseKey\": \"string\",\n        \"icon\": \"string\",\n        \"sound\": \"string\",\n        \"title\": \"string\"\n      }\n    },\n    \"data\": \"string\",\n    \"fcm\": {\n      \"notification\": {\n        \"body\": \"string\",\n        \"collapseKey\": \"string\",\n        \"icon\": \"string\",\n        \"sound\": \"string\",\n        \"title\": \"string\"\n      }\n    },\n    \"notification\": {\n      \"body\": \"string\",\n      \"collapseKey\": \"string\",\n      \"icon\": \"string\",\n      \"sound\": \"string\",\n      \"title\": \"string\"\n    },\n    \"web\": {\n      \"notification\": {\n        \"body\": \"string\",\n        \"collapseKey\": \"string\",\n        \"icon\": \"string\",\n        \"sound\": \"string\",\n        \"title\": \"string\"\n      }\n    }\n  },\n  \"recipient\": {\n    \"clientId\": \"string\",\n    \"deviceId\": \"string\",\n    \"deviceToken\": \"string\",\n    \"registrationToken\": \"string\",\n    \"transportType\": \"apns\"\n  }\n});\n\nconst xhr = new XMLHttpRequest();\nxhr.withCredentials = true;\n\nxhr.addEventListener(\"readystatechange\", function () {\n  if (this.readyState === this.DONE) {\n    console.log(this.responseText);\n  }\n});\n\nxhr.open(\"POST\", \"https://rest.ably.io/push/publish?format=SOME_STRING_VALUE\");\nxhr.setRequestHeader(\"X-Ably-Version\", \"SOME_STRING_VALUE\");\nxhr.setRequestHeader(\"Authorization\", \"Basic REPLACE_BASIC_AUTH\");\nxhr.setRequestHeader(\"content-type\", \"application/json\");\n\nxhr.send(data);"
                    },
                    {
                        "id": "shell_curl",
                        "mimeType": "application/x-www-form-urlencoded",
                        "title": "Shell + Curl",
                        "content": "curl --request POST \\\n  --url 'https://rest.ably.io/push/publish?format=SOME_STRING_VALUE' \\\n  --header 'Authorization: Basic REPLACE_BASIC_AUTH' \\\n  --header 'X-Ably-Version: SOME_STRING_VALUE' \\\n  --header 'content-type: application/x-www-form-urlencoded' \\\n  --data 'push=%5Bobject+Object%5D' \\\n  --data 'recipient=%5Bobject+Object%5D'"
                    },
                    {
                        "id": "java_okhttp",
                        "mimeType": "application/x-www-form-urlencoded",
                        "title": "Java + Okhttp",
                        "content": "OkHttpClient client = new OkHttpClient();\n\nMediaType mediaType = MediaType.parse(\"application/x-www-form-urlencoded\");\nRequestBody body = RequestBody.create(mediaType, \"push=%255Bobject%2BObject%255D&recipient=%255Bobject%2BObject%255D\");\nRequest request = new Request.Builder()\n  .url(\"https://rest.ably.io/push/publish?format=SOME_STRING_VALUE\")\n  .post(body)\n  .addHeader(\"X-Ably-Version\", \"SOME_STRING_VALUE\")\n  .addHeader(\"Authorization\", \"Basic REPLACE_BASIC_AUTH\")\n  .addHeader(\"content-type\", \"application/x-www-form-urlencoded\")\n  .build();\n\nResponse response = client.newCall(request).execute();"
                    },
                    {
                        "id": "node_request",
                        "mimeType": "application/x-www-form-urlencoded",
                        "title": "Node + Request",
                        "content": "const request = require('request');\n\nconst options = {\n  method: 'POST',\n  url: 'https://rest.ably.io/push/publish',\n  qs: {format: 'SOME_STRING_VALUE'},\n  headers: {\n    'X-Ably-Version': 'SOME_STRING_VALUE',\n    Authorization: 'Basic REPLACE_BASIC_AUTH',\n    'content-type': 'application/x-www-form-urlencoded'\n  },\n  form: {push: '%5Bobject+Object%5D', recipient: '%5Bobject+Object%5D'}\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
                    },
                    {
                        "id": "python_python3",
                        "mimeType": "application/x-www-form-urlencoded",
                        "title": "Python + Python3",
                        "content": "import http.client\n\nconn = http.client.HTTPSConnection(\"rest.ably.io\")\n\npayload = \"push=%255Bobject%2BObject%255D&recipient=%255Bobject%2BObject%255D\"\n\nheaders = {\n    'X-Ably-Version': \"SOME_STRING_VALUE\",\n    'Authorization': \"Basic REPLACE_BASIC_AUTH\",\n    'content-type': \"application/x-www-form-urlencoded\"\n    }\n\nconn.request(\"POST\", \"/push/publish?format=SOME_STRING_VALUE\", payload, headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
                    },
                    {
                        "id": "go_native",
                        "mimeType": "application/x-www-form-urlencoded",
                        "title": "Go + Native",
                        "content": "package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://rest.ably.io/push/publish?format=SOME_STRING_VALUE\"\n\n\tpayload := strings.NewReader(\"push=%255Bobject%2BObject%255D&recipient=%255Bobject%2BObject%255D\")\n\n\treq, _ := http.NewRequest(\"POST\", url, payload)\n\n\treq.Header.Add(\"X-Ably-Version\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"Authorization\", \"Basic REPLACE_BASIC_AUTH\")\n\treq.Header.Add(\"content-type\", \"application/x-www-form-urlencoded\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
                    },
                    {
                        "id": "ruby_native",
                        "mimeType": "application/x-www-form-urlencoded",
                        "title": "Ruby + Native",
                        "content": "require 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://rest.ably.io/push/publish?format=SOME_STRING_VALUE\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Post.new(url)\nrequest[\"X-Ably-Version\"] = 'SOME_STRING_VALUE'\nrequest[\"Authorization\"] = 'Basic REPLACE_BASIC_AUTH'\nrequest[\"content-type\"] = 'application/x-www-form-urlencoded'\nrequest.body = \"push=%255Bobject%2BObject%255D&recipient=%255Bobject%2BObject%255D\"\n\nresponse = http.request(request)\nputs response.read_body"
                    },
                    {
                        "id": "php_curl",
                        "mimeType": "application/x-www-form-urlencoded",
                        "title": "Php + Curl",
                        "content": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n  CURLOPT_URL => \"https://rest.ably.io/push/publish?format=SOME_STRING_VALUE\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"POST\",\n  CURLOPT_POSTFIELDS => \"push=%255Bobject%2BObject%255D&recipient=%255Bobject%2BObject%255D\",\n  CURLOPT_HTTPHEADER => [\n    \"Authorization: Basic REPLACE_BASIC_AUTH\",\n    \"X-Ably-Version: SOME_STRING_VALUE\",\n    \"content-type: application/x-www-form-urlencoded\"\n  ],\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
                    },
                    {
                        "id": "swift_nsurlsession",
                        "mimeType": "application/x-www-form-urlencoded",
                        "title": "Swift + Nsurlsession",
                        "content": "import Foundation\n\nlet headers = [\n  \"X-Ably-Version\": \"SOME_STRING_VALUE\",\n  \"Authorization\": \"Basic REPLACE_BASIC_AUTH\",\n  \"content-type\": \"application/x-www-form-urlencoded\"\n]\n\nlet postData = NSMutableData(data: \"push=%5Bobject+Object%5D\".data(using: String.Encoding.utf8)!)\npostData.append(\"&recipient=%5Bobject+Object%5D\".data(using: String.Encoding.utf8)!)\n\nlet request = NSMutableURLRequest(url: NSURL(string: \"https://rest.ably.io/push/publish?format=SOME_STRING_VALUE\")! as URL,\n                                        cachePolicy: .useProtocolCachePolicy,\n                                    timeoutInterval: 10.0)\nrequest.httpMethod = \"POST\"\nrequest.allHTTPHeaderFields = headers\nrequest.httpBody = postData as Data\n\nlet session = URLSession.shared\nlet dataTask = session.dataTask(with: request as URLRequest, completionHandler: { (data, response, error) -> Void in\n  if (error != nil) {\n    print(error)\n  } else {\n    let httpResponse = response as? HTTPURLResponse\n    print(httpResponse)\n  }\n})\n\ndataTask.resume()"
                    },
                    {
                        "id": "c_libcurl",
                        "mimeType": "application/x-www-form-urlencoded",
                        "title": "C + Libcurl",
                        "content": "CURL *hnd = curl_easy_init();\n\ncurl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, \"POST\");\ncurl_easy_setopt(hnd, CURLOPT_URL, \"https://rest.ably.io/push/publish?format=SOME_STRING_VALUE\");\n\nstruct curl_slist *headers = NULL;\nheaders = curl_slist_append(headers, \"X-Ably-Version: SOME_STRING_VALUE\");\nheaders = curl_slist_append(headers, \"Authorization: Basic REPLACE_BASIC_AUTH\");\nheaders = curl_slist_append(headers, \"content-type: application/x-www-form-urlencoded\");\ncurl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);\n\ncurl_easy_setopt(hnd, CURLOPT_POSTFIELDS, \"push=%255Bobject%2BObject%255D&recipient=%255Bobject%2BObject%255D\");\n\nCURLcode ret = curl_easy_perform(hnd);"
                    },
                    {
                        "id": "javascript_xhr",
                        "mimeType": "application/x-www-form-urlencoded",
                        "title": "Javascript + Xhr",
                        "content": "const data = \"push=%255Bobject%2BObject%255D&recipient=%255Bobject%2BObject%255D\";\n\nconst xhr = new XMLHttpRequest();\nxhr.withCredentials = true;\n\nxhr.addEventListener(\"readystatechange\", function () {\n  if (this.readyState === this.DONE) {\n    console.log(this.responseText);\n  }\n});\n\nxhr.open(\"POST\", \"https://rest.ably.io/push/publish?format=SOME_STRING_VALUE\");\nxhr.setRequestHeader(\"X-Ably-Version\", \"SOME_STRING_VALUE\");\nxhr.setRequestHeader(\"Authorization\", \"Basic REPLACE_BASIC_AUTH\");\nxhr.setRequestHeader(\"content-type\", \"application/x-www-form-urlencoded\");\n\nxhr.send(data);"
                    }
                ]
            }
        },
        "/stats": {
            "get": {
                "description": "The Ably system can be queried to obtain usage statistics for a given application, and results are provided aggregated across all channels in use in the application in the specified period. Stats may be used to track usage against account quotas.",
                "operationId": "getStats",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/filterStart"
                    },
                    {
                        "$ref": "#/components/parameters/filterLimit"
                    },
                    {
                        "$ref": "#/components/parameters/filterEnd"
                    },
                    {
                        "$ref": "#/components/parameters/filterDirection"
                    },
                    {
                        "description": "Specifies the unit of aggregation in the returned results.",
                        "in": "query",
                        "name": "unit",
                        "schema": {
                            "default": "minute",
                            "enum": [
                                "minute",
                                "hour",
                                "day",
                                "month"
                            ],
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "2XX": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object"
                                }
                            }
                        },
                        "description": "OK"
                    },
                    "default": {
                        "$ref": "#/components/responses/Error"
                    }
                },
                "summary": "Retrieve usage statistics for an application",
                "tags": [
                    "Stats"
                ],
                "api_calls": [
                    {
                        "id": "shell_curl",
                        "title": "Shell + Curl",
                        "content": "curl --request GET \\\n  --url 'https://rest.ably.io/stats?format=SOME_STRING_VALUE&start=SOME_STRING_VALUE&limit=SOME_INTEGER_VALUE&end=SOME_STRING_VALUE&direction=SOME_STRING_VALUE&unit=SOME_STRING_VALUE' \\\n  --header 'Authorization: Basic REPLACE_BASIC_AUTH' \\\n  --header 'X-Ably-Version: SOME_STRING_VALUE'"
                    },
                    {
                        "id": "java_okhttp",
                        "title": "Java + Okhttp",
                        "content": "OkHttpClient client = new OkHttpClient();\n\nRequest request = new Request.Builder()\n  .url(\"https://rest.ably.io/stats?format=SOME_STRING_VALUE&start=SOME_STRING_VALUE&limit=SOME_INTEGER_VALUE&end=SOME_STRING_VALUE&direction=SOME_STRING_VALUE&unit=SOME_STRING_VALUE\")\n  .get()\n  .addHeader(\"X-Ably-Version\", \"SOME_STRING_VALUE\")\n  .addHeader(\"Authorization\", \"Basic REPLACE_BASIC_AUTH\")\n  .build();\n\nResponse response = client.newCall(request).execute();"
                    },
                    {
                        "id": "node_request",
                        "title": "Node + Request",
                        "content": "const request = require('request');\n\nconst options = {\n  method: 'GET',\n  url: 'https://rest.ably.io/stats',\n  qs: {\n    format: 'SOME_STRING_VALUE',\n    start: 'SOME_STRING_VALUE',\n    limit: 'SOME_INTEGER_VALUE',\n    end: 'SOME_STRING_VALUE',\n    direction: 'SOME_STRING_VALUE',\n    unit: 'SOME_STRING_VALUE'\n  },\n  headers: {\n    'X-Ably-Version': 'SOME_STRING_VALUE',\n    Authorization: 'Basic REPLACE_BASIC_AUTH'\n  }\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
                    },
                    {
                        "id": "python_python3",
                        "title": "Python + Python3",
                        "content": "import http.client\n\nconn = http.client.HTTPSConnection(\"rest.ably.io\")\n\nheaders = {\n    'X-Ably-Version': \"SOME_STRING_VALUE\",\n    'Authorization': \"Basic REPLACE_BASIC_AUTH\"\n    }\n\nconn.request(\"GET\", \"/stats?format=SOME_STRING_VALUE&start=SOME_STRING_VALUE&limit=SOME_INTEGER_VALUE&end=SOME_STRING_VALUE&direction=SOME_STRING_VALUE&unit=SOME_STRING_VALUE\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
                    },
                    {
                        "id": "go_native",
                        "title": "Go + Native",
                        "content": "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://rest.ably.io/stats?format=SOME_STRING_VALUE&start=SOME_STRING_VALUE&limit=SOME_INTEGER_VALUE&end=SOME_STRING_VALUE&direction=SOME_STRING_VALUE&unit=SOME_STRING_VALUE\"\n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"X-Ably-Version\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"Authorization\", \"Basic REPLACE_BASIC_AUTH\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
                    },
                    {
                        "id": "ruby_native",
                        "title": "Ruby + Native",
                        "content": "require 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://rest.ably.io/stats?format=SOME_STRING_VALUE&start=SOME_STRING_VALUE&limit=SOME_INTEGER_VALUE&end=SOME_STRING_VALUE&direction=SOME_STRING_VALUE&unit=SOME_STRING_VALUE\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Get.new(url)\nrequest[\"X-Ably-Version\"] = 'SOME_STRING_VALUE'\nrequest[\"Authorization\"] = 'Basic REPLACE_BASIC_AUTH'\n\nresponse = http.request(request)\nputs response.read_body"
                    },
                    {
                        "id": "php_curl",
                        "title": "Php + Curl",
                        "content": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n  CURLOPT_URL => \"https://rest.ably.io/stats?format=SOME_STRING_VALUE&start=SOME_STRING_VALUE&limit=SOME_INTEGER_VALUE&end=SOME_STRING_VALUE&direction=SOME_STRING_VALUE&unit=SOME_STRING_VALUE\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"GET\",\n  CURLOPT_HTTPHEADER => [\n    \"Authorization: Basic REPLACE_BASIC_AUTH\",\n    \"X-Ably-Version: SOME_STRING_VALUE\"\n  ],\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
                    },
                    {
                        "id": "swift_nsurlsession",
                        "title": "Swift + Nsurlsession",
                        "content": "import Foundation\n\nlet headers = [\n  \"X-Ably-Version\": \"SOME_STRING_VALUE\",\n  \"Authorization\": \"Basic REPLACE_BASIC_AUTH\"\n]\n\nlet request = NSMutableURLRequest(url: NSURL(string: \"https://rest.ably.io/stats?format=SOME_STRING_VALUE&start=SOME_STRING_VALUE&limit=SOME_INTEGER_VALUE&end=SOME_STRING_VALUE&direction=SOME_STRING_VALUE&unit=SOME_STRING_VALUE\")! as URL,\n                                        cachePolicy: .useProtocolCachePolicy,\n                                    timeoutInterval: 10.0)\nrequest.httpMethod = \"GET\"\nrequest.allHTTPHeaderFields = headers\n\nlet session = URLSession.shared\nlet dataTask = session.dataTask(with: request as URLRequest, completionHandler: { (data, response, error) -> Void in\n  if (error != nil) {\n    print(error)\n  } else {\n    let httpResponse = response as? HTTPURLResponse\n    print(httpResponse)\n  }\n})\n\ndataTask.resume()"
                    },
                    {
                        "id": "c_libcurl",
                        "title": "C + Libcurl",
                        "content": "CURL *hnd = curl_easy_init();\n\ncurl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, \"GET\");\ncurl_easy_setopt(hnd, CURLOPT_URL, \"https://rest.ably.io/stats?format=SOME_STRING_VALUE&start=SOME_STRING_VALUE&limit=SOME_INTEGER_VALUE&end=SOME_STRING_VALUE&direction=SOME_STRING_VALUE&unit=SOME_STRING_VALUE\");\n\nstruct curl_slist *headers = NULL;\nheaders = curl_slist_append(headers, \"X-Ably-Version: SOME_STRING_VALUE\");\nheaders = curl_slist_append(headers, \"Authorization: Basic REPLACE_BASIC_AUTH\");\ncurl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);\n\nCURLcode ret = curl_easy_perform(hnd);"
                    },
                    {
                        "id": "javascript_xhr",
                        "title": "Javascript + Xhr",
                        "content": "const data = null;\n\nconst xhr = new XMLHttpRequest();\nxhr.withCredentials = true;\n\nxhr.addEventListener(\"readystatechange\", function () {\n  if (this.readyState === this.DONE) {\n    console.log(this.responseText);\n  }\n});\n\nxhr.open(\"GET\", \"https://rest.ably.io/stats?format=SOME_STRING_VALUE&start=SOME_STRING_VALUE&limit=SOME_INTEGER_VALUE&end=SOME_STRING_VALUE&direction=SOME_STRING_VALUE&unit=SOME_STRING_VALUE\");\nxhr.setRequestHeader(\"X-Ably-Version\", \"SOME_STRING_VALUE\");\nxhr.setRequestHeader(\"Authorization\", \"Basic REPLACE_BASIC_AUTH\");\n\nxhr.send(data);"
                    }
                ]
            },
            "parameters": [
                {
                    "$ref": "#/components/parameters/versionHeader"
                },
                {
                    "$ref": "#/components/parameters/responseFormat"
                }
            ]
        },
        "/time": {
            "get": {
                "description": "This returns the service time in milliseconds since the epoch.",
                "operationId": "getTime",
                "responses": {
                    "2XX": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "type": "integer"
                                    },
                                    "type": "array"
                                }
                            },
                            "application/x-msgpack": {
                                "schema": {
                                    "items": {
                                        "type": "integer"
                                    },
                                    "type": "array"
                                }
                            },
                            "text/html": {
                                "schema": {
                                    "type": "string"
                                }
                            }
                        },
                        "description": "OK"
                    },
                    "default": {
                        "$ref": "#/components/responses/Error"
                    }
                },
                "security": [],
                "summary": "Get the service time",
                "tags": [
                    "Stats"
                ],
                "api_calls": [
                    {
                        "id": "shell_curl",
                        "title": "Shell + Curl",
                        "content": "curl --request GET \\\n  --url 'https://rest.ably.io/time?format=SOME_STRING_VALUE' \\\n  --header 'X-Ably-Version: SOME_STRING_VALUE'"
                    },
                    {
                        "id": "java_okhttp",
                        "title": "Java + Okhttp",
                        "content": "OkHttpClient client = new OkHttpClient();\n\nRequest request = new Request.Builder()\n  .url(\"https://rest.ably.io/time?format=SOME_STRING_VALUE\")\n  .get()\n  .addHeader(\"X-Ably-Version\", \"SOME_STRING_VALUE\")\n  .build();\n\nResponse response = client.newCall(request).execute();"
                    },
                    {
                        "id": "node_request",
                        "title": "Node + Request",
                        "content": "const request = require('request');\n\nconst options = {\n  method: 'GET',\n  url: 'https://rest.ably.io/time',\n  qs: {format: 'SOME_STRING_VALUE'},\n  headers: {'X-Ably-Version': 'SOME_STRING_VALUE'}\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
                    },
                    {
                        "id": "python_python3",
                        "title": "Python + Python3",
                        "content": "import http.client\n\nconn = http.client.HTTPSConnection(\"rest.ably.io\")\n\nheaders = { 'X-Ably-Version': \"SOME_STRING_VALUE\" }\n\nconn.request(\"GET\", \"/time?format=SOME_STRING_VALUE\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
                    },
                    {
                        "id": "go_native",
                        "title": "Go + Native",
                        "content": "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://rest.ably.io/time?format=SOME_STRING_VALUE\"\n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"X-Ably-Version\", \"SOME_STRING_VALUE\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
                    },
                    {
                        "id": "ruby_native",
                        "title": "Ruby + Native",
                        "content": "require 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://rest.ably.io/time?format=SOME_STRING_VALUE\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Get.new(url)\nrequest[\"X-Ably-Version\"] = 'SOME_STRING_VALUE'\n\nresponse = http.request(request)\nputs response.read_body"
                    },
                    {
                        "id": "php_curl",
                        "title": "Php + Curl",
                        "content": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n  CURLOPT_URL => \"https://rest.ably.io/time?format=SOME_STRING_VALUE\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"GET\",\n  CURLOPT_HTTPHEADER => [\n    \"X-Ably-Version: SOME_STRING_VALUE\"\n  ],\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
                    },
                    {
                        "id": "swift_nsurlsession",
                        "title": "Swift + Nsurlsession",
                        "content": "import Foundation\n\nlet headers = [\"X-Ably-Version\": \"SOME_STRING_VALUE\"]\n\nlet request = NSMutableURLRequest(url: NSURL(string: \"https://rest.ably.io/time?format=SOME_STRING_VALUE\")! as URL,\n                                        cachePolicy: .useProtocolCachePolicy,\n                                    timeoutInterval: 10.0)\nrequest.httpMethod = \"GET\"\nrequest.allHTTPHeaderFields = headers\n\nlet session = URLSession.shared\nlet dataTask = session.dataTask(with: request as URLRequest, completionHandler: { (data, response, error) -> Void in\n  if (error != nil) {\n    print(error)\n  } else {\n    let httpResponse = response as? HTTPURLResponse\n    print(httpResponse)\n  }\n})\n\ndataTask.resume()"
                    },
                    {
                        "id": "c_libcurl",
                        "title": "C + Libcurl",
                        "content": "CURL *hnd = curl_easy_init();\n\ncurl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, \"GET\");\ncurl_easy_setopt(hnd, CURLOPT_URL, \"https://rest.ably.io/time?format=SOME_STRING_VALUE\");\n\nstruct curl_slist *headers = NULL;\nheaders = curl_slist_append(headers, \"X-Ably-Version: SOME_STRING_VALUE\");\ncurl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);\n\nCURLcode ret = curl_easy_perform(hnd);"
                    },
                    {
                        "id": "javascript_xhr",
                        "title": "Javascript + Xhr",
                        "content": "const data = null;\n\nconst xhr = new XMLHttpRequest();\nxhr.withCredentials = true;\n\nxhr.addEventListener(\"readystatechange\", function () {\n  if (this.readyState === this.DONE) {\n    console.log(this.responseText);\n  }\n});\n\nxhr.open(\"GET\", \"https://rest.ably.io/time?format=SOME_STRING_VALUE\");\nxhr.setRequestHeader(\"X-Ably-Version\", \"SOME_STRING_VALUE\");\n\nxhr.send(data);"
                    }
                ]
            },
            "parameters": [
                {
                    "$ref": "#/components/parameters/versionHeader"
                },
                {
                    "$ref": "#/components/parameters/responseFormat"
                }
            ]
        }
    },
    "components": {
        "headers": {
            "ErrorCode": {
                "description": "The error code.",
                "schema": {
                    "type": "integer"
                }
            },
            "ErrorMessage": {
                "description": "The error message.",
                "schema": {
                    "type": "string"
                }
            },
            "Link": {
                "description": "Links to related resources, in the format defined by [RFC 5988](https://tools.ietf.org/html/rfc5988#section-5). This will potentially include a link with relation type `next`, `first`, and `current`, where appropiate.",
                "required": true,
                "schema": {
                    "pattern": "(<(.*)?>; rel=\\\"(first|current|last)?\\\",)*(<(.*)?>; rel=\\\"(first|current|last)?\\\")+",
                    "type": "string"
                }
            },
            "ServerId": {
                "description": "The ID for the server communicated with.",
                "required": true,
                "schema": {
                    "type": "string"
                }
            }
        },
        "parameters": {
            "channelId": {
                "description": "The [Channel's ID](https://www.ably.io/documentation/rest/channels).",
                "in": "path",
                "name": "channel_id",
                "required": true,
                "schema": {
                    "type": "string"
                }
            },
            "deviceId": {
                "description": "Device's ID.",
                "in": "path",
                "name": "device_id",
                "required": true,
                "schema": {
                    "type": "string"
                }
            },
            "filterDirection": {
                "in": "query",
                "name": "direction",
                "schema": {
                    "default": "backwards",
                    "enum": [
                        "forwards",
                        "backwards"
                    ],
                    "type": "string"
                }
            },
            "filterEnd": {
                "in": "query",
                "name": "end",
                "schema": {
                    "default": "now",
                    "type": "string"
                }
            },
            "filterLimit": {
                "in": "query",
                "name": "limit",
                "schema": {
                    "default": "100",
                    "type": "integer"
                }
            },
            "filterStart": {
                "in": "query",
                "name": "start",
                "schema": {
                    "type": "string"
                }
            },
            "key_name": {
                "description": "The [key name](https://www.ably.io/documentation/rest-api/token-request-spec#api-key-format) comprises of the app ID and key ID of an API key.",
                "in": "path",
                "name": "keyName",
                "required": true,
                "schema": {
                    "type": "string"
                }
            },
            "responseFormat": {
                "description": "The response format you would like",
                "in": "query",
                "name": "format",
                "schema": {
                    "enum": [
                        "json",
                        "jsonp",
                        "msgpack",
                        "html"
                    ],
                    "type": "string"
                }
            },
            "versionHeader": {
                "description": "The version of the API you wish to use.",
                "in": "header",
                "name": "X-Ably-Version",
                "schema": {
                    "type": "string"
                }
            }
        },
        "responses": {
            "Error": {
                "content": {
                    "application/json": {
                        "schema": {
                            "$ref": "#/components/schemas/Error"
                        }
                    },
                    "application/x-msgpack": {
                        "schema": {
                            "$ref": "#/components/schemas/Error"
                        }
                    },
                    "text/html": {
                        "schema": {
                            "$ref": "#/components/schemas/Error"
                        }
                    }
                },
                "description": "Error",
                "headers": {
                    "x-ably-errorcode": {
                        "$ref": "#/components/headers/ErrorCode"
                    },
                    "x-ably-errormessage": {
                        "$ref": "#/components/headers/ErrorMessage"
                    },
                    "x-ably-serverid": {
                        "$ref": "#/components/headers/ServerId"
                    }
                }
            }
        },
        "schemas": {
            "ChannelDetails": {
                "properties": {
                    "channelId": {
                        "description": "The required name of the channel including any qualifier, if any.",
                        "type": "string"
                    },
                    "isGlobalMaster": {
                        "description": "In events relating to the activity of a channel in a specific region, this optionally identifies whether or not that region is responsible for global coordination of the channel.",
                        "type": "boolean"
                    },
                    "region": {
                        "description": "In events relating to the activity of a channel in a specific region, this optionally identifies the region.",
                        "type": "string"
                    },
                    "status": {
                        "$ref": "#/components/schemas/ChannelStatus"
                    }
                },
                "required": [
                    "channelId"
                ],
                "type": "object"
            },
            "ChannelStatus": {
                "description": "A ChannelStatus instance.",
                "properties": {
                    "isActive": {
                        "description": "A required boolean value indicating whether the channel that is the subject of the event is active. For events indicating regional activity of a channel this indicates activity in that region, not global activity.",
                        "type": "boolean"
                    },
                    "occupancy": {
                        "$ref": "#/components/schemas/Occupancy"
                    }
                },
                "required": [
                    "isActive"
                ],
                "type": "object"
            },
            "DeviceDetails": {
                "properties": {
                    "clientId": {
                        "description": "Optional trusted client identifier for the device.",
                        "type": "string"
                    },
                    "deviceSecret": {
                        "description": "Secret value for the device.",
                        "type": "string"
                    },
                    "formFactor": {
                        "description": "Form factor of the push device.",
                        "enum": [
                            "phone",
                            "tablet",
                            "desktop",
                            "tv",
                            "watch",
                            "car",
                            "embedded"
                        ],
                        "type": "string"
                    },
                    "id": {
                        "description": "Unique identifier for the device generated by the device itself.",
                        "type": "string"
                    },
                    "metadata": {
                        "description": "Optional metadata object for this device. The metadata for a device may only be set by clients with push-admin privileges and will be used more extensively in the future with smart notifications.",
                        "type": "object"
                    },
                    "platform": {
                        "description": "Platform of the push device.",
                        "enum": [
                            "ios",
                            "android"
                        ],
                        "type": "string"
                    },
                    "push.recipient": {
                        "$ref": "#/components/schemas/Recipient"
                    },
                    "push.state": {
                        "description": "the current state of the push device.",
                        "enum": [
                            "Active",
                            "Failing",
                            "Failed"
                        ],
                        "readOnly": true,
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "Error": {
                "description": "Returned error from failed REST.",
                "properties": {
                    "code": {
                        "description": "Error code.",
                        "type": "integer"
                    },
                    "href": {
                        "description": "Link to help with error.",
                        "type": "string"
                    },
                    "message": {
                        "description": "Message explaining the error's cause.",
                        "type": "string"
                    },
                    "serverId": {
                        "description": "Server ID with which error was encountered.",
                        "type": "string"
                    },
                    "statusCode": {
                        "description": "Status error code.",
                        "type": "integer"
                    }
                },
                "type": "object"
            },
            "Extras": {
                "description": "Extras object. Currently only allows for [push](https://www.ably.io/documentation/general/push/publish#channel-broadcast-example) extra.",
                "properties": {
                    "push": {
                        "$ref": "#/components/schemas/Push"
                    }
                },
                "type": "object"
            },
            "Message": {
                "description": "Message object.",
                "properties": {
                    "clientId": {
                        "description": "The [client ID](https://www.ably.io/documentation/core-features/authentication#identified-clients) of the publisher of this message.",
                        "type": "string"
                    },
                    "connectionId": {
                        "description": "The connection ID of the publisher of this message.",
                        "type": "string"
                    },
                    "data": {
                        "description": "The string encoded payload, with the encoding specified below.",
                        "type": "string"
                    },
                    "encoding": {
                        "description": "This will typically be empty as all messages received from Ably are automatically decoded client-side using this value. However, if the message encoding cannot be processed, this attribute will contain the remaining transformations not applied to the data payload.",
                        "type": "string"
                    },
                    "extras": {
                        "$ref": "#/components/schemas/Extras"
                    },
                    "id": {
                        "description": "A Unique ID that can be specified by the publisher for [idempotent publishing](https://www.ably.io/documentation/rest/messages#idempotent).",
                        "readOnly": true,
                        "type": "string"
                    },
                    "name": {
                        "description": "The event name, if provided.",
                        "type": "string"
                    },
                    "timestamp": {
                        "description": "Timestamp when the message was received by the Ably, as milliseconds since the epoch.",
                        "format": "int64",
                        "readOnly": true,
                        "type": "integer"
                    }
                },
                "type": "object"
            },
            "Notification": {
                "properties": {
                    "body": {
                        "description": "Text below title on the expanded notification.",
                        "type": "string"
                    },
                    "collapseKey": {
                        "description": "Platform-specific, used to group notifications together.",
                        "type": "string"
                    },
                    "icon": {
                        "description": "Platform-specific icon for the notification.",
                        "type": "string"
                    },
                    "sound": {
                        "description": "Platform-specific sound for the notification.",
                        "type": "string"
                    },
                    "title": {
                        "description": "Title to display at the notification.",
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "Occupancy": {
                "description": "An Occupancy instance indicating the occupancy of a channel. For events indicating regional activity of a channel this indicates activity in that region, not global activity.",
                "properties": {
                    "presenceConnections": {
                        "description": "The number of connections that are authorised to enter members into the presence channel.",
                        "type": "integer"
                    },
                    "presenceMembers": {
                        "description": "The number of members currently entered into the presence channel.",
                        "type": "integer"
                    },
                    "presenceSubscribers": {
                        "description": "The number of connections that are authorised to subscribe to presence messages.",
                        "type": "integer"
                    },
                    "publishers": {
                        "description": "The number of connections attached to the channel that are authorised to publish.",
                        "type": "integer"
                    },
                    "subscribers": {
                        "description": "The number of connections attached that are authorised to subscribe to messages.",
                        "type": "integer"
                    }
                },
                "type": "object"
            },
            "PresenceMessage": {
                "properties": {
                    "action": {
                        "description": "The event signified by a PresenceMessage.",
                        "enum": [
                            "ABSENT",
                            "PRESENT",
                            "ENTER",
                            "LEAVE",
                            "UPDATE"
                        ],
                        "readOnly": true,
                        "type": "string"
                    },
                    "clientId": {
                        "description": "The client ID of the publisher of this presence update.",
                        "type": "string"
                    },
                    "connectionId": {
                        "description": "The connection ID of the publisher of this presence update.",
                        "type": "string"
                    },
                    "data": {
                        "description": "The presence update payload, if provided.",
                        "type": "string"
                    },
                    "encoding": {
                        "description": "This will typically be empty as all presence updates received from Ably are automatically decoded client-side using this value. However, if the message encoding cannot be processed, this attribute will contain the remaining transformations not applied to the data payload.",
                        "type": "string"
                    },
                    "extras": {
                        "$ref": "#/components/schemas/Extras"
                    },
                    "id": {
                        "description": "Unique ID assigned by Ably to this presence update.",
                        "readOnly": true,
                        "type": "string"
                    },
                    "timestamp": {
                        "description": "Timestamp when the presence update was received by Ably, as milliseconds since the epoch.",
                        "format": "int64",
                        "readOnly": true,
                        "type": "integer"
                    }
                },
                "type": "object"
            },
            "Push": {
                "properties": {
                    "apns": {
                        "description": "Extends and overrides generic values when delivering via APNs. [See examples](https://www.ably.io/documentation/general/push/publish#payload-structure)",
                        "properties": {
                            "notification": {
                                "$ref": "#/components/schemas/Notification"
                            }
                        },
                        "type": "object"
                    },
                    "data": {
                        "description": "Arbitrary [key-value string-to-string payload](https://www.ably.io/documentation/general/push/publish#channel-broadcast-example).",
                        "type": "string"
                    },
                    "fcm": {
                        "description": "Extends and overrides generic values when delivering via GCM/FCM. [See examples](https://www.ably.io/documentation/general/push/publish#payload-structure)",
                        "properties": {
                            "notification": {
                                "$ref": "#/components/schemas/Notification"
                            }
                        },
                        "type": "object"
                    },
                    "notification": {
                        "$ref": "#/components/schemas/Notification"
                    },
                    "web": {
                        "description": "Extends and overrides generic values when delivering via web. [See examples](https://www.ably.io/documentation/general/push/publish#payload-structure)",
                        "properties": {
                            "notification": {
                                "$ref": "#/components/schemas/Notification"
                            }
                        },
                        "type": "object"
                    }
                },
                "type": "object"
            },
            "Recipient": {
                "description": "Push recipient details for a device.",
                "properties": {
                    "clientId": {
                        "description": "Client ID of recipient",
                        "type": "string",
                        "writeOnly": true
                    },
                    "deviceId": {
                        "description": "Client ID of recipient",
                        "type": "string",
                        "writeOnly": true
                    },
                    "deviceToken": {
                        "description": "when using APNs, specifies the required device token.",
                        "type": "string"
                    },
                    "registrationToken": {
                        "description": "when using GCM or FCM, specifies the required registration token.",
                        "type": "string"
                    },
                    "transportType": {
                        "description": "Defines which push platform is being used.",
                        "enum": [
                            "apns",
                            "fcm",
                            "gcm"
                        ],
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "SignedTokenRequest": {
                "allOf": [
                    {
                        "$ref": "#/components/schemas/TokenRequest"
                    },
                    {
                        "properties": {
                            "mac": {
                                "description": "A signature, generated as an HMAC of each of the above components, using the key secret value.",
                                "type": "string"
                            }
                        },
                        "required": [
                            "mac"
                        ],
                        "type": "object"
                    }
                ]
            },
            "TokenDetails": {
                "properties": {
                    "capability": {
                        "description": "Regular expression representation of the capabilities of the token.",
                        "type": "string"
                    },
                    "expires": {
                        "description": "Timestamp of token expiration.",
                        "type": "integer"
                    },
                    "issued": {
                        "description": "Timestamp of token creation.",
                        "type": "integer"
                    },
                    "keyName": {
                        "description": "Name of the key used to create the token",
                        "type": "string"
                    },
                    "token": {
                        "description": "The Ably Token.",
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "TokenRequest": {
                "properties": {
                    "capability": {
                        "description": "The [capabilities](https://www.ably.io/documentation/core-features/authentication#capabilities-explained) (i.e. a set of channel names/namespaces and, for each, a set of operations) which should be a subset of the set of capabilities associated with the key specified in keyName.",
                        "example": {
                            "channel1": [
                                "publish",
                                "subscribe"
                            ]
                        },
                        "type": "object"
                    },
                    "clientId": {
                        "description": "The [client ID](https://www.ably.io/documentation/core-features/authentication#identified-clients) to be assosciated with the token. Can be set to * to allow for any client ID to be used.",
                        "type": "string"
                    },
                    "keyName": {
                        "description": "Name of the key used for the TokenRequest. The keyName comprises of the app ID and key ID on an API Key.",
                        "example": "xVLyHw.LMJZxw",
                        "type": "string"
                    },
                    "nonce": {
                        "description": "An unquoted, un-escaped random string of at least 16 characters. Used to ensure the Ably TokenRequest cannot be reused.",
                        "type": "string"
                    },
                    "timestamp": {
                        "description": "Time of creation of the Ably TokenRequest.",
                        "type": "integer"
                    }
                },
                "required": [
                    "keyName",
                    "capability",
                    "timestamp",
                    "nonce"
                ],
                "type": "object"
            }
        },
        "securitySchemes": {
            "basicAuth": {
                "description": "Basic Authentication using an [API key](https://www.ably.io/documentation/core-features/authentication#basic-authentication).",
                "scheme": "basic",
                "type": "http"
            },
            "bearerAuth": {
                "description": "Token Authentication using an [Ably Token](https://www.ably.io/documentation/core-features/authentication#basic-authentication), or optionally an [Ably JWT](https://www.ably.io/documentation/core-features/authentication#ably-jwt-process).",
                "scheme": "bearer",
                "type": "http"
            }
        }
    }
}